name: Integration Tests

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: string
      url:
        description: 'Target URL'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
        - development
      url:
        description: 'Target URL'
        required: false
        default: ''
        type: string
  schedule:
    # Run integration tests every 4 hours
    - cron: '0 */4 * * *'

env:
  NODE_VERSION: '20.x'

jobs:
  # API Integration Tests
  api-integration:
    name: API Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set target URL
        run: |
          if [ -n "${{ github.event.inputs.url }}" ]; then
            echo "TARGET_URL=${{ github.event.inputs.url }}" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" = "workflow_call" ]; then
            echo "TARGET_URL=${{ github.event.inputs.url }}" >> $GITHUB_ENV
          else
            case "${{ github.event.inputs.environment || inputs.environment }}" in
              production)
                echo "TARGET_URL=https://mariaborysevych.com" >> $GITHUB_ENV
                ;;
              staging)
                echo "TARGET_URL=https://staging.mariaborysevych.com" >> $GITHUB_ENV
                ;;
              *)
                echo "TARGET_URL=http://localhost:3000" >> $GITHUB_ENV
                ;;
            esac
          fi

      - name: Run API integration tests
        run: |
          npm run test:integration -- --baseUrl=${{ env.TARGET_URL }}
        env:
          TEST_API_KEY: ${{ secrets.TEST_API_KEY }}
          TEST_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          TEST_SUPABASE_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}

      - name: Upload API test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-integration-results
          path: |
            test-results/api/
            coverage/api/
          retention-days: 30

  # Database Integration Tests
  database-integration:
    name: Database Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          # Create test database if it doesn't exist
          psql ${{ secrets.TEST_DATABASE_URL }} -c "SELECT 'OK';" || \
          createdb ${{ secrets.TEST_DATABASE_NAME }}

      - name: Run database migrations
        run: |
          npx supabase db reset --db-url ${{ secrets.TEST_DATABASE_URL }}

      - name: Run database integration tests
        run: |
          npm run test:db:integration
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_KEY }}

      - name: Cleanup test database
        if: always()
        run: |
          dropdb ${{ secrets.TEST_DATABASE_NAME }} || true

      - name: Upload DB test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: db-integration-results
          path: test-results/db/
          retention-days: 30

  # Payment Integration Tests
  payment-integration:
    name: Payment Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run payment integration tests
        run: |
          npm run test:payment:integration
        env:
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          STRIPE_TEST_MODE: true
          TEST_STRIPE_KEY: ${{ secrets.TEST_STRIPE_KEY }}

      - name: Upload payment test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: payment-integration-results
          path: test-results/payment/
          retention-days: 30

  # End-to-End Integration Tests
  e2e-integration:
    name: End-to-End Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        device: [desktop, mobile]
      steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Set target URL
        run: |
          if [ -n "${{ github.event.inputs.url }}" ]; then
            echo "TARGET_URL=${{ github.event.inputs.url }}" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" = "workflow_call" ]; then
            echo "TARGET_URL=${{ github.event.inputs.url }}" >> $GITHUB_ENV
          else
            case "${{ github.event.inputs.environment || inputs.environment }}" in
              production)
                echo "TARGET_URL=https://mariaborysevych.com" >> $GITHUB_ENV
                ;;
              staging)
                echo "TARGET_URL=https://staging.mariaborysevych.com" >> $GITHUB_ENV
                ;;
              *)
                echo "TARGET_URL=http://localhost:3000" >> $GITHUB_ENV
                ;;
            esac
          fi

      - name: Run E2E integration tests
        run: |
          npx playwright test \
            --config=playwright.config.ts \
            --project="${{ matrix.browser }}" \
            --grep="integration" \
            --device="${{ matrix.device }}" \
            --baseUrl="${{ env.TARGET_URL }}"
        env:
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.browser }}-${{ matrix.device }}
          path: |
            playwright-report/
            test-results/
            trace/
          retention-days: 30

  # Performance Integration Tests
  performance-tests:
    name: Performance Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set target URL
        run: |
          if [ -n "${{ github.event.inputs.url }}" ]; then
            echo "TARGET_URL=${{ github.event.inputs.url }}" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" = "workflow_call" ]; then
            echo "TARGET_URL=${{ github.event.inputs.url }}" >> $GITHUB_ENV
          else
            case "${{ github.event.inputs.environment || inputs.environment }}" in
              production)
                echo "TARGET_URL=https://mariaborysevych.com" >> $GITHUB_ENV
                ;;
              staging)
                echo "TARGET_URL=https://staging.mariaborysevych.com" >> $GITHUB_ENV
                ;;
              *)
                echo "TARGET_URL=http://localhost:3000" >> $GITHUB_ENV
                ;;
            esac
          fi

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ env.TARGET_URL }}/
            ${{ env.TARGET_URL }}/beauty
            ${{ env.TARGET_URL }}/fitness
            ${{ env.TARGET_URL }}/booking
          configPath: '.lighthouserc.js'
          uploadArtifacts: true
          temporaryPublicStorage: false

      - name: Run Web Vitals test
        run: |
          npm install -g @web/test-runner
          npx web-test-runner test/performance/**/*.test.js --node-resolve --coverage

      - name: Run load testing with k6
        uses: grafana/k6-action@v0.4.0
        with:
          filename: tests/load/simple-load.js
        env:
          K6_PROMETHEUS_RW_SERVER_URL: ${{ secrets.PROMETHEUS_RW_URL }}

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            .lighthouseci/
            coverage/
            load-test-results/
          retention-days: 30

  # Security Integration Tests
  security-integration:
    name: Security Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set target URL
        run: |
          if [ -n "${{ github.event.inputs.url }}" ]; then
            echo "TARGET_URL=${{ github.event.inputs.url }}" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" = "workflow_call" ]; then
            echo "TARGET_URL=${{ github.event.inputs.url }}" >> $GITHUB_ENV
          else
            case "${{ github.event.inputs.environment || inputs.environment }}" in
              production)
                echo "TARGET_URL=https://mariaborysevych.com" >> $GITHUB_ENV
                ;;
              staging)
                echo "TARGET_URL=https://staging.mariaborysevych.com" >> $GITHUB_ENV
                ;;
              *)
                echo "TARGET_URL=http://localhost:3000" >> $GITHUB_ENV
                ;;
            esac
          fi

      - name: Run OWASP ZAP Integration Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: ${{ env.TARGET_URL }}
          rules_file_name: '.zap/rules-full.tsv'
          cmd_options: '-a'

      - name: Run authentication tests
        run: |
          npm run test:auth:integration
        env:
          TEST_API_ENDPOINT: ${{ env.TARGET_URL }}/api
          TEST_AUTH_TOKEN: ${{ secrets.TEST_AUTH_TOKEN }}

      - name: Run authorization tests
        run: |
          npm run test:authz:integration
        env:
          TEST_API_ENDPOINT: ${{ env.TARGET_URL }}/api
          TEST_ADMIN_TOKEN: ${{ secrets.TEST_ADMIN_TOKEN }}

      - name: Upload security integration results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-integration-results
          path: |
            report_html.html
            report_md.html
            test-results/security/
          retention-days: 30

  # Generate Integration Test Report
  integration-report:
    name: Integration Test Report
    runs-on: ubuntu-latest
    needs: [api-integration, database-integration, payment-integration, e2e-integration, performance-tests, security-integration]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate summary report
        run: |
          echo "# Integration Test Report" > integration-report.md
          echo "" >> integration-report.md
          echo "**Environment:** ${{ inputs.environment || github.event.inputs.environment }}" >> integration-report.md
          echo "**Date:** $(date)" >> integration-report.md
          echo "" >> integration-report.md

          echo "## Test Results Summary" >> integration-report.md
          echo "" >> integration-report.md

          # API Integration
          echo "### API Integration Tests" >> integration-report.md
          if [ "${{ needs.api-integration.result }}" == "success" ]; then
            echo "✅ **Status:** Passed" >> integration-report.md
          else
            echo "❌ **Status:** Failed" >> integration-report.md
          fi
          echo "" >> integration-report.md

          # Database Integration
          echo "### Database Integration Tests" >> integration-report.md
          if [ "${{ needs.database-integration.result }}" == "success" ]; then
            echo "✅ **Status:** Passed" >> integration-report.md
          elif [ "${{ needs.database-integration.result }}" == "skipped" ]; then
            echo "⏭️ **Status:** Skipped" >> integration-report.md
          else
            echo "❌ **Status:** Failed" >> integration-report.md
          fi
          echo "" >> integration-report.md

          # Payment Integration
          echo "### Payment Integration Tests" >> integration-report.md
          if [ "${{ needs.payment-integration.result }}" == "success" ]; then
            echo "✅ **Status:** Passed" >> integration-report.md
          elif [ "${{ needs.payment-integration.result }}" == "skipped" ]; then
            echo "⏭️ **Status:** Skipped" >> integration-report.md
          else
            echo "❌ **Status:** Failed" >> integration-report.md
          fi
          echo "" >> integration-report.md

          # E2E Integration
          echo "### End-to-End Integration Tests" >> integration-report.md
          if [ "${{ needs.e2e-integration.result }}" == "success" ]; then
            echo "✅ **Status:** All browsers passed" >> integration-report.md
          else
            echo "❌ **Status:** Some tests failed" >> integration-report.md
          fi
          echo "" >> integration-report.md

          # Performance Tests
          echo "### Performance Tests" >> integration-report.md
          if [ "${{ needs.performance-tests.result }}" == "success" ]; then
            echo "✅ **Status:** Performance metrics within thresholds" >> integration-report.md
          else
            echo "❌ **Status:** Performance issues detected" >> integration-report.md
          fi
          echo "" >> integration-report.md

          # Security Integration
          echo "### Security Integration Tests" >> integration-report.md
          if [ "${{ needs.security-integration.result }}" == "success" ]; then
            echo "✅ **Status:** No security vulnerabilities found" >> integration-report.md
          else
            echo "⚠️ **Status:** Security issues detected" >> integration-report.md
          fi
          echo "" >> integration-report.md

          echo "## Artifacts" >> integration-report.md
          echo "Detailed reports are available in the artifacts section of this workflow run." >> integration-report.md

      - name: Upload integration report
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-report
          path: integration-report.md
          retention-days: 90

      - name: Comment on commit/PR
        if: github.event_name == 'workflow_dispatch' && github.event.issue.number
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('integration-report.md', 'utf8');

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## Integration Test Results\n\n${report}`
            });

      - name: Notify team of failures
        if: contains(needs.*.result, 'failure')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          text: |
            Integration test failures detected in ${{ inputs.environment || github.event.inputs.environment }}

            View details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}