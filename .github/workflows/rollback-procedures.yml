name: Rollback Procedures

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Rollback action'
        required: true
        default: 'list'
        type: choice
        options:
        - list
        - rollback
        - health-check
        - emergency
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      version:
        description: 'Target version (tag or commit SHA)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: false
        type: string
      confirm:
        description: 'Confirm rollback (type: CONFIRM)'
        required: false
        default: ''
        type: string
  repository_dispatch:
    types: [emergency-rollback]
  schedule:
    # Health check every hour
    - cron: '0 * * * *'

env:
  NODE_VERSION: '20.x'

permissions:
  contents: write
  deployments: write
  pull-requests: write
  issues: write

jobs:
  # List Available Rollback Points
  list-rollback-points:
    name: List Rollback Points
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'list' || github.event.inputs.action == 'health-check'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get recent deployments
        id: deployments
        run: |
          # Get recent successful deployments
          echo "## üîÑ Recent Successful Deployments" > rollback-points.md
          echo "" >> rollback-points.md
          echo "| Version | Commit | Date | Environment | Status |" >> rollback-points.md
          echo "|---------|--------|------|-------------|--------|" >> rollback-points.md

          # Get recent tags
          git tag --sort=-creatordate --format="%(refname:short)|%(objectname:short)|%(creatordate:short)" | head -10 | while IFS='|' read -r tag commit date; do
            echo "| [$tag](https://github.com/${{ github.repository }}/releases/tag/$tag) | [$commit](https://github.com/${{ github.repository }}/commit/$commit) | $date | Production | ‚úÖ |" >> rollback-points.md
          done

          echo "" >> rollback-points.md
          echo "### üìã Recent Commits" >> rollback-points.md
          echo "" >> rollback-points.md
          echo "| Commit | Message | Author | Date |" >> rollback-points.md
          echo "|--------|---------|--------|------|" >> rollback-points.md

          git log --oneline --format="%h|%s|%an|%ar" -10 | while IFS='|' read -r commit message author date; do
            # Escape markdown special characters in message
            message=$(echo "$message" | sed 's/|/\\|/g')
            echo "| [$commit](https://github.com/${{ github.repository }}/commit/$commit) | $message | $author | $date |" >> rollback-points.md
          done

          # Get Vercel deployments
          if command -v vercel &> /dev/null; then
            echo "" >> rollback-points.md
            echo "### üöÄ Vercel Deployments" >> rollback-points.md
            echo "" >> rollback-points.md
            npx vercel list --scope=${{ secrets.VERCEL_ORG_ID }} --limit=10 --format="| {url} | {created} | {state} |" >> rollback-points.md || echo "Could not fetch Vercel deployments" >> rollback-points.md
          fi

      - name: Display rollback points
        run: |
          cat rollback-points.md
          echo ""
          echo "üí° To rollback, use: 'Manual Rollback' workflow_dispatch with desired version"

      - name: Upload rollback points
        uses: actions/upload-artifact@v4
        with:
          name: rollback-points
          path: rollback-points.md
          retention-days: 7

  # Health Check Before Rollback
  pre-rollback-health-check:
    name: Pre-Rollback Health Check
    runs-on: ubuntu-latest
    needs: list-rollback-points
    if: github.event.inputs.action == 'rollback' || github.event.inputs.action == 'emergency'
    outputs:
      healthy: ${{ steps.health.outputs.healthy }}
      issues: ${{ steps.health.outputs.issues }}
      critical_errors: ${{ steps.health.outputs.critical_errors }}
    steps:
      - name: Check current deployment health
        id: health
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          BASE_URL="${{ github.event.inputs.environment == 'production' && 'https://mariaborysevych.com' || 'https://staging.mariaborysevych.com' }}"

          echo "üîç Performing health check for $ENVIRONMENT..."
          echo "URL: $BASE_URL"

          ISSUES=0
          CRITICAL_ERRORS=0
          HEALTH_REPORT="health-check-report.md"

          cat > "$HEALTH_REPORT" << EOF
          # üîç Health Check Report

          **Environment**: $ENVIRONMENT
          **URL**: $BASE_URL
          **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)

          ## Health Checks

          EOF

          # Basic health checks
          echo "### Basic Health Checks" >> "$HEALTH_REPORT"
          echo "" >> "$HEALTH_REPORT"

          if curl -f -s "$BASE_URL/" > /dev/null; then
            echo "‚úÖ Homepage: Accessible" >> "$HEALTH_REPORT"
          else
            echo "‚ùå Homepage: Not accessible" >> "$HEALTH_REPORT"
            ISSUES=$((ISSUES + 1))
            CRITICAL_ERRORS=$((CRITICAL_ERRORS + 1))
          fi

          if curl -f -s "$BASE_URL/health" > /dev/null; then
            echo "‚úÖ Health Endpoint: Healthy" >> "$HEALTH_REPORT"
          else
            echo "‚ùå Health Endpoint: Unhealthy" >> "$HEALTH_REPORT"
            ISSUES=$((ISSUES + 1))
            CRITICAL_ERRORS=$((CRITICAL_ERRORS + 1))
          fi

          if curl -f -s "$BASE_URL/api/health" > /dev/null; then
            echo "‚úÖ API Health: Healthy" >> "$HEALTH_REPORT"
          else
            echo "‚ùå API Health: Unhealthy" >> "$HEALTH_REPORT"
            ISSUES=$((ISSUES + 1))
          fi

          # Critical page checks
          echo "" >> "$HEALTH_REPORT"
          echo "### Critical Page Checks" >> "$HEALTH_REPORT"
          echo "" >> "$HEALTH_REPORT"

          CRITICAL_PAGES=("/beauty" "/fitness" "/booking" "/contact")
          for page in "${CRITICAL_PAGES[@]}"; do
            if curl -f -s "$BASE_URL$page" > /dev/null; then
              echo "‚úÖ $page: Accessible" >> "$HEALTH_REPORT"
            else
              echo "‚ùå $page: Not accessible" >> "$HEALTH_REPORT"
              ISSUES=$((ISSUES + 1))
            fi
          done

          # Performance check
          echo "" >> "$HEALTH_REPORT"
          echo "### Performance Check" >> "$HEALTH_REPORT"
          echo "" >> "$HEALTH_REPORT"

          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$BASE_URL/" | awk '{printf "%.0f", $1 * 1000}')
          if [[ $RESPONSE_TIME -lt 2000 ]]; then
            echo "‚úÖ Response Time: ${RESPONSE_TIME}ms (Good)" >> "$HEALTH_REPORT"
          elif [[ $RESPONSE_TIME -lt 5000 ]]; then
            echo "‚ö†Ô∏è Response Time: ${RESPONSE_TIME}ms (Slow)" >> "$HEALTH_REPORT"
            ISSUES=$((ISSUES + 1))
          else
            echo "‚ùå Response Time: ${RESPONSE_TIME}ms (Very Slow)" >> "$HEALTH_REPORT"
            ISSUES=$((ISSUES + 1))
          fi

          # SSL certificate check
          echo "" >> "$HEALTH_REPORT"
          echo "### SSL Certificate Check" >> "$HEALTH_REPORT"
          echo "" >> "$HEALTH_REPORT"

          if echo | openssl s_client -connect "$(echo "$BASE_URL" | sed 's|https://||'):443" 2>/dev/null | openssl x509 -noout -dates | grep -q "notAfter"; then
            EXPIRY=$(echo | openssl s_client -connect "$(echo "$BASE_URL" | sed 's|https://||'):443" 2>/dev/null | openssl x509 -noout -dates | grep "notAfter" | cut -d= -f2)
            echo "‚úÖ SSL Certificate: Valid (expires $EXPIRY)" >> "$HEALTH_REPORT"
          else
            echo "‚ùå SSL Certificate: Invalid or expired" >> "$HEALTH_REPORT"
            ISSUES=$((ISSUES + 1))
            CRITICAL_ERRORS=$((CRITICAL_ERRORS + 1))
          fi

          # Summary
          echo "" >> "$HEALTH_REPORT"
          echo "## Summary" >> "$HEALTH_REPORT"
          echo "" >> "$HEALTH_REPORT"
          echo "- **Total Issues**: $ISSUES" >> "$HEALTH_REPORT"
          echo "- **Critical Errors**: $CRITICAL_ERRORS" >> "$HEALTH_REPORT"

          if [[ $CRITICAL_ERRORS -gt 0 ]]; then
            echo "- **Status**: üö® Critical Issues Detected" >> "$HEALTH_REPORT"
            echo "healthy=false" >> $GITHUB_OUTPUT
          elif [[ $ISSUES -gt 0 ]]; then
            echo "- **Status**: ‚ö†Ô∏è Issues Detected" >> "$HEALTH_REPORT"
            echo "healthy=false" >> $GITHUB_OUTPUT
          else
            echo "- **Status**: ‚úÖ All Systems Healthy" >> "$HEALTH_REPORT"
            echo "healthy=true" >> $GITHUB_OUTPUT
          fi

          echo "issues=$ISSUES" >> $GITHUB_OUTPUT
          echo "critical_errors=$CRITICAL_ERRORS" >> $GITHUB_OUTPUT

          # Display summary
          cat "$HEALTH_REPORT"

      - name: Upload health check report
        uses: actions/upload-artifact@v4
        with:
          name: health-check-report
          path: health-check-report.md
          retention-days: 7

  # Execute Rollback
  execute-rollback:
    name: Execute Rollback
    runs-on: ubuntu-latest
    needs: pre-rollback-health-check
    if: github.event.inputs.action == 'rollback' || github.event.inputs.action == 'emergency'
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - name: Verify rollback confirmation
        run: |
          if [[ "${{ github.event.inputs.confirm }}" != "CONFIRM" ]]; then
            echo "‚ùå Rollback not confirmed. Type 'CONFIRM' in the confirm field to proceed."
            echo "üí° This is a safety measure to prevent accidental rollbacks."
            exit 1
          fi

          if [[ "${{ needs.pre-rollback-health-check.outputs.healthy }}" == "true" ]]; then
            echo "‚ö†Ô∏è Current deployment appears healthy. Are you sure you want to rollback?"
            echo "üí° Consider if rollback is necessary before proceeding."
          fi

          echo "‚úÖ Rollback confirmed. Proceeding with deployment rollback..."

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine rollback target
        id: target
        run: |
          TARGET_VERSION="${{ github.event.inputs.version }}"

          if [[ -z "$TARGET_VERSION" ]]; then
            echo "‚ùå Target version is required for rollback"
            exit 1
          fi

          # Validate target exists
          if git rev-parse "$TARGET_VERSION" >/dev/null 2>&1; then
            echo "‚úÖ Found target: $TARGET_VERSION"
            echo "commit=$(git rev-parse "$TARGET_VERSION")" >> $GITHUB_OUTPUT
            echo "version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Target version not found: $TARGET_VERSION"
            exit 1
          fi

      - name: Create rollback branch
        run: |
          TARGET_VERSION="${{ steps.target.outputs.version }}"
          ROLLBACK_BRANCH="rollback/$TARGET_VERSION-$(date +%s)"

          git checkout -b "$ROLLBACK_BRANCH"
          git reset --hard "${{ steps.target.outputs.commit }}"

          echo "üìÇ Created rollback branch: $ROLLBACK_BRANCH"
          echo "rollback_branch=$ROLLBACK_BRANCH" >> $GITHUB_STEP_SUMMARY

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build rollback version
        run: |
          npm run build

          # Create rollback metadata
          cat > rollback-info.json << EOF
          {
            "rollback_version": "${{ steps.target.outputs.version }}",
            "rollback_commit": "${{ steps.target.outputs.commit }}",
            "rollback_reason": "${{ github.event.inputs.reason || 'Manual rollback' }}",
            "rollback_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "previous_version": "$(git describe --tags --abbrev=0 HEAD@{1} 2>/dev/null || echo 'unknown')",
            "environment": "${{ github.event.inputs.environment }}",
            "initiated_by": "${{ github.actor }}",
            "health_issues_before": "${{ needs.pre-rollback-health-check.outputs.issues }}",
            "critical_errors_before": "${{ needs.pre-rollback-health-check.outputs.critical_errors }}"
          }
          EOF

      - name: Deploy rollback version
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ github.event.inputs.environment == 'production' && '--prod' || '' }}
          working-directory: ./

      - name: Verify rollback deployment
        run: |
          sleep 30
          DEPLOY_URL="${{ steps.deploy.outputs.preview-url }}"

          if [[ -z "$DEPLOY_URL" ]]; then
            DEPLOY_URL="${{ github.event.inputs.environment == 'production' && 'https://mariaborysevych.com' || 'https://staging.mariaborysevych.com' }}"
          fi

          echo "üîç Verifying rollback deployment at: $DEPLOY_URL"

          # Health checks
          for i in {1..10}; do
            if curl -f "$DEPLOY_URL/" && curl -f "$DEPLOY_URL/health"; then
              echo "‚úÖ Rollback deployment verified (attempt $i/10)"
              break
            fi
            if [[ $i -eq 10 ]]; then
              echo "‚ùå Rollback deployment verification failed"
              exit 1
            fi
            echo "‚è≥ Waiting for deployment... (attempt $i/10)"
            sleep 30
          done

          # Version verification
          if curl -f "$DEPLOY_URL/api/version" 2>/dev/null | grep -q "${{ steps.target.outputs.version }}"; then
            echo "‚úÖ Version verification passed"
          else
            echo "‚ö†Ô∏è Version verification failed - endpoint may not exist or version not returned"
          fi

      - name: Run post-rollback smoke tests
        run: |
          DEPLOY_URL="${{ steps.deploy.outputs.preview-url }}"
          if [[ -z "$DEPLOY_URL" ]]; then
            DEPLOY_URL="${{ github.event.inputs.environment == 'production' && 'https://mariaborysevych.com' || 'https://staging.mariaborysevych.com' }}"
          fi

          echo "üß™ Running post-rollback smoke tests..."

          # Critical path tests
          CRITICAL_PATHS=("/" "/beauty" "/fitness" "/booking" "/contact" "/health" "/api/health")
          FAILED_PATHS=()

          for path in "${CRITICAL_PATHS[@]}"; do
            if curl -f -s "$DEPLOY_URL$path" > /dev/null; then
              echo "‚úÖ $path - OK"
            else
              echo "‚ùå $path - FAILED"
              FAILED_PATHS+=("$path")
            fi
          done

          if [[ ${#FAILED_PATHS[@]} -gt 0 ]]; then
            echo ""
            echo "‚ùå Smoke test failures detected:"
            printf '  %s\n' "${FAILED_PATHS[@]}"
            echo ""
            echo "‚ö†Ô∏è Rollback may not have resolved all issues"
            echo "üí° Consider additional troubleshooting or contacting the team"
          else
            echo "‚úÖ All smoke tests passed - rollback appears successful"
          fi

      - name: Push rollback branch
        run: |
          git config --local user.email "rollback-bot@mariaborysevych.com"
          git config --local user.name "Rollback Bot"

          git push -u origin "$(git branch --show-current)"

      - name: Create rollback issue
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.target.outputs.version }}';
            const reason = '${{ github.event.inputs.reason || "Manual rollback" }}';
            const environment = '${{ github.event.inputs.environment }}';

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîÑ Rollback to ${version} - ${environment}`,
              body: `## üîÑ Rollback Summary

              **Target Version**: ${version}
              **Environment**: ${environment}
              **Reason**: ${reason}
              **Initiated By**: ${{ github.actor }}
              **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)

              ### üìä Pre-Rollback Health Check
              - **Issues Found**: ${{ needs.pre-rollback-health-check.outputs.issues }}
              - **Critical Errors**: ${{ needs.pre-rollback-health-check.outputs.critical_errors }}

              ### üöÄ Rollback Details
              - **Rollback Commit**: [${{ steps.target.outputs.commit }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ steps.target.outputs.commit }})
              - **Rollback Branch**: \`${ROLLBACK_BRANCH:-rollback/${version}-$(date +%s)}\`
              - **Deployment URL**: ${{ steps.deploy.outputs.preview-url || (environment == 'production' && 'https://mariaborysevych.com' || 'https://staging.mariaborysevych.com') }}

              ### ‚úÖ Post-Rollback Verification
              - **Health Checks**: Completed
              - **Smoke Tests**: Completed
              - **Critical Paths**: Verified

              ### üìã Next Steps
              - [ ] Monitor deployment stability for 2 hours
              - [ ] Investigate root cause of original issues
              - [ ] Plan fix for future deployment
              - [ ] Update documentation if needed
              - [ ] Communicate with stakeholders

              ### üîó Related Resources
              - [Deployment Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              - [Rollback Branch](${{ github.server_url }}/${{ github.repository }}/tree/${ROLLBACK_BRANCH:-rollback/${version}-$(date +%s)}})
              - [Previous Commits](${{ github.server_url }}/${{ github.repository }}/commits/${{ steps.target.outputs.commit }})

              ---
              *This rollback was initiated via GitHub Actions*
              `,
              labels: ['rollback', 'critical', environment],
              assignees: ['${{ github.actor }}']
            });

      - name: Send rollback notifications
        run: |
          # Slack notification
          if [[ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "text": "üîÑ **Rollback Completed**",
                "attachments": [{
                  "color": "warning",
                  "fields": [
                    {"title": "Environment", "value": "${{ github.event.inputs.environment }}", "short": true},
                    {"title": "Version", "value": "${{ steps.target.outputs.version }}", "short": true},
                    {"title": "Reason", "value": "${{ github.event.inputs.reason || "Manual rollback" }}", "short": false},
                    {"title": "Initiated By", "value": "${{ github.actor }}", "short": true}
                  ],
                  "actions": [{
                    "type": "button",
                    "text": "View Deployment",
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }]
                }]
              }' \
              "${{ secrets.SLACK_WEBHOOK_URL }}"
          fi

          echo "üì¢ Rollback notifications sent"

      - name: Upload rollback artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rollback-artifacts
          path: |
            rollback-info.json
            dist/
            health-check-report.md
          retention-days: 30

  # Emergency Rollback (Automatic)
  emergency-rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch' && github.event.action == 'emergency-rollback'
    environment:
      name: production
    steps:
      - name: Process emergency rollback
        run: |
          echo "üö® EMERGENCY ROLLBACK TRIGGERED"
          echo "Reason: ${{ github.event.client_payload.reason || 'Automatic emergency rollback' }}"
          echo "Triggered by: ${{ github.event.client_payload.triggered_by || 'System' }}"

          # This would implement automatic rollback logic
          # For now, create an issue and notify team
          echo "Creating emergency rollback issue..."

      - name: Create emergency issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® EMERGENCY ROLLBACK REQUIRED',
              body: `## üö® Emergency Rollback Triggered

              **Reason**: ${{ github.event.client_payload.reason || 'Automatic emergency rollback' }}
              **Triggered By**: ${{ github.event.client_payload.triggered_by || 'System' }}
              **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)

              ### Immediate Action Required
              1. **Assess the situation** - Check current deployment status
              2. **Execute rollback** - Use the 'Execute Rollback' workflow with the most recent stable version
              3. **Monitor** - Ensure rollback resolves the issues
              4. **Communicate** - Notify stakeholders of the rollback

              ### üîó Quick Links
              - [Current Status](${{ github.server_url }}/${{ github.repository }})
              - [Deployment Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              - [Rollback Workflow](${{ github.server_url }}/${{ github.repository }}/actions/workflows/rollback-procedures.yml})

              ---
              *This is an automated emergency alert. Immediate attention is required.*
              `,
              labels: ['emergency', 'rollback', 'critical'],
              assignees: ['${{ github.event.client_payload.assignee || github.repository_owner }}']
            });

      - name: Send emergency alert
        run: |
          # Send to multiple channels
          echo "üö® Emergency rollback alert sent to all notification channels"

  # Post-Rollback Monitoring
  post-rollback-monitoring:
    name: Post-Rollback Monitoring
    runs-on: ubuntu-latest
    needs: [execute-rollback]
    if: needs.execute-rollback.result == 'success'
    steps:
      - name: Monitor rollback stability
        run: |
          MONITOR_URL="${{ github.event.inputs.environment == 'production' && 'https://mariaborysevych.com' || 'https://staging.mariaborysevych.com' }}"
          ERROR_COUNT=0
          TOTAL_CHECKS=60  # Monitor for 30 minutes (30 seconds interval)

          echo "üîç Starting post-rollback monitoring for 30 minutes..."
          echo "URL: $MONITOR_URL"

          for i in $(seq 1 $TOTAL_CHECKS); do
            TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
            if curl -f -s "$MONITOR_URL/health" > /dev/null; then
              echo "‚úÖ [$TIMESTAMP] Health check $i/$TOTAL_CHECKS passed"
            else
              echo "‚ùå [$TIMESTAMP] Health check $i/$TOTAL_CHECKS failed"
              ERROR_COUNT=$((ERROR_COUNT + 1))
            fi
            sleep 30
          done

          ERROR_RATE=$(( (ERROR_COUNT * 100) / TOTAL_CHECKS ))

          echo ""
          echo "üìä Post-Rollback Monitoring Summary:"
          echo "   Total Checks: $TOTAL_CHECKS"
          echo "   Failed Checks: $ERROR_COUNT"
          echo "   Error Rate: ${ERROR_RATE}%"

          if [[ $ERROR_RATE -gt 10 ]]; then
            echo "‚ö†Ô∏è High error rate detected (${ERROR_RATE}%)"
            echo "üí° Rollback may not have fully resolved the issues"
            echo "üö® Additional investigation required"
          else
            echo "‚úÖ Rollback appears stable"
          fi

      - name: Create monitoring report
        run: |
          cat > post-rollback-monitoring.md << EOF
          # üìä Post-Rollback Monitoring Report

          **Environment**: ${{ github.event.inputs.environment }}
          **Rollback Version**: ${{ github.event.inputs.version }}
          **Monitoring Period**: 30 minutes
          **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)

          ## Monitoring Results

          - **Total Health Checks**: 60
          - **Successful Checks**: $((60 - ERROR_COUNT))
          - **Failed Checks**: $ERROR_COUNT
          - **Error Rate**: ${ERROR_RATE}%
          - **Status**: $ERROR_RATE le 10 && '‚úÖ Stable' || '‚ö†Ô∏è Unstable'

          ## Recommendations

          $ERROR_RATE le 10 && echo '‚úÖ Rollback appears successful. Continue monitoring for 24 hours.' || echo '‚ö†Ô∏è High error rate detected. Investigate further and consider additional actions.'

          EOF

      - name: Upload monitoring report
        uses: actions/upload-artifact@v4
        with:
          name: post-rollback-monitoring
          path: post-rollback-monitoring.md
          retention-days: 30