name: Comprehensive E2E Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of E2E tests to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - critical
        - booking-flow
        - visual-regression
        - accessibility
        - performance
        - cross-browser
        - mobile-tablet
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
        - development
      browser:
        description: 'Browser to test'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - chromium
        - firefox
        - webkit
        - mobile-chrome
        - mobile-safari

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/playwright-browsers

jobs:
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install npm dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-browsers-

  critical-journeys:
    name: Critical Journey Tests
    runs-on: ubuntu-latest
    needs: install-dependencies
    strategy:
      matrix:
        shard: [1, 2, 3, 4]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install npm dependencies
        run: npm ci

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-browsers-

      - name: Install Playwright browsers
        if: steps.cache-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Start application
        run: |
          npm run build
          npm run preview &
          echo "APP_PID=$!" >> $GITHUB_ENV
          sleep 10

      - name: Wait for application
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:4173; do sleep 2; done'

      - name: Run critical journey tests (shard ${{ matrix.shard }})
        run: |
          BASE_URL=http://localhost:4173 \
          npx playwright test \
            --shard=${{ matrix.shard }}/4 \
            --grep="Critical User Journey|BE-|FT-|PKG-|UR-|UL-|PM-|AD-|SM-|BM-|UM-|AR-|SC-" \
            --reporter=json \
            --outputFile=test-results/e2e-shard-${{ matrix.shard }}.json

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results-shard-${{ matrix.shard }}
          path: |
            test-results/
            playwright-report/
            test-results/screenshots/

      - name: Stop application
        if: always()
        run: |
          if [ -n "$APP_PID" ]; then
            kill $APP_PID || true
          fi

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install npm dependencies
        run: npm ci

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-browsers-

      - name: Start application
        run: |
          npm run build
          npm run preview &
          echo "APP_PID=$!" >> $GITHUB_ENV
          sleep 10

      - name: Run visual regression tests
        run: |
          BASE_URL=http://localhost:4173 \
          npx playwright test \
            --grep="visual" \
            --reporter=json \
            --outputFile=test-results/visual-results.json

      - name: Upload visual results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-test-results
          path: |
            test-results/
            playwright-report/

      - name: Stop application
        if: always()
        run: |
          if [ -n "$APP_PID" ]; then
            kill $APP_PID || true
          fi

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install npm dependencies
        run: npm ci

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-browsers-

      - name: Start application
        run: |
          npm run build
          npm run preview &
          echo "APP_PID=$!" >> $GITHUB_ENV
          sleep 10

      - name: Run performance tests
        run: |
          BASE_URL=http://localhost:4173 \
          npx playwright test \
            --grep="performance|PR-" \
            --reporter=json \
            --outputFile=test-results/performance-results.json

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: |
            test-results/
            playwright-report/

      - name: Stop application
        if: always()
        run: |
          if [ -n "$APP_PID" ]; then
            kill $APP_PID || true
          fi

  cross-browser-tests:
    name: Cross-Browser Tests
    runs-on: ubuntu-latest
    needs: install-dependencies
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install npm dependencies
        run: npm ci

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-browsers-

      - name: Start application
        run: |
          npm run build
          npm run preview &
          echo "APP_PID=$!" >> $GITHUB_ENV
          sleep 10

      - name: Run tests on ${{ matrix.browser }}
        run: |
          BASE_URL=http://localhost:4173 \
          npx playwright test \
            --project=${{ matrix.browser }} \
            --grep="CP-|cross-platform|mobile" \
            --reporter=json \
            --outputFile=test-results/cross-browser-${{ matrix.browser }}.json

      - name: Upload cross-browser results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cross-browser-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/

      - name: Stop application
        if: always()
        run: |
          if [ -n "$APP_PID" ]; then
            kill $APP_PID || true
          fi

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install npm dependencies
        run: npm ci

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-browsers-

      - name: Start application
        run: |
          npm run build
          npm run preview &
          echo "APP_PID=$!" >> $GITHUB_ENV
          sleep 10

      - name: Run security tests
        run: |
          BASE_URL=http://localhost:4173 \
          npx playwright test \
            --grep="security|auth|permission|AS-" \
            --reporter=json \
            --outputFile=test-results/security-results.json

      - name: Upload security results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: |
            test-results/
            playwright-report/

      - name: Stop application
        if: always()
        run: |
          if [ -n "$APP_PID" ]; then
            kill $APP_PID || true
          fi

  test-results-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [critical-journeys, visual-regression, performance-tests, cross-browser-tests, security-tests]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate test summary
        run: |
          echo "# E2E Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Process critical journey results
          if [ -d "e2e-results-shard-1" ]; then
            echo "## 🎯 Critical Journey Tests" >> $GITHUB_STEP_SUMMARY
            for shard in {1..4}; do
              if [ -f "e2e-results-shard-$shard/e2e-shard-$shard.json" ]; then
                echo "### Shard $shard Results:" >> $GITHUB_STEP_SUMMARY
                node -e "
                  const results = JSON.parse(require('fs').readFileSync('e2e-results-shard-$shard/e2e-shard-$shard.json', 'utf8'));
                  const passed = results.suites.reduce((acc, suite) =>
                    acc + suite.specs.reduce((specAcc, spec) =>
                      specAcc + spec.tests.filter(test => test.results[0].status === 'passed').length, 0), 0);
                  const failed = results.suites.reduce((acc, suite) =>
                    acc + suite.specs.reduce((specAcc, spec) =>
                      specAcc + spec.tests.filter(test => test.results[0].status === 'failed').length, 0), 0);
                  console.log('- Passed: ' + passed + ' | Failed: ' + failed);
                " >> $GITHUB_STEP_SUMMARY
              fi
            done
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "## 📊 Test Coverage Areas" >> $GITHUB_STEP_SUMMARY
          echo "✅ Complete Booking Flow (Beauty & Fitness)" >> $GITHUB_STEP_SUMMARY
          echo "✅ Package Purchase Journey" >> $GITHUB_STEP_SUMMARY
          echo "✅ User Registration & Profile Management" >> $GITHUB_STEP_SUMMARY
          echo "✅ Admin Dashboard Functionality" >> $GITHUB_STEP_SUMMARY
          echo "✅ Polish Phone Number Validation" >> $GITHUB_STEP_SUMMARY
          echo "✅ Cross-Platform Compatibility" >> $GITHUB_STEP_SUMMARY
          echo "✅ Mobile Responsiveness" >> $GITHUB_STEP_SUMMARY
          echo "✅ Performance Validation" >> $GITHUB_STEP_SUMMARY
          echo "✅ Security & Authentication" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 🔧 Test Environment" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Playwright: Latest" >> $GITHUB_STEP_SUMMARY
          echo "- Browsers: Chromium, Firefox, WebKit" >> $GITHUB_STEP_SUMMARY
          echo "- Test Split: 4 Shards for parallel execution" >> $GITHUB_STEP_SUMMARY

  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [critical-journeys, test-results-summary]
    if: failure() && github.event_name == 'schedule'
    steps:
      - name: Notify on failure
        run: |
          echo "🚨 Critical E2E tests failed in scheduled run"
          echo "This indicates potential issues with the production environment"
          # Add Slack/Teams notification here if needed