name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scan daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
  workflow_call:

env:
  NODE_VERSION: '20.x'

jobs:
  # Dependency Security Audit
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate --json > npm-audit.json || true

      - name: Process npm audit results
        run: |
          node -e "
            const audit = JSON.parse(require('fs').readFileSync('npm-audit.json', 'utf8'));
            const vulnerabilities = audit.vulnerabilities || {};
            const high = Object.values(vulnerabilities).filter(v => v.severity === 'high').length;
            const critical = Object.values(vulnerabilities).filter(v => v.severity === 'critical').length;
            console.log(\`High vulnerabilities: \${high}\`);
            console.log(\`Critical vulnerabilities: \${critical}\`);
            if (critical > 0) {
              process.exit(1);
            }
          "

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload Snyk results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report
          path: snyk-results.json
          retention-days: 30

  # Code Security Analysis with CodeQL
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      matrix:
        language: ['javascript', 'typescript']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Upload secret scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-results
          path: |
            trufflehog-output.json
            gitleaks-report.json
          retention-days: 30

  # Static Application Security Testing (SAST)
  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint security rules
        run: |
          npx eslint . \
            --ext .js,.jsx,.ts,.tsx \
            --config .eslintrc.security.json \
            --format json \
            --output-file eslint-security-report.json || true

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/react-typescript
            p/javascript
          config-file: .semgrep.yml
          generate-sarif: true
          publish-sarif: true

      - name: Run njsscan
        run: |
          pip install njsscan
          njsscan . --json --output njsscan-report.json || true

      - name: Upload SAST results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sast-results
          path: |
            eslint-security-report.json
            semgrep.sarif.json
            njsscan-report.json
          retention-days: 30

  # Container Security (if using Docker)
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t mariia-hub:${{ github.sha }} .
          docker save mariia-hub:${{ github.sha }} -o image.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: mariia-hub:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v4
        with:
          image: mariia-hub:${{ github.sha }}
          format: sarif
          output-file: grype-results.sarif

      - name: Upload Grype results
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-results
          path: grype-results.sarif
          retention-days: 30

  # OWASP ZAP Baseline Scan
  zap-baseline:
    name: OWASP ZAP Baseline Scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}

      - name: Start application
        run: npm run preview &

      - name: Wait for application to be ready
        run: npx wait-on http://localhost:4173

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:4173'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          fail_action: false

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: report_html.html
          retention-days: 30

  # Security Scorecard
  security-scorecard:
    name: OSSF Security Scorecard
    runs-on: ubuntu-latest
    if: github.repository == 'mariia-hub/mariia-hub-unified'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run analysis
        uses: ossf/scorecard-action@v2.3.3
        with:
          results_file: results.sarif
          results_format: sarif

      - name: Upload Scorecard results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # Aggregate Security Report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-audit, codeql-analysis, secret-scan, sast-analysis]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Summary" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Dependency Audit
          if [ "${{ needs.dependency-audit.result }}" == "success" ]; then
            echo "✅ **Dependency Audit**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Dependency Audit**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          # CodeQL Analysis
          if [ "${{ needs.codeql-analysis.result }}" == "success" ]; then
            echo "✅ **CodeQL Analysis**: No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **CodeQL Analysis**: Issues found" >> $GITHUB_STEP_SUMMARY
          fi

          # Secret Scan
          if [ "${{ needs.secret-scan.result }}" == "success" ]; then
            echo "✅ **Secret Scan**: No secrets detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Secret Scan**: Potential secrets detected" >> $GITHUB_STEP_SUMMARY
          fi

          # SAST Analysis
          if [ "${{ needs.sast-analysis.result }}" == "success" ]; then
            echo "✅ **SAST Analysis**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **SAST Analysis**: Issues found" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Detailed reports are available in the artifacts section**" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = '## 🔒 Security Scan Results\n\n';

            // Check dependency audit
            try {
              if (fs.existsSync('npm-audit.json')) {
                const audit = JSON.parse(fs.readFileSync('npm-audit.json', 'utf8'));
                const vulns = audit.vulnerabilities || {};
                const critical = Object.values(vulns).filter(v => v.severity === 'critical').length;
                const high = Object.values(vulns).filter(v => v.severity === 'high').length;

                if (critical > 0) {
                  comment += `❌ **${critical} critical** and **${high} high** dependency vulnerabilities found\n\n`;
                } else if (high > 0) {
                  comment += `⚠️ **${high} high** dependency vulnerabilities found\n\n`;
                } else {
                  comment += '✅ **No critical or high dependency vulnerabilities**\n\n';
                }
              }
            } catch (e) {
              console.log('Could not process npm audit results:', e);
            }

            comment += '### 📋 Security Checks Status:\n';
            comment += '- **Dependency Audit**: ' + ( '${{ needs.dependency-audit.result }}' === 'success' ? '✅ Passed' : '❌ Failed' ) + '\n';
            comment += '- **CodeQL Analysis**: ' + ( '${{ needs.codeql-analysis.result }}' === 'success' ? '✅ Passed' : '❌ Issues found' ) + '\n';
            comment += '- **Secret Scan**: ' + ( '${{ needs.secret-scan.result }}' === 'success' ? '✅ Passed' : '⚠️ Potential issues' ) + '\n';
            comment += '- **SAST Analysis**: ' + ( '${{ needs.sast-analysis.result }}' === 'success' ? '✅ Passed' : '⚠️ Issues found' ) + '\n';

            comment += '\n🔗 [View detailed reports in the Actions tab](https://github.com/${{github.context.repo.owner}}/${{github.context.repo.repo}}/actions/runs/${{github.run_id}})';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });