# Production Docker Compose Configuration
# This file is optimized for production deployment with security and performance in mind

version: '3.8'

services:
  # Production application with nginx
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE}
        BUILD_VERSION: ${BUILD_VERSION}
        VITE_BUILD_TARGET: production
        VITE_APP_ENV: production
        VITE_BUILD_SHA: ${BUILD_SHA}
        VITE_BUILD_TIME: ${BUILD_TIME}
    image: mariia-hub:${BUILD_VERSION:-latest}
    container_name: mariia-hub-app-prod
    ports:
      - "${APP_PORT:-80}:8080"
    environment:
      - NODE_ENV=production
      - NGINX_HOST=0.0.0.0
      - NGINX_PORT=8080
      - VITE_SUPABASE_URL=${SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - VITE_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - VITE_GA4_MEASUREMENT_ID=${GA4_MEASUREMENT_ID}
      - VITE_SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - app_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    networks:
      - mariia-hub-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Production Redis with persistence and security
  redis:
    image: redis:7-alpine
    container_name: mariia-hub-redis-prod
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - mariia-hub-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Production PostgreSQL with backup
  postgres:
    image: postgres:15-alpine
    container_name: mariia-hub-postgres-prod
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - POSTGRES_REPLICATION_USER=${POSTGRES_REPLICATION_USER}
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./infrastructure/postgres/postgresql-prod.conf:/etc/postgresql/postgresql.conf:ro
      - ./infrastructure/postgres/pg_hba-prod.conf:/etc/postgresql/pg_hba.conf:ro
      - ./infrastructure/postgres/init-prod.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./infrastructure/postgres/backup.sh:/scripts/backup.sh:ro
    networks:
      - mariia-hub-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL read replica for performance
  postgres-replica:
    image: postgres:15-alpine
    container_name: mariia-hub-postgres-replica
    environment:
      - PGUSER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MASTER_SERVICE=postgres
      - POSTGRES_REPLICATION_USER=${POSTGRES_REPLICATION_USER}
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/replica-setup-prod.sh:/docker-entrypoint-initdb.d/replica-setup.sh:ro
    networks:
      - mariia-hub-network
    restart: unless-stopped
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Load balancer and reverse proxy
  nginx:
    image: nginx:alpine
    container_name: mariia-hub-nginx-prod
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./infrastructure/nginx/prod-nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/upstream.conf:/etc/nginx/conf.d/upstream.conf:ro
      - ./infrastructure/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    networks:
      - mariia-hub-network
    restart: unless-stopped
    depends_on:
      - app
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mariia-hub-prometheus-prod
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - mariia-hub-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mariia-hub-grafana-prod
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mariia-hub-network
    restart: unless-stopped
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: mariia-hub-loki-prod
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - ./infrastructure/monitoring/loki-prod-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - mariia-hub-network
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Backup service with scheduling
  backup:
    image: postgres:15-alpine
    container_name: mariia-hub-backup-prod
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./infrastructure/backup/backup-prod.sh:/backup.sh:ro
      - postgres_backups:/backups
      - backup_logs:/var/log/backup
    networks:
      - mariia-hub-network
    restart: unless-stopped
    depends_on:
      - postgres
    command: >
      sh -c "
        chmod +x /backup.sh &&
        echo '$BACKUP_SCHEDULE /backup.sh' > /etc/crontabs/root &&
        crond -f
      "
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Log rotate service
  logrotate:
    image: alpine:latest
    container_name: mariia-hub-logrotate-prod
    volumes:
      - ./infrastructure/logging/logrotate.conf:/etc/logrotate.conf:ro
      - nginx_logs:/var/log/nginx
      - app_logs:/var/log/app
      - backup_logs:/var/log/backup
    networks:
      - mariia-hub-network
    restart: unless-stopped
    command: >
      sh -c "
        apk add --no-cache logrotate &&
        echo '0 */6 * * * /usr/sbin/logrotate /etc/logrotate.conf' > /etc/crontabs/root &&
        crond -f
      "

# Production volumes with backup strategies
volumes:
  postgres_data:
    name: mariia-hub-prod-postgres-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/mariia-hub/postgres

  postgres_replica_data:
    name: mariia-hub-prod-postgres-replica-data
    driver: local

  postgres_backups:
    name: mariia-hub-prod-postgres-backups
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/mariia-hub/backups

  redis_data:
    name: mariia-hub-prod-redis-data
    driver: local

  prometheus_data:
    name: mariia-hub-prod-prometheus-data
    driver: local

  grafana_data:
    name: mariia-hub-prod-grafana-data
    driver: local

  loki_data:
    name: mariia-hub-prod-loki-data
    driver: local

  nginx_logs:
    name: mariia-hub-prod-nginx-logs
    driver: local

  app_logs:
    name: mariia-hub-prod-app-logs
    driver: local

  nginx_cache:
    name: mariia-hub-prod-nginx-cache
    driver: local

  backup_logs:
    name: mariia-hub-prod-backup-logs
    driver: local

# Production network with security
networks:
  mariia-hub-network:
    name: mariia-hub-prod-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: "1500"