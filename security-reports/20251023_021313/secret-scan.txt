src/App.tsx:        .select('key, value')
src/App.tsx:        .in('key', ['google_tag_manager_id','sentry_dsn'])
src/App.tsx:        .order('key')
src/App.tsx:        const gtm = data.find(x => x.key === 'google_tag_manager_id')?.value;
src/App.tsx:        const dsn = data.find(x => x.key === 'sentry_dsn')?.value;
src/types/messaging-referral.ts:  access_token?: string | null;
src/types/messaging-referral.ts:  refresh_token?: string | null;
src/types/messaging-referral.ts:  token_expires_at?: string | null;
src/types/messaging-referral.ts:  webhook_secret?: string | null;
src/types/corporate.ts:    [key: string]: number;
src/types/corporate.ts:  api_key: string;
src/types/corporate.ts:  api_secret?: string;
src/types/corporate.ts:  set_passwords: boolean;
src/contexts/LocalizationContext.tsx:  translate: (key: string, fallback?: string) => string;
src/contexts/LocalizationContext.tsx:  const translate = (key: string, fallback?: string): string => {
src/contexts/LocalizationContext.tsx:    if (state.translations[state.currentLanguage] && state.translations[state.currentLanguage][key]) {
src/contexts/LocalizationContext.tsx:      return state.translations[state.currentLanguage][key];
src/contexts/LocalizationContext.tsx:    if (state.translations['en'] && state.translations['en'][key]) {
src/contexts/LocalizationContext.tsx:      return state.translations['en'][key];
src/contexts/LocalizationContext.tsx:    // Return fallback or key itself
src/contexts/LocalizationContext.tsx:    return fallback || key;
src/contexts/ExpandedBookingContext.tsx:// Storage keys
src/contexts/ExpandedBookingContext.tsx:const STORAGE_KEY = 'booking_draft';
src/contexts/ExpandedBookingContext.tsx:    localStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));
src/contexts/ExpandedBookingContext.tsx:    const saved = localStorage.getItem(STORAGE_KEY);
src/contexts/ExpandedBookingContext.tsx:      localStorage.removeItem(STORAGE_KEY);
src/contexts/ExpandedBookingContext.tsx:    localStorage.removeItem(STORAGE_KEY);
src/contexts/ExpandedBookingContext.tsx:      Object.entries(saved).forEach(([key, value]) => {
src/contexts/ExpandedBookingContext.tsx:        if (key !== 'isLoading' && key !== 'errors') {
src/contexts/ExpandedBookingContext.tsx:          dispatch({ type: 'SET_' + key.toUpperCase(), payload: value } as any);
src/contexts/ExpandedBookingContext.tsx:      localStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));
src/contexts/ExpandedBookingContext.tsx:      Object.entries(saved).forEach(([key, value]) => {
src/contexts/ExpandedBookingContext.tsx:        if (key !== 'isLoading' && key !== 'errors') {
src/contexts/ExpandedBookingContext.tsx:          dispatch({ type: 'SET_' + key.toUpperCase(), payload: value } as any);
src/test/i18n.test.ts:      expect(result.stats.totalKeys).toBeGreaterThan(100); // Should have many keys
src/test/i18n.test.ts:    it('should have consistent key structure across languages', () => {
src/test/i18n.test.ts:      // Should not have missing keys in critical sections
src/test/i18n.test.ts:        error.key.includes('nav.') ||
src/test/i18n.test.ts:        error.key.includes('hero.') ||
src/test/i18n.test.ts:        error.key.includes('common.')
src/test/i18n.test.ts:      expect(result.stats.totalKeys).toBeGreaterThan(0);
src/utils/sanitization.ts:  rules?: Partial<Record<keyof T, (value: any) => any>>
src/utils/sanitization.ts:  for (const [key, value] of Object.entries(obj)) {
src/utils/sanitization.ts:      sanitized[key] = value;
src/utils/sanitization.ts:    if (rules && rules[key as keyof T]) {
src/utils/sanitization.ts:      sanitized[key] = rules[key as keyof T](value);
src/utils/sanitization.ts:    switch (key) {
src/utils/sanitization.ts:        sanitized[key] = sanitizeEmail(value);
src/utils/sanitization.ts:        sanitized[key] = sanitizePhone(value);
src/utils/sanitization.ts:        sanitized[key] = sanitizeName(value);
src/utils/sanitization.ts:        sanitized[key] = sanitizeText(value, 500);
src/utils/sanitization.ts:        sanitized[key] = sanitizeText(value, 100);
src/utils/sanitization.ts:        sanitized[key] = sanitizeText(value, 100);
src/utils/sanitization.ts:        sanitized[key] = sanitizeHTML(value);
src/utils/sanitization.ts:        sanitized[key] = sanitizeURL(value);
src/utils/sanitization.ts:          sanitized[key] = sanitizeString(value);
src/utils/sanitization.ts:          sanitized[key] = sanitizeObject(value);
src/utils/sanitization.ts:          sanitized[key] = value;
src/utils/sanitization.ts:  for (const [key, value] of Object.entries(props)) {
src/utils/sanitization.ts:    if (key === 'dangerouslySetInnerHTML') {
src/utils/sanitization.ts:      safe[key] = sanitizeString(value);
src/utils/sanitization.ts:      safe[key] = value;
src/utils/debounce.ts:    const key = resolver ? resolver(...args) : JSON.stringify(args);
src/utils/debounce.ts:    if (cache.has(key)) {
src/utils/debounce.ts:      return cache.get(key)!;
src/utils/debounce.ts:    cache.set(key, result);
src/utils/debounce.ts:    const key = resolver ? resolver(...args) : JSON.stringify(args);
src/utils/debounce.ts:    if (cache.has(key)) {
src/utils/debounce.ts:      return cache.get(key)!;
src/utils/debounce.ts:    if (pending.has(key)) {
src/utils/debounce.ts:      return pending.get(key)!;
src/utils/debounce.ts:      cache.set(key, result);
src/utils/debounce.ts:      pending.delete(key);
src/utils/debounce.ts:      pending.delete(key);
src/utils/debounce.ts:    pending.set(key, promise);
src/utils/mediaUtils.ts:export function getMediaPathsForCategory(category: keyof typeof MEDIA_PATHS): string[] {
src/utils/performance.ts:  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
src/utils/performance.ts:        `${name}.${propertyKey}`,
src/utils/colorContrastVerifier.ts:// Standard color combinations from design tokens
src/utils/colorContrastVerifier.ts:      const key = `${combo.foreground}-${combo.background}`;
src/utils/colorContrastVerifier.ts:      if (seen.has(key)) {
src/utils/colorContrastVerifier.ts:      seen.add(key);
src/utils/colorContrastVerifier.ts:      const key = `${issue.foreground}-${issue.background}-${issue.issue}`;
src/utils/colorContrastVerifier.ts:      if (seen.has(key)) {
src/utils/colorContrastVerifier.ts:      seen.add(key);
src/utils/accessibility.ts:    const handleTabKey = (e: KeyboardEvent) => {
src/utils/accessibility.ts:      if (e.key !== 'Tab') return;
src/utils/accessibility.ts:      if (e.shiftKey) {
src/utils/accessibility.ts:    container.addEventListener('keydown', handleTabKey);
src/utils/accessibility.ts:      container.removeEventListener('keydown', handleTabKey);
src/utils/accessibility.ts:// Keyboard navigation utilities
src/utils/accessibility.ts:export class KeyboardNavigation {
src/utils/accessibility.ts:  // Add keyboard navigation to a list/grid
src/utils/accessibility.ts:    const handleKeyDown = (e: KeyboardEvent) => {
src/utils/accessibility.ts:      switch (e.key) {
src/utils/accessibility.ts:    container.addEventListener('keydown', handleKeyDown);
src/utils/accessibility.ts:      container.removeEventListener('keydown', handleKeyDown);
src/utils/accessibility.ts:export const { createNavigation } = KeyboardNavigation;
src/utils/lazyLoading.ts:  static async preload(importFn: () => Promise<any>, key: string): Promise<void> {
src/utils/lazyLoading.ts:    if (this.preloadedModules.has(key)) {
src/utils/lazyLoading.ts:      this.preloadedModules.add(key);
src/utils/lazyLoading.ts:      logger.warn(`Failed to preload ${key}:`, error);
src/utils/lazyLoading.ts:  static preloadOnHover(importFn: () => Promise<any>, key: string) {
src/utils/lazyLoading.ts:        this.preload(importFn, key);
src/utils/lazyLoading.ts:  static preloadOnFocus(importFn: () => Promise<any>, key: string) {
src/utils/lazyLoading.ts:        this.preload(importFn, key);
src/utils/lazyLoading.ts:  [key: string]: any;
src/utils/accessibility.test.ts:  KeyboardNavigation,
src/utils/accessibility.test.ts:  describe('KeyboardNavigation', () => {
src/utils/accessibility.test.ts:      const cleanup = KeyboardNavigation.createNavigation(container, {
src/utils/accessibility.test.ts:    it('should handle keyboard events', () => {
src/utils/accessibility.test.ts:      KeyboardNavigation.createNavigation(container, {
src/utils/accessibility.test.ts:      // Simulate Enter key on first item
src/utils/accessibility.test.ts:      const enterEvent = new KeyboardEvent('keydown', { key: 'Enter' });
src/schemas/index.ts:  password: z.string()
src/schemas/index.ts:    .min(8, 'Password must be at least 8 characters')
src/schemas/index.ts:    .max(128, 'Password is too long')
src/integrations/social-media/review-aggregator.ts:    access_token?: string;
src/integrations/social-media/review-aggregator.ts:    access_token?: string;
src/integrations/social-media/review-aggregator.ts:    bearer_token?: string;
src/integrations/social-media/review-aggregator.ts:      if (this.config.instagram.access_token) {
src/integrations/social-media/review-aggregator.ts:      if (this.config.facebook.access_token) {
src/integrations/social-media/review-aggregator.ts:      if (this.config.twitter.bearer_token) {
src/integrations/social-media/review-aggregator.ts:      const hashtagUrl = `https://graph.instagram.com/ig_hashtag_search?user_id=${this.config.instagram.business_account_id}&q=${this.config.instagram.hashtag}&access_token=${this.config.instagram.access_token}`;
src/integrations/social-media/review-aggregator.ts:        const mediaUrl = `https://graph.instagram.com/${hashtagId}/recent_media?user_id=${this.config.instagram.business_account_id}&fields=id,caption,media_type,media_url,permalink,timestamp,username,like_count,comments_count&access_token=${this.config.instagram.access_token}`;
src/integrations/social-media/review-aggregator.ts:            if (media.caption && this.containsReviewKeywords(media.caption)) {
src/integrations/social-media/review-aggregator.ts:      const postsUrl = `https://graph.facebook.com/v18.0/${this.config.facebook.page_id}/posts?fields=id,message,created_time,permalink_url,from,likes.summary(true),comments.summary(true),shares&access_token=${this.config.facebook.access_token}`;
src/integrations/social-media/review-aggregator.ts:          if (post.message && this.containsReviewKeywords(post.message)) {
src/integrations/social-media/review-aggregator.ts:      const ratingsUrl = `https://graph.facebook.com/v18.0/${this.config.facebook.page_id}/ratings?fields=id,review_text,rating,created_time,reviewer&access_token=${this.config.facebook.access_token}`;
src/integrations/social-media/review-aggregator.ts:      const searchUrl = `https://api.twitter.com/2/tweets/search/recent?query=${encodeURIComponent(searchQuery)}&tweet.fields=created_at,author_id,public_metrics,context_annotations,entities&expansions=author_id,attachments.media_keys&user.fields=username,name,verified,public_metrics&media.fields=url`;
src/integrations/social-media/review-aggregator.ts:          'Authorization': `Bearer ${this.config.twitter.bearer_token}`
src/integrations/social-media/review-aggregator.ts:          if (this.containsReviewKeywords(tweet.text)) {
src/integrations/social-media/review-aggregator.ts:                .filter((m: any) => tweet.attachments?.media_keys?.includes(m.media_key))
src/integrations/social-media/review-aggregator.ts:  private containsReviewKeywords(text: string): boolean {
src/integrations/social-media/review-aggregator.ts:    const reviewKeywords = [
src/integrations/social-media/review-aggregator.ts:    return reviewKeywords.some(keyword => lowerText.includes(keyword));
src/integrations/social-media/review-aggregator.ts:    const serviceKeywords = [
src/integrations/social-media/review-aggregator.ts:    return serviceKeywords.some(keyword => lowerText.includes(keyword));
src/integrations/social-media/review-aggregator.ts:  // Get API keys from secure storage/environment
src/integrations/social-media/review-aggregator.ts:  const instagramToken = process.env.INSTAGRAM_ACCESS_TOKEN;
src/integrations/social-media/review-aggregator.ts:  const facebookToken = process.env.FACEBOOK_ACCESS_TOKEN;
src/integrations/social-media/review-aggregator.ts:  const twitterToken = process.env.TWITTER_BEARER_TOKEN;
src/integrations/social-media/review-aggregator.ts:  if (instagramToken) config.instagram.access_token = instagramToken;
src/integrations/social-media/review-aggregator.ts:  if (facebookToken) config.facebook.access_token = facebookToken;
src/integrations/social-media/review-aggregator.ts:  if (twitterToken) config.twitter.bearer_token = twitterToken;
src/integrations/supabase/types.ts:  | { [key: string]: Json | undefined }
src/integrations/supabase/types.ts:  // instead of createClient<Database, { PostgrestVersion: 'XX' }>(URL, KEY)
src/integrations/supabase/types.ts:            foreignKeyName: "blog_comments_parent_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "blog_comments_post_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "blog_posts_category_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "booking_event_log_booking_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "booking_packages_service_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "bookings_location_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "bookings_resource_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "bookings_service_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "buffers_service_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "calendar_blocks_resource_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "external_sync_booking_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "holds_resource_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "holds_service_id_fkey"
src/integrations/supabase/types.ts:          key: string
src/integrations/supabase/types.ts:          key: string
src/integrations/supabase/types.ts:          key?: string
src/integrations/supabase/types.ts:            foreignKeyName: "reviews_service_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "service_content_service_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "service_faqs_service_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "service_gallery_service_id_fkey"
src/integrations/supabase/types.ts:          key: string
src/integrations/supabase/types.ts:          key: string
src/integrations/supabase/types.ts:          key?: string
src/integrations/supabase/types.ts:            foreignKeyName: "user_favorites_service_id_fkey"
src/integrations/supabase/types.ts:          keywords: string[] | null
src/integrations/supabase/types.ts:          keywords?: string[] | null
src/integrations/supabase/types.ts:          keywords?: string[] | null
src/integrations/supabase/types.ts:            foreignKeyName: "referral_codes_program_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "referral_codes_referrer_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "referrals_referral_code_id_fkey"
src/integrations/supabase/types.ts:            foreignKeyName: "referrals_referrer_id_fkey"
src/integrations/supabase/types.ts:          access_token: string | null
src/integrations/supabase/types.ts:          refresh_token: string | null
src/integrations/supabase/types.ts:          token_expires_at: string | null
src/integrations/supabase/types.ts:          webhook_secret: string | null
src/integrations/supabase/types.ts:          access_token?: string | null
src/integrations/supabase/types.ts:          refresh_token?: string | null
src/integrations/supabase/types.ts:          token_expires_at?: string | null
src/integrations/supabase/types.ts:          webhook_secret?: string | null
src/integrations/supabase/types.ts:          access_token?: string | null
src/integrations/supabase/types.ts:          refresh_token?: string | null
src/integrations/supabase/types.ts:          token_expires_at?: string | null
src/integrations/supabase/types.ts:          webhook_secret?: string | null
src/integrations/supabase/types.ts:        Args: Record<PropertyKey, never>
src/integrations/supabase/types.ts:type DefaultSchema = DatabaseWithoutInternals[Extract<keyof Database, "public">]
src/integrations/supabase/types.ts:    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
src/integrations/supabase/types.ts:    | { schema: keyof DatabaseWithoutInternals },
src/integrations/supabase/types.ts:    schema: keyof DatabaseWithoutInternals
src/integrations/supabase/types.ts:    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
src/integrations/supabase/types.ts:  schema: keyof DatabaseWithoutInternals
src/integrations/supabase/types.ts:  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
src/integrations/supabase/types.ts:    | keyof DefaultSchema["Tables"]
src/integrations/supabase/types.ts:    | { schema: keyof DatabaseWithoutInternals },
src/integrations/supabase/types.ts:    schema: keyof DatabaseWithoutInternals
src/integrations/supabase/types.ts:    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
src/integrations/supabase/types.ts:  schema: keyof DatabaseWithoutInternals
src/integrations/supabase/types.ts:  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
src/integrations/supabase/types.ts:    | keyof DefaultSchema["Tables"]
src/integrations/supabase/types.ts:    | { schema: keyof DatabaseWithoutInternals },
src/integrations/supabase/types.ts:    schema: keyof DatabaseWithoutInternals
src/integrations/supabase/types.ts:    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
src/integrations/supabase/types.ts:  schema: keyof DatabaseWithoutInternals
src/integrations/supabase/types.ts:  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
src/integrations/supabase/types.ts:    | keyof DefaultSchema["Enums"]
src/integrations/supabase/types.ts:    | { schema: keyof DatabaseWithoutInternals },
src/integrations/supabase/types.ts:    schema: keyof DatabaseWithoutInternals
src/integrations/supabase/types.ts:    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
src/integrations/supabase/types.ts:  schema: keyof DatabaseWithoutInternals
src/integrations/supabase/types.ts:  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
src/integrations/supabase/types.ts:    | keyof DefaultSchema["CompositeTypes"]
src/integrations/supabase/types.ts:    | { schema: keyof DatabaseWithoutInternals },
src/integrations/supabase/types.ts:    schema: keyof DatabaseWithoutInternals
src/integrations/supabase/types.ts:    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
src/integrations/supabase/types.ts:  schema: keyof DatabaseWithoutInternals
src/integrations/supabase/types.ts:  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
src/integrations/supabase/client.ts:const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imxja3h2aW1kcW5manprYnJ1c2d1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA1MTA0NTUsImV4cCI6MjA3NjA4NjQ1NX0.7Pk89NeTTVLtpn6ClpndiliFoYg_vj0fhmJVKU8BF0A";
src/integrations/supabase/client.ts:export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
src/integrations/supabase/client.ts:    autoRefreshToken: true,
src/integrations/ai/multilang.ts:    const cacheKey = this.getCacheKey(text, targetLanguage, sourceLanguage);
src/integrations/ai/multilang.ts:    const cached = this.getFromCache(cacheKey);
src/integrations/ai/multilang.ts:      this.addToCache(cacheKey, {
src/integrations/ai/multilang.ts:      for (const [key, value] of Object.entries(localizationData.cultural)) {
src/integrations/ai/multilang.ts:        const regex = new RegExp(key, 'gi');
src/integrations/ai/multilang.ts:          adaptations.push(`Cultural adaptation: ${key} → ${value}`);
src/integrations/ai/multilang.ts:  private getCacheKey(text: string, targetLang: SupportedLanguage, sourceLang?: SupportedLanguage): string {
src/integrations/ai/multilang.ts:  private getFromCache(key: string): TranslationCache | null {
src/integrations/ai/multilang.ts:    const cached = this.cache.get(key);
src/integrations/ai/multilang.ts:      this.cache.delete(key);
src/integrations/ai/multilang.ts:  private addToCache(key: string, cache: TranslationCache): void {
src/integrations/ai/multilang.ts:    this.cache.set(key, cache);
src/integrations/ai/multilang.ts:      const oldestKey = this.cache.keys().next().value;
src/integrations/ai/multilang.ts:      this.cache.delete(oldestKey);
src/integrations/ai/multilang.ts:    return Object.keys(LanguageMetadata) as SupportedLanguage[];
src/integrations/ai/multilang.ts:      queryClient.invalidateQueries({ queryKey: ['translations'] });
src/integrations/ai/template-system.ts:            aiInstructions: 'Include primary keyword naturally, keep under 60 characters, create curiosity',
src/integrations/ai/template-system.ts:            variables: ['keyPoints', 'details', 'examples'],
src/integrations/ai/template-system.ts:            aiInstructions: 'Summarize key points, include call to action, encourage engagement',
src/integrations/ai/template-system.ts:            name: 'Key Benefits',
src/integrations/ai/template-system.ts:            prompt: 'List 4-6 key benefits',
src/integrations/ai/template-system.ts:    if (Object.keys(context.variables).length > 0) {
src/integrations/ai/template-system.ts:      Object.entries(context.variables).forEach(([key, value]) => {
src/integrations/ai/template-system.ts:        prompt += `- ${key}: ${value}\n`;
src/integrations/ai/template-system.ts:    queryKey: ['ai-templates'],
src/integrations/ai/template-system.ts:      queryClient.invalidateQueries({ queryKey: ['ai-templates'] });
src/integrations/ai/template-system.ts:      queryClient.invalidateQueries({ queryKey: ['ai-templates'] });
src/integrations/ai/template-system.ts:      queryClient.invalidateQueries({ queryKey: ['ai-templates'] });
src/integrations/ai/chatbot.ts:    const handoffKeywords = ['complaint', 'refund', 'lawyer', 'sue', 'angry', 'frustrated'];
src/integrations/ai/chatbot.ts:    const hasNegativeKeywords = handoffKeywords.some(keyword =>
src/integrations/ai/chatbot.ts:      message.toLowerCase().includes(keyword)
src/integrations/ai/chatbot.ts:      hasNegativeKeywords ||
src/integrations/ai/advanced-recommendations.ts:      .in('user_id', Array.from(similarUsersMap.keys()))
src/integrations/ai/advanced-recommendations.ts:    queryKey: ['advanced-recommendations', userId],
src/integrations/ai/analytics.ts:  input_tokens?: number;
src/integrations/ai/analytics.ts:  output_tokens?: number;
src/integrations/ai/analytics.ts:  total_tokens_used: number;
src/integrations/ai/analytics.ts:    tokens: number;
src/integrations/ai/analytics.ts:          tokens: 0,
src/integrations/ai/analytics.ts:      acc[date].tokens += (event.input_tokens || 0) + (event.output_tokens || 0);
src/integrations/ai/analytics.ts:      const key = `${event.event_type}_${event.feature}`;
src/integrations/ai/analytics.ts:      if (!acc[key]) {
src/integrations/ai/analytics.ts:        acc[key] = {
src/integrations/ai/analytics.ts:      acc[key].usage_count++;
src/integrations/ai/analytics.ts:      acc[key].total_processing_time += event.processing_time_ms;
src/integrations/ai/analytics.ts:        acc[key].successful_events++;
src/integrations/ai/analytics.ts:        acc[key].satisfaction_scores.push(event.metadata.user_satisfaction);
src/integrations/ai/analytics.ts:    Object.entries(grouped).forEach(([key, data]: [string, any]) => {
src/integrations/ai/analytics.ts:      breakdown[key] = {
src/integrations/ai/analytics.ts:      const featureKey = `${event.event_type}_${event.feature}`;
src/integrations/ai/analytics.ts:      acc[event.user_id].features[featureKey] = (acc[event.user_id].features[featureKey] || 0) + 1;
src/integrations/ai/analytics.ts:      const key = `${event.event_type}_${event.feature}`;
src/integrations/ai/analytics.ts:      acc[key] = (acc[key] || 0) + this.calculateEventCost(event);
src/integrations/ai/analytics.ts:    const inputCostPerToken = 0.00001; // $0.01 per 1K tokens
src/integrations/ai/analytics.ts:    const outputCostPerToken = 0.00003; // $0.03 per 1K tokens
src/integrations/ai/analytics.ts:    const inputCost = (event.input_tokens || 0) * inputCostPerToken;
src/integrations/ai/analytics.ts:    const outputCost = (event.output_tokens || 0) * outputCostPerToken;
src/integrations/ai/analytics.ts:          .reduce((sum, f) => sum + f.success_rate, 0) / Object.keys(analytics.feature_breakdown).length * 100
src/integrations/ai/analytics.ts:      'Monitor cost trends and optimize token usage',
src/integrations/ai/recommendations.ts:    4. Key factors influencing the prediction
src/integrations/ai/recommendations.ts:    const key = `${category}-${month}`;
src/integrations/ai/recommendations.ts:    return this.seasonalTrends.get(key) || 1.0;
src/integrations/ai/seo-analyzer.ts:  keywords?: string[];
src/integrations/ai/seo-analyzer.ts:  keywordAnalysis: {
src/integrations/ai/seo-analyzer.ts:    competitorKeywords: string[];
src/integrations/ai/seo-analyzer.ts:Target Keywords: ${request.keywords?.join(', ') || 'Not provided'}
src/integrations/ai/seo-analyzer.ts:5. Keyword analysis:
src/integrations/ai/seo-analyzer.ts:   - Primary keyword suggestion
src/integrations/ai/seo-analyzer.ts:   - Secondary keywords
src/integrations/ai/seo-analyzer.ts:   - Competitor keywords to target
src/integrations/ai/seo-analyzer.ts:    keywords: string[],
src/integrations/ai/seo-analyzer.ts:      keyPoints: string[];
src/integrations/ai/seo-analyzer.ts:Target Keywords: ${keywords.join(', ')}
src/integrations/ai/seo-analyzer.ts:- Include primary keyword in title, first paragraph, and headings
src/integrations/ai/seo-analyzer.ts:- Use secondary keywords naturally throughout
src/integrations/ai/seo-analyzer.ts:    targetKeyword: string,
src/integrations/ai/seo-analyzer.ts:    keywordOpportunities: Array<{
src/integrations/ai/seo-analyzer.ts:      keyword: string;
src/integrations/ai/seo-analyzer.ts:    const prompt = `Analyze top ${topN} competitors for keyword: "${targetKeyword}"
src/integrations/ai/seo-analyzer.ts:2. Keyword opportunities with difficulty/volume
src/integrations/ai/seo-analyzer.ts:  async trackKeywordRankings(
src/integrations/ai/seo-analyzer.ts:    keywords: string[],
src/integrations/ai/seo-analyzer.ts:      keyword: string;
src/integrations/ai/seo-analyzer.ts:    const rankings = keywords.map(keyword => ({
src/integrations/ai/seo-analyzer.ts:      keyword,
src/integrations/ai/seo-analyzer.ts:      url: `https://example.com/${keyword.replace(/\s+/g, '-')}`,
src/integrations/ai/seo-analyzer.ts:      title: `${keyword} - Mariia Hub`,
src/integrations/ai/seo-analyzer.ts:    keywords: string[],
src/integrations/ai/seo-analyzer.ts:      keywords: string[];
src/integrations/ai/seo-analyzer.ts:Keywords to target: ${keywords.join(', ')}
src/integrations/ai/seo-analyzer.ts:- Target keywords
src/integrations/ai/seo-analyzer.ts:        optimized: false, // Would analyze length, keywords, etc.
src/integrations/ai/seo-analyzer.ts:      queryClient.invalidateQueries({ queryKey: ['seo-analysis'] });
src/integrations/ai/seo-analyzer.ts:      keywords: string[];
src/integrations/ai/seo-analyzer.ts:      params.keywords,
src/integrations/ai/seo-analyzer.ts:      targetKeyword: string;
src/integrations/ai/seo-analyzer.ts:    }) => aiSEOAnalyzer.analyzeCompetitors(params.targetKeyword, params.location, params.topN),
src/integrations/ai/seo-analyzer.ts:    trackRankings: (keywords: string[], location?: string) =>
src/integrations/ai/seo-analyzer.ts:      aiSEOAnalyzer.trackKeywordRankings(keywords, location),
src/integrations/ai/seo-analyzer.ts:    generateCalendar: (keywords: string[], timeframe?: string, types?: string[]) =>
src/integrations/ai/seo-analyzer.ts:      aiSEOAnalyzer.generateContentCalendar(keywords, timeframe as any, types),
src/integrations/ai/database.ts:    key_benefits: string[];
src/integrations/ai/database.ts:${type === 'benefits' || type === 'all' ? '- Key benefits (4-6 points)' : ''}
src/integrations/ai/database.ts:      queryClient.invalidateQueries({ queryKey: ['ai-services'] });
src/integrations/ai/database.ts:      queryClient.invalidateQueries({ queryKey: ['ai-blog-posts'] });
src/integrations/ai/database.ts:      queryClient.invalidateQueries({ queryKey: ['services'] });
src/integrations/ai/config.ts:import { getAIService, isValidAPIKey, type AIConfig } from './service';
src/integrations/ai/config.ts:const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY || import.meta.env.OPENAI_API_KEY;
src/integrations/ai/config.ts:  apiKey: OPENAI_API_KEY || '',
src/integrations/ai/config.ts:  maxTokens: 2000,
src/integrations/ai/config.ts:  if (!OPENAI_API_KEY) {
src/integrations/ai/config.ts:    console.warn('OpenAI API key not found in environment variables');
src/integrations/ai/config.ts:  if (!isValidAPIKey(OPENAI_API_KEY)) {
src/integrations/ai/config.ts:    console.error('Invalid OpenAI API key format');
src/integrations/ai/config.ts:export const aiService = OPENAI_API_KEY ? getAIService(DEFAULT_AI_CONFIG) : null;
src/integrations/ai/config.ts:export function isAIFeatureEnabled(feature: keyof typeof AI_FEATURES): boolean {
src/integrations/ai/service.ts:  apiKey: z.string().min(1, 'OpenAI API key is required'),
src/integrations/ai/service.ts:  maxTokens: z.number().default(2000),
src/integrations/ai/service.ts:  seoKeywords: z.array(z.string()).optional(),
src/integrations/ai/service.ts:  keyBenefits: z.array(z.string()),
src/integrations/ai/service.ts:      apiKey: validatedConfig.apiKey,
src/integrations/ai/service.ts:    maxTokens?: number
src/integrations/ai/service.ts:        max_tokens: maxTokens ?? this.config.maxTokens,
src/integrations/ai/service.ts:    const keywordsText = validatedRequest.seoKeywords
src/integrations/ai/service.ts:      ? `Include these SEO keywords naturally: ${validatedRequest.seoKeywords.join(', ')}`
src/integrations/ai/service.ts:    ${keywordsText}
src/integrations/ai/service.ts:      this.config.maxTokens
src/integrations/ai/service.ts:      ? `Key features: ${validatedRequest.features.join(', ')}`
src/integrations/ai/service.ts:    - keyBenefits: 4-6 bullet points
src/integrations/ai/service.ts:      this.config.maxTokens
src/integrations/ai/service.ts:export function isValidAPIKey(key: string): boolean {
src/integrations/ai/service.ts:  return key.startsWith('sk-') && key.length > 40;
src/integrations/ai/realtime-suggestions.ts:    field: keyof SuggestionContext;
src/integrations/ai/realtime-suggestions.ts:    return path.split('.').reduce((current, key) => current?.[key], obj);
src/integrations/ai/realtime-suggestions.ts:    queryKey: ['realtime-suggestions', context.userId, context.currentPath],
src/integrations/ai/realtime-suggestions.ts:    queryClient.invalidateQueries({ queryKey: ['realtime-suggestions'] });
src/integrations/ai/content-optimizer.ts:  keywords?: string[];
src/integrations/ai/content-optimizer.ts:  keywordDensity: Record<string, number>;
src/integrations/ai/content-optimizer.ts:${request.keywords ? `Keywords to include: ${request.keywords.join(', ')}` : ''}
src/integrations/ai/content-optimizer.ts:5. Proper keyword density (2-3%)
src/integrations/ai/content-optimizer.ts:      const keywordDensity = this.calculateKeywordDensity(result.optimizedContent, request.keywords || []);
src/integrations/ai/content-optimizer.ts:        keywordDensity,
src/integrations/ai/content-optimizer.ts:2. Key differences from original
src/integrations/ai/content-optimizer.ts:  private calculateKeywordDensity(content: string, keywords: string[]): Record<string, number> {
src/integrations/ai/content-optimizer.ts:    keywords.forEach(keyword => {
src/integrations/ai/content-optimizer.ts:      const keywordLower = keyword.toLowerCase();
src/integrations/ai/content-optimizer.ts:      const count = words.filter(word => word.includes(keywordLower)).length;
src/integrations/ai/content-optimizer.ts:      density[keyword] = (count / totalWords) * 100;
src/integrations/ai/content-optimizer.ts:      queryClient.invalidateQueries({ queryKey: ['content-optimization'] });
src/integrations/ai/quality-scoring.ts:    keywordDensity: Record<string, number>;
src/integrations/ai/quality-scoring.ts:   - SEO: keywords, optimization, structure
src/integrations/ai/quality-scoring.ts:   - Keyword density analysis
src/integrations/ai/quality-scoring.ts:    keyChanges: Array<{
src/integrations/ai/quality-scoring.ts:    const keyChanges: Array<{
src/integrations/ai/quality-scoring.ts:    Object.keys(originalResult.categoryScores).forEach(category => {
src/integrations/ai/quality-scoring.ts:      const originalScore = originalResult.categoryScores[category as keyof typeof originalResult.categoryScores];
src/integrations/ai/quality-scoring.ts:      const improvedScore = improvedResult.categoryScores[category as keyof typeof improvedResult.categoryScores];
src/integrations/ai/quality-scoring.ts:        keyChanges.push({
src/integrations/ai/quality-scoring.ts:      keyChanges,
src/integrations/ai/quality-scoring.ts:    const stable = Object.keys(categoryAverages).filter(c => !improving.includes(c) && !declining.includes(c));
src/integrations/ai/quality-scoring.ts:      totalScore += (categoryScores[category as keyof typeof categoryScores] || 0) * weight;
src/integrations/ai/quality-scoring.ts:      const values = scores.map(s => s.categoryScores[category as keyof typeof s.categoryScores] || 0);
src/integrations/ai/quality-scoring.ts:      queryClient.invalidateQueries({ queryKey: ['quality-scores'] });
src/components/corporate/DepartmentAnalytics.tsx:    key: 'employee_count',
src/components/corporate/DepartmentAnalytics.tsx:    key: 'budget_utilization',
src/components/corporate/DepartmentAnalytics.tsx:    key: 'participation_rate',
src/components/corporate/DepartmentAnalytics.tsx:    key: 'satisfaction_score',
src/components/corporate/DepartmentAnalytics.tsx:    key: 'wellness_score',
src/components/corporate/DepartmentAnalytics.tsx:    key: 'engagement_rate',
src/components/corporate/DepartmentAnalytics.tsx:              <SelectItem key={dept.id} value={dept.id}>
src/components/corporate/DepartmentAnalytics.tsx:              <SelectItem key={kpi.key} value={kpi.key}>
src/components/corporate/DepartmentAnalytics.tsx:            <CardDescription>12-month overview of key metrics</CardDescription>
src/components/corporate/DepartmentAnalytics.tsx:                <XAxis dataKey="month" />
src/components/corporate/DepartmentAnalytics.tsx:                <Line type="monotone" dataKey="participation" stroke="#3b82f6" strokeWidth={2} name="Participation %" />
src/components/corporate/DepartmentAnalytics.tsx:                <Line type="monotone" dataKey="engagement" stroke="#10b981" strokeWidth={2} name="Engagement %" />
src/components/corporate/DepartmentAnalytics.tsx:                <Line type="monotone" dataKey="wellness" stroke="#f59e0b" strokeWidth={2} name="Wellness Score" />
src/components/corporate/DepartmentAnalytics.tsx:                <PolarAngleAxis dataKey="department" />
src/components/corporate/DepartmentAnalytics.tsx:                    key={index}
src/components/corporate/DepartmentAnalytics.tsx:                    dataKey="participation"
src/components/corporate/DepartmentAnalytics.tsx:              <div key={dept.name} className="flex items-center justify-between p-3 rounded-lg bg-muted/50">
src/components/corporate/DepartmentAnalytics.tsx:              <div key={dept.name} className="flex items-center justify-between p-3 rounded-lg bg-orange-50 border border-orange-200">
src/components/corporate/DepartmentAnalytics.tsx:                  <tr key={data.department.id} className="border-b">
src/components/corporate/DepartmentAnalytics.tsx:                  dataKey="value"
src/components/corporate/DepartmentAnalytics.tsx:                    <Cell key={`cell-${index}`} fill={entry.color} />
src/components/corporate/DepartmentAnalytics.tsx:                <div key={category.name} className="flex items-center justify-between p-3 rounded-lg border">
src/components/corporate/PartnerIntegration.tsx:  Key,
src/components/corporate/PartnerIntegration.tsx:      api_key: '',
src/components/corporate/PartnerIntegration.tsx:      api_secret: '',
src/components/corporate/PartnerIntegration.tsx:    const statusInfo = INTEGRATION_STATUS[status as keyof typeof INTEGRATION_STATUS];
src/components/corporate/PartnerIntegration.tsx:        ...prev[category as keyof typeof prev],
src/components/corporate/PartnerIntegration.tsx:        api_key: '',
src/components/corporate/PartnerIntegration.tsx:        api_secret: '',
src/components/corporate/PartnerIntegration.tsx:                  <div key={stat.type} className="flex items-center justify-between">
src/components/corporate/PartnerIntegration.tsx:                  <SelectItem key={type.value} value={type.value}>
src/components/corporate/PartnerIntegration.tsx:                  <SelectItem key={value} value={value}>
src/components/corporate/PartnerIntegration.tsx:                      <TableRow key={partner.id}>
src/components/corporate/PartnerIntegration.tsx:                        <SelectItem key={type.value} value={type.value}>
src/components/corporate/PartnerIntegration.tsx:                  <Label htmlFor="api_key">API Key</Label>
src/components/corporate/PartnerIntegration.tsx:                    id="api_key"
src/components/corporate/PartnerIntegration.tsx:                    type="password"
src/components/corporate/PartnerIntegration.tsx:                    value={formData.api_credentials.api_key}
src/components/corporate/PartnerIntegration.tsx:                    onChange={(e) => handleNestedChange('api_credentials', 'api_key', e.target.value)}
src/components/corporate/PartnerIntegration.tsx:                    placeholder="Enter API key"
src/components/corporate/PartnerIntegration.tsx:                  <Label htmlFor="api_secret">API Secret</Label>
src/components/corporate/PartnerIntegration.tsx:                    id="api_secret"
src/components/corporate/PartnerIntegration.tsx:                    type="password"
src/components/corporate/PartnerIntegration.tsx:                    value={formData.api_credentials.api_secret}
src/components/corporate/PartnerIntegration.tsx:                    onChange={(e) => handleNestedChange('api_credentials', 'api_secret', e.target.value)}
src/components/corporate/PartnerIntegration.tsx:                    placeholder="Enter API secret"
src/components/corporate/PartnerIntegration.tsx:                  {Object.entries(API_ENDPOINTS).map(([key, endpoint]) => (
src/components/corporate/PartnerIntegration.tsx:                    <div key={key} className="flex items-center gap-2">
src/components/corporate/PartnerIntegration.tsx:                      <Label className="w-32 capitalize">{key}</Label>
src/components/corporate/PartnerIntegration.tsx:                        value={formData.api_credentials.endpoints[key as keyof typeof API_ENDPOINTS]}
src/components/corporate/PartnerIntegration.tsx:                          [key]: e.target.value
src/components/corporate/WellnessPrograms.tsx:    const statusInfo = PROGRAM_STATUS[status as keyof typeof PROGRAM_STATUS];
src/components/corporate/WellnessPrograms.tsx:    const statusInfo = ENROLLMENT_STATUS[status as keyof typeof ENROLLMENT_STATUS];
src/components/corporate/WellnessPrograms.tsx:        ...prev[category as keyof typeof prev],
src/components/corporate/WellnessPrograms.tsx:                  <SelectItem key={type.value} value={type.value}>
src/components/corporate/WellnessPrograms.tsx:                  <SelectItem key={value} value={value}>
src/components/corporate/WellnessPrograms.tsx:                  <Card key={program.id} className="hover:shadow-md transition-shadow">
src/components/corporate/WellnessPrograms.tsx:                        <SelectItem key={type.value} value={type.value}>
src/components/corporate/WellnessPrograms.tsx:                    { key: 'week1', label: 'Week 1 Completion' },
src/components/corporate/WellnessPrograms.tsx:                    { key: 'week2', label: 'Week 2 Completion' },
src/components/corporate/WellnessPrograms.tsx:                    { key: 'week4', label: 'Week 4 Completion' },
src/components/corporate/WellnessPrograms.tsx:                    { key: 'halfway', label: 'Halfway Point' }
src/components/corporate/WellnessPrograms.tsx:                    <div key={milestone.key} className="flex items-center gap-2">
src/components/corporate/WellnessPrograms.tsx:                          const updated = formData.rewards.milestones.filter(m => m.milestone !== milestone.key);
src/components/corporate/WellnessPrograms.tsx:                              milestone: milestone.key,
src/components/corporate/WellnessPrograms.tsx:                    <div key={employee.id} className="flex items-center justify-between p-2 rounded hover:bg-muted/50">
src/components/corporate/EmployeeManagement.tsx:  Key,
src/components/corporate/EmployeeManagement.tsx:  set_password: boolean;
src/components/corporate/EmployeeManagement.tsx:  temporary_password?: string;
src/components/corporate/EmployeeManagement.tsx:    set_password: false
src/components/corporate/EmployeeManagement.tsx:          ...prev.preferences[category as keyof typeof prev.preferences],
src/components/corporate/EmployeeManagement.tsx:        set_passwords: formData.set_password,
src/components/corporate/EmployeeManagement.tsx:      set_password: false
src/components/corporate/EmployeeManagement.tsx:      set_password: false
src/components/corporate/EmployeeManagement.tsx:      <Badge variant={colors[tier as keyof typeof colors] || 'secondary'}>
src/components/corporate/EmployeeManagement.tsx:                  <SelectItem key={dept.id} value={dept.id}>
src/components/corporate/EmployeeManagement.tsx:                  <SelectItem key={type.value} value={type.value}>
src/components/corporate/EmployeeManagement.tsx:                    <TableRow key={employee.id}>
src/components/corporate/EmployeeManagement.tsx:                              <Key className="w-4 h-4 mr-2" />
src/components/corporate/EmployeeManagement.tsx:                        <SelectItem key={dept.id} value={dept.id}>
src/components/corporate/EmployeeManagement.tsx:                        <SelectItem key={type.value} value={type.value}>
src/components/corporate/EmployeeManagement.tsx:                        <SelectItem key={emp.id} value={emp.id}>
src/components/corporate/EmployeeManagement.tsx:                        <SelectItem key={tier.value} value={tier.value}>
src/components/corporate/EmployeeManagement.tsx:                      <Label htmlFor="set_password">Set Temporary Password</Label>
src/components/corporate/EmployeeManagement.tsx:                        id="set_password"
src/components/corporate/EmployeeManagement.tsx:                        checked={formData.set_password}
src/components/corporate/EmployeeManagement.tsx:                        onCheckedChange={(checked) => handleFormChange('set_password', checked)}
src/components/corporate/EmployeeManagement.tsx:                        {Object.keys(uploadPreview[0]).map(key => (
src/components/corporate/EmployeeManagement.tsx:                          <TableHead key={key}>{key}</TableHead>
src/components/corporate/EmployeeManagement.tsx:                        <TableRow key={index}>
src/components/corporate/EmployeeManagement.tsx:                            <TableCell key={cellIndex}>{value}</TableCell>
src/components/corporate/EmployeeManagement.tsx:                      <SelectItem key={tier.value} value={tier.value}>
src/components/corporate/EmployeeManagement.tsx:                <Card key={category}>
src/components/corporate/EmployeeManagement.tsx:                      <div key={permission.id} className="flex items-center justify-between">
src/components/corporate/BudgetTracking.tsx:                <XAxis dataKey="month" />
src/components/corporate/BudgetTracking.tsx:                <Line type="monotone" dataKey="allocated" stroke="#3b82f6" strokeWidth={2} />
src/components/corporate/BudgetTracking.tsx:                <Line type="monotone" dataKey="spent" stroke="#ef4444" strokeWidth={2} />
src/components/corporate/BudgetTracking.tsx:                <Line type="monotone" dataKey="remaining" stroke="#10b981" strokeWidth={2} />
src/components/corporate/BudgetTracking.tsx:                  dataKey="value"
src/components/corporate/BudgetTracking.tsx:                    <Cell key={`cell-${index}`} fill={entry.color} />
src/components/corporate/BudgetTracking.tsx:                <XAxis dataKey="name" />
src/components/corporate/BudgetTracking.tsx:                <Bar dataKey="allocated" fill="#3b82f6" />
src/components/corporate/BudgetTracking.tsx:                <Bar dataKey="spent" fill="#ef4444" />
src/components/corporate/BudgetTracking.tsx:                <Bar dataKey="remaining" fill="#10b981" />
src/components/corporate/BudgetTracking.tsx:                      <SelectItem key={format(date, 'yyyy-MM')} value={format(date, 'yyyy-MM')}>
src/components/corporate/BudgetTracking.tsx:                  <SelectItem key={dept.id} value={dept.id}>
src/components/corporate/BudgetTracking.tsx:                  <SelectItem key={type.value} value={type.value}>
src/components/corporate/BudgetTracking.tsx:                      <TableRow key={budget.id}>
src/components/corporate/BudgetTracking.tsx:                      <SelectItem key={dept.id} value={dept.id}>
src/components/corporate/BudgetTracking.tsx:                      <SelectItem key={type.value} value={type.value}>
src/components/corporate/BudgetTracking.tsx:                      <SelectItem key={type.value} value={type.value}>
src/components/corporate/BudgetTracking.tsx:                    key={type.value}
src/components/ui/toaster.tsx:          <Toast key={id} {...props}>
src/components/ui/chart.tsx:  } & ({ color?: string; theme?: never } | { color?: never; theme: Record<keyof typeof THEMES, string> });
src/components/ui/chart.tsx:  .map(([key, itemConfig]) => {
src/components/ui/chart.tsx:    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;
src/components/ui/chart.tsx:    return color ? `  --color-${key}: ${color};` : null;
src/components/ui/chart.tsx:      nameKey?: string;
src/components/ui/chart.tsx:      labelKey?: string;
src/components/ui/chart.tsx:      nameKey,
src/components/ui/chart.tsx:      labelKey,
src/components/ui/chart.tsx:      const key = `${labelKey || item.dataKey || item.name || "value"}`;
src/components/ui/chart.tsx:      const itemConfig = getPayloadConfigFromPayload(config, item, key);
src/components/ui/chart.tsx:        !labelKey && typeof label === "string"
src/components/ui/chart.tsx:          ? config[label as keyof typeof config]?.label || label
src/components/ui/chart.tsx:    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);
src/components/ui/chart.tsx:            const key = `${nameKey || item.name || item.dataKey || "value"}`;
src/components/ui/chart.tsx:            const itemConfig = getPayloadConfigFromPayload(config, item, key);
src/components/ui/chart.tsx:                key={item.dataKey}
src/components/ui/chart.tsx:      nameKey?: string;
src/components/ui/chart.tsx:>(({ className, hideIcon = false, payload, verticalAlign = "bottom", nameKey }, ref) => {
src/components/ui/chart.tsx:        const key = `${nameKey || item.dataKey || "value"}`;
src/components/ui/chart.tsx:        const itemConfig = getPayloadConfigFromPayload(config, item, key);
src/components/ui/chart.tsx:            key={item.value}
src/components/ui/chart.tsx:function getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {
src/components/ui/chart.tsx:  let configLabelKey: string = key;
src/components/ui/chart.tsx:  if (key in payload && typeof payload[key as keyof typeof payload] === "string") {
src/components/ui/chart.tsx:    configLabelKey = payload[key as keyof typeof payload] as string;
src/components/ui/chart.tsx:    key in payloadPayload &&
src/components/ui/chart.tsx:    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
src/components/ui/chart.tsx:    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;
src/components/ui/chart.tsx:  return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config];
src/components/ui/sidebar.tsx:const SIDEBAR_KEYBOARD_SHORTCUT = "b";
src/components/ui/sidebar.tsx:  // Adds a keyboard shortcut to toggle the sidebar.
src/components/ui/sidebar.tsx:    const handleKeyDown = (event: KeyboardEvent) => {
src/components/ui/sidebar.tsx:      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {
src/components/ui/sidebar.tsx:    window.addEventListener("keydown", handleKeyDown);
src/components/ui/sidebar.tsx:    return () => window.removeEventListener("keydown", handleKeyDown);
src/components/ui/carousel.tsx:    const handleKeyDown = React.useCallback(
src/components/ui/carousel.tsx:      (event: React.KeyboardEvent<HTMLDivElement>) => {
src/components/ui/carousel.tsx:        if (event.key === "ArrowLeft") {
src/components/ui/carousel.tsx:        } else if (event.key === "ArrowRight") {
src/components/ui/carousel.tsx:          onKeyDownCapture={handleKeyDown}
src/components/AboutSection.tsx:                <div key={index} className="space-y-1">
src/components/BlogComments.tsx:            <div key={comment.id} className="glass-card rounded-2xl p-6 space-y-4">
src/components/BlogComments.tsx:                    <div key={reply.id} className="space-y-2">
src/components/booking/PricingDisplay.tsx:                <div key={rule.ruleId || index} className="flex items-center justify-between text-xs">
src/components/booking/LocationAwareBooking.tsx:            <Card key={i} className="p-4">
src/components/booking/LocationAwareBooking.tsx:                key={locInfo.location.id}
src/components/booking/LocationAwareBooking.tsx:                            <Badge key={service} variant="secondary" className="text-xs">
src/components/booking/StripePaymentForm.tsx:  clientSecret: string;
src/components/booking/StripePaymentForm.tsx:  clientSecret,
src/components/booking/Step4PaymentUpdated.tsx:  const [clientSecret, setClientSecret] = useState<string | null>(null);
src/components/booking/Step4PaymentUpdated.tsx:    if (paymentMethod === 'card' && !clientSecret) {
src/components/booking/Step4PaymentUpdated.tsx:      const clientSecret = await createPaymentIntent(amount, 'pln', {
src/components/booking/Step4PaymentUpdated.tsx:      setClientSecret(clientSecret);
src/components/booking/Step4PaymentUpdated.tsx:          ) : clientSecret ? (
src/components/booking/Step4PaymentUpdated.tsx:            <Elements stripe={getStripe()} options={{ clientSecret }}>
src/components/booking/Step4PaymentUpdated.tsx:                clientSecret={clientSecret}
src/components/booking/OfflineBookingSheet.tsx:                key={booking.id}
src/components/booking/GroupBookingToggle.tsx:  const handleParticipantChange = (index: number, field: keyof GroupParticipant, value: string) => {
src/components/booking/GroupBookingToggle.tsx:                <div key={index} className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-2 p-3 border rounded-lg">
src/components/booking/Step3Details.tsx:    return Object.keys(newErrors).length === 0;
src/components/booking/__tests__/booking-integration.test.tsx:    it('should be keyboard navigable', async () => {
src/components/booking/__tests__/booking-integration.test.tsx:      // Navigate using Tab key
src/components/booking/__tests__/booking-integration.test.tsx:      // Continue through flow with Enter key
src/components/booking/__tests__/booking-integration.test.tsx:      await user.keyboard('{Enter}'); // Select service
src/components/booking/__tests__/booking-integration.test.tsx:      await user.keyboard('{Enter}'); // Continue button
src/components/booking/Step1Choose.tsx:                    key={service.id}
src/components/booking/Step1Choose.tsx:                        key={loc.id}
src/components/booking/AISchedulingAssistant.tsx:                      <Card key={index} className="cursor-pointer hover:bg-accent/50 transition-colors">
src/components/booking/AISchedulingAssistant.tsx:                      <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
src/components/booking/AISchedulingAssistant.tsx:                        <div key={index} className="flex items-start gap-2 p-3 bg-blue-50 rounded-lg">
src/components/booking/AISchedulingAssistant.tsx:                          <Card key={index}>
src/components/booking/Step2TimeNew.tsx:              key={date.toISOString()}
src/components/booking/Step2TimeNew.tsx:                      key={slot.id}
src/components/booking/Step2TimeNew.tsx:                      key={slot.id}
src/components/booking/Step2TimeNew.tsx:                      key={slot.id}
src/components/booking/Step2Time.tsx:                  key={date.toISOString()}
src/components/booking/Step2Time.tsx:                <div key={day} className="text-xs text-pearl/50 text-center py-1">
src/components/booking/Step2Time.tsx:                    key={i}
src/components/booking/Step2Time.tsx:                      key={slot.id}
src/components/booking/Step2Time.tsx:                      key={slot.id}
src/components/booking/Step2Time.tsx:                      key={slot.id}
src/components/booking/Step4PaymentCompliant.tsx:    return Object.keys(newErrors).length === 0;
src/components/booking/Step4PaymentCompliant.tsx:                    <li key={index} className="flex items-start gap-2">
src/components/ServiceBooksyLink.tsx:          .eq('key', 'booksy_business_url')
src/components/location/LocationSelector.tsx:              <SelectItem key={location.id} value={location.id}>
src/components/location/LocationSelector.tsx:              key={location.id}
src/components/location/LocationSelector.tsx:          key={location.id}
src/components/location/LocationSelector.tsx:                    <Badge key={service} variant="outline" className="text-xs">
src/components/location/LocationDisplay.tsx:                        <div key={day} className="flex justify-between">
src/components/location/LocationDisplay.tsx:                  <Badge key={service} variant="outline" className="text-xs">
src/components/location/CitySelector.tsx:            <SelectItem key={city.id} value={city.id}>
src/components/location/CitySelector.tsx:                    key={city.id}
src/components/location/CitySelector.tsx:                key={city.id}
src/components/payment/GiftCardPurchase.tsx:                  key={amount}
src/components/payment/PaymentPlanForm.tsx:                    <SelectItem key={num} value={num.toString()}>
src/components/payment/PaymentPlanForm.tsx:                      key={installment.installmentNumber}
src/components/FitnessSection.tsx:              key={index}
src/components/FitnessSection.tsx:                    <div key={i} className="flex items-center gap-3 text-sm text-pearl/80">
src/components/MobileFooter.tsx:                key={item.label}
src/components/MobileFooter.tsx:              key={item.label}
src/components/SEO.tsx:  keywords?: string;
src/components/SEO.tsx:  keywords,
src/components/SEO.tsx:      {keywords && <meta name="keywords" content={keywords} />}
src/components/SEO.tsx:          key={lng}
src/components/admin/EnhancedReviewManagement.tsx:            key={star}
src/components/admin/EnhancedReviewManagement.tsx:              <Card key={review.id} className="border-champagne/30">
src/components/admin/EnhancedReviewManagement.tsx:                          key={index}
src/components/admin/EnhancedReviewManagement.tsx:              key={review.id}
src/components/admin/EnhancedReviewManagement.tsx:              <Card key={review.id} className="border-amber/30">
src/components/admin/EnhancedReviewManagement.tsx:            <Card key={review.id} className="border-emerald/30">
src/components/admin/IntegrationSettings.tsx:import { Save, Eye, EyeOff, Key, RefreshCw, ExternalLink, Shield, Lock } from "lucide-react";
src/components/admin/IntegrationSettings.tsx:  key: string;
src/components/admin/IntegrationSettings.tsx:  onSave: (key: string, value: string) => Promise<void>;
src/components/admin/IntegrationSettings.tsx:  const isSecret = (key: string) => {
src/components/admin/IntegrationSettings.tsx:    return key.includes("key") || key.includes("token") || key.includes("secret");
src/components/admin/IntegrationSettings.tsx:  const isSecretField = isSecret(setting.key);
src/components/admin/IntegrationSettings.tsx:            <CardTitle className="text-base">{setting.key.replace(/_/g, " ").toUpperCase()}</CardTitle>
src/components/admin/IntegrationSettings.tsx:          {isSecretField && (
src/components/admin/IntegrationSettings.tsx:              type={isSecretField && !isVisible ? "password" : "text"}
src/components/admin/IntegrationSettings.tsx:              placeholder={`Enter ${setting.key.replace(/_/g, " ")}`}
src/components/admin/IntegrationSettings.tsx:            onClick={() => onSave(setting.key, localValue)}
src/components/admin/IntegrationSettings.tsx:        .order("key");
src/components/admin/IntegrationSettings.tsx:  const handleSave = async (key: string, value: string) => {
src/components/admin/IntegrationSettings.tsx:        .eq("key", key);
src/components/admin/IntegrationSettings.tsx:  const paymentSettings = settings.filter(s => s.key.includes("stripe"));
src/components/admin/IntegrationSettings.tsx:  const booksySettings = settings.filter(s => s.key.includes("booksy"));
src/components/admin/IntegrationSettings.tsx:  const communicationSettings = settings.filter(s => s.key.includes("whatsapp") || s.key.includes("smtp"));
src/components/admin/IntegrationSettings.tsx:    s.key.includes("analytics") || s.key.includes("pixel") || s.key.includes("tag_manager")
src/components/admin/IntegrationSettings.tsx:            Settings below are public identifiers safe to store in the database (business IDs, publishable keys, tracking IDs).
src/components/admin/IntegrationSettings.tsx:          <AlertTitle>Sensitive API Keys & Tokens</AlertTitle>
src/components/admin/IntegrationSettings.tsx:            Secret keys (Stripe Secret, Booksy API, WhatsApp Token, etc.) must be managed in Supabase Edge Function Secrets for security.
src/components/admin/IntegrationSettings.tsx:              Manage Secrets in Supabase <ExternalLink className="h-3 w-3" />
src/components/admin/IntegrationSettings.tsx:                <Key className="h-5 w-5" />
src/components/admin/IntegrationSettings.tsx:                <strong>Public Key:</strong> Configure below (safe for frontend use)
src/components/admin/IntegrationSettings.tsx:                <strong>Secret Key:</strong> Already configured in Supabase Secrets (STRIPE_SECRET_KEY)
src/components/admin/IntegrationSettings.tsx:            <SettingCard key={setting.id} setting={setting} onSave={handleSave} saving={saving} />
src/components/admin/IntegrationSettings.tsx:                <Key className="h-5 w-5" />
src/components/admin/IntegrationSettings.tsx:                <strong>API Key:</strong> Must be added to Supabase Secrets (BOOKSY_API_KEY) for mirror queue functionality
src/components/admin/IntegrationSettings.tsx:            <SettingCard key={setting.id} setting={setting} onSave={handleSave} saving={saving} />
src/components/admin/IntegrationSettings.tsx:                <Key className="h-5 w-5" />
src/components/admin/IntegrationSettings.tsx:                <strong>WhatsApp API Token:</strong> Must be added to Supabase Secrets (WHATSAPP_API_TOKEN)
src/components/admin/IntegrationSettings.tsx:                <strong>Email Service:</strong> Already configured in Supabase Secrets (RESEND_API_KEY)
src/components/admin/IntegrationSettings.tsx:            <SettingCard key={setting.id} setting={setting} onSave={handleSave} saving={saving} />
src/components/admin/IntegrationSettings.tsx:                <Key className="h-5 w-5" />
src/components/admin/IntegrationSettings.tsx:                Configure public tracking IDs (safe to expose in frontend code). These are not sensitive secrets.
src/components/admin/IntegrationSettings.tsx:            <SettingCard key={setting.id} setting={setting} onSave={handleSave} saving={saving} />
src/components/admin/BlogManagement.tsx:              key={post.id}
src/components/admin/MirrorQueue.tsx:  const [editingNotes, setEditingNotes] = useState<{ [key: string]: string }>({});
src/components/admin/MirrorQueue.tsx:    <Card key={booking.id} className="p-6 space-y-4 hover:shadow-lg transition-shadow">
src/components/admin/advanced/BulkOperations.tsx:      const template = SAMPLE_TEMPLATES[targetType as keyof typeof SAMPLE_TEMPLATES] || [];
src/components/admin/advanced/BulkOperations.tsx:                  <TableRow key={operation.id} className="border-pearl/5">
src/components/admin/advanced/BulkOperations.tsx:                      <SelectItem key={type.value} value={type.value}>
src/components/admin/advanced/BulkOperations.tsx:                        <SelectItem key={type.value} value={type.value}>
src/components/admin/advanced/BulkOperations.tsx:                    <SelectItem key={type.value} value={type.value}>
src/components/admin/advanced/BulkOperations.tsx:                      <div key={index} className="p-2 bg-red-500/10 border border-red-500/20 rounded text-sm text-red-400">
src/components/admin/advanced/StaffManagement.tsx:                    <SelectItem key={role.id} value={role.id}>
src/components/admin/advanced/StaffManagement.tsx:                  <TableRow key={member.id} className="border-pearl/5">
src/components/admin/advanced/StaffManagement.tsx:                          <Badge key={skill} variant="outline" className="text-xs">
src/components/admin/advanced/StaffManagement.tsx:                    <TableRow key={role.id} className="border-pearl/5">
src/components/admin/advanced/StaffManagement.tsx:                          {Object.keys(role.permissions || {}).length} resources
src/components/admin/advanced/StaffManagement.tsx:                      <SelectItem key={role.id} value={role.id}>
src/components/admin/advanced/StaffManagement.tsx:                    key={skill}
src/components/admin/advanced/StaffManagement.tsx:                    key={spec}
src/components/admin/advanced/ResourceManagement.tsx:                <TableRow key={resource.id} className="border-pearl/5">
src/components/admin/advanced/ResourceManagement.tsx:                      <SelectItem key={type.value} value={type.value}>
src/components/admin/advanced/ResourceManagement.tsx:                    <SelectItem key={location.id} value={location.id}>
src/components/admin/advanced/ResourceManagement.tsx:                      key={skill}
src/components/admin/advanced/ConflictResolution.tsx:                <Card key={conflict.id} className={`glass-card ${conflict.resolved ? 'opacity-60' : ''}`}>
src/components/admin/advanced/ConflictResolution.tsx:                        <div key={item.id} className="flex items-center gap-3 p-3 bg-cocoa/20 rounded-lg">
src/components/admin/advanced/ConflictResolution.tsx:                      <div key={item.id} className="p-4 bg-cocoa/20 rounded-lg">
src/components/admin/advanced/ReportBuilder.tsx:              <Card key={report.id} className="glass-card">
src/components/admin/advanced/ReportBuilder.tsx:                    <label key={field.name} className="flex items-center gap-2 p-2 rounded hover:bg-cocoa/20 cursor-pointer">
src/components/admin/advanced/ReportBuilder.tsx:                      <label key={field.name} className="flex items-center gap-2 p-2 rounded hover:bg-cocoa/20 cursor-pointer">
src/components/admin/advanced/ReportBuilder.tsx:                    <div key={index} className="flex gap-2">
src/components/admin/advanced/ReportBuilder.tsx:                            <SelectItem key={field.name} value={field.name}>
src/components/admin/advanced/ReportBuilder.tsx:                        <SelectItem key={field.name} value={field.name}>
src/components/admin/advanced/ReportBuilder.tsx:              <Card key={index} className="glass-card cursor-pointer hover:bg-cocoa/10" onClick={() => handleUseTemplate(template)}>
src/components/admin/advanced/ReportBuilder.tsx:                        <th key={field} className="text-left p-3 text-pearl/70 text-sm font-medium">
src/components/admin/advanced/ReportBuilder.tsx:                      <tr key={index} className="border-b border-pearl/5">
src/components/admin/advanced/ReportBuilder.tsx:                          <td key={field} className="p-3 text-pearl/80 text-sm">
src/components/admin/SocialPostsManagement.tsx:            <Card key={post.id}>
src/components/admin/QuickSlotCreator.tsx:                <div key={index} className="text-center">
src/components/admin/UnifiedAvailabilityCalendar.tsx:    const Icon = LOCATION_ICONS[location as keyof typeof LOCATION_ICONS] || MapPin;
src/components/admin/UnifiedAvailabilityCalendar.tsx:    return <Icon className={`w-3 h-3 ${LOCATION_COLORS[location as keyof typeof LOCATION_COLORS]}`} />;
src/components/admin/UnifiedAvailabilityCalendar.tsx:                    <Card key={slot.id} className="bg-cocoa/30 border-graphite/20 p-3">
src/components/admin/UnifiedAvailabilityCalendar.tsx:                        <Droppable key={timeSlot} droppableId={`time-${timeSlot}`}>
src/components/admin/UnifiedAvailabilityCalendar.tsx:                                  <Draggable key={booking.id} draggableId={booking.id} index={index}>
src/components/admin/UnifiedAvailabilityCalendar.tsx:                          key={hour}
src/components/admin/UnifiedAvailabilityCalendar.tsx:                            <Droppable key={timeString} droppableId={`time-${timeString}`} type="timeline">
src/components/admin/UnifiedAvailabilityCalendar.tsx:                                            key={booking.id}
src/components/admin/UnifiedAvailabilityCalendar.tsx:                                  key={event.id}
src/components/admin/UnifiedAvailabilityCalendar.tsx:          <div key={day} className="text-center text-pearl/60 text-sm font-medium py-2">
src/components/admin/UnifiedAvailabilityCalendar.tsx:              key={date.toISOString()}
src/components/admin/UnifiedAvailabilityCalendar.tsx:                  <div key={slot.id} className="flex items-center gap-1">
src/components/admin/MetaCAPIDashboard.tsx:      {/* Key Metrics */}
src/components/admin/MetaCAPIDashboard.tsx:                      dataKey="totalEvents"
src/components/admin/MetaCAPIDashboard.tsx:                      nameKey="eventName"
src/components/admin/MetaCAPIDashboard.tsx:                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
src/components/admin/MetaCAPIDashboard.tsx:                    <XAxis dataKey="eventName" angle={-45} textAnchor="end" height={80} />
src/components/admin/MetaCAPIDashboard.tsx:                    <Bar dataKey="successRate" fill="#00C49F" />
src/components/admin/MetaCAPIDashboard.tsx:                  <div key={event.eventName} className="flex items-center justify-between p-4 border rounded-lg">
src/components/admin/MetaCAPIDashboard.tsx:                  <div key={step.eventName} className="space-y-2">
src/components/admin/MetaCAPIDashboard.tsx:                    dataKey="eventDate"
src/components/admin/MetaCAPIDashboard.tsx:                  <Bar yAxisId="left" dataKey="totalEvents" fill="#8884d8" name="Total Events" />
src/components/admin/MetaCAPIDashboard.tsx:                  <Line yAxisId="right" type="monotone" dataKey="totalConversionValue" stroke="#82ca9d" name="Value (PLN)" />
src/components/admin/MetaCAPIDashboard.tsx:                      <div key={event.eventName} className="flex items-center justify-between p-2 border rounded">
src/components/admin/EnhancedServicesManagement.tsx:              <SelectItem key={cat} value={cat}>{cat}</SelectItem>
src/components/admin/EnhancedServicesManagement.tsx:                <Draggable key={service.id} draggableId={service.id} index={index}>
src/components/admin/EnhancedServicesManagement.tsx:                                {service.translations && Object.keys(service.translations.title).length > 1 && (
src/components/admin/EnhancedServicesManagement.tsx:                                    {Object.keys(service.translations.title).length} languages
src/components/admin/EnhancedServicesManagement.tsx:                        <SelectItem key={cat} value={cat}>{cat}</SelectItem>
src/components/admin/EnhancedServicesManagement.tsx:                    <TabsTrigger key={lang.code} value={lang.code} className="gap-2">
src/components/admin/EnhancedServicesManagement.tsx:                    const sourceTitle = formData.title[sourceLang as keyof typeof formData.title];
src/components/admin/EnhancedServicesManagement.tsx:                    const sourceDesc = formData.description[sourceLang as keyof typeof formData.description];
src/components/admin/EnhancedServicesManagement.tsx:                    const sourceFeatures = Array.isArray(formData.features[sourceLang as keyof typeof formData.features]) 
src/components/admin/EnhancedServicesManagement.tsx:                      ? formData.features[sourceLang as keyof typeof formData.features] as string[]
src/components/admin/EnhancedServicesManagement.tsx:                <TabsContent key={lang.code} value={lang.code} className="space-y-4">
src/components/admin/EnhancedServicesManagement.tsx:                      value={formData.title[lang.code as keyof typeof formData.title]}
src/components/admin/EnhancedServicesManagement.tsx:                      value={formData.description[lang.code as keyof typeof formData.description]}
src/components/admin/EnhancedServicesManagement.tsx:                        const features = formData.features[lang.code as keyof typeof formData.features];
src/components/admin/CommunicationManagement.tsx:                    <div key={log.id} className="flex items-center justify-between p-4 border rounded-lg">
src/components/admin/CommunicationManagement.tsx:                    Make sure to configure your API keys in Supabase Edge Functions:
src/components/admin/CommunicationManagement.tsx:                    <li>• TWILIO_AUTH_TOKEN</li>
src/components/admin/AIContentGenerator.tsx:                      <SelectItem key={lang.value} value={lang.value}>
src/components/admin/ServiceFAQManagement.tsx:                        <SelectItem key={service.id} value={service.id}>
src/components/admin/ServiceFAQManagement.tsx:            <Card key={serviceId} className="bg-charcoal/50 border-graphite/20 p-6">
src/components/admin/ServiceFAQManagement.tsx:                      <Draggable key={faq.id} draggableId={faq.id} index={index}>
src/components/admin/AdminSidebar.tsx:          <SidebarGroup key={group.group}>
src/components/admin/AdminSidebar.tsx:                    <SidebarMenuItem key={item.title}>
src/components/admin/ReliabilityDashboard.tsx:                      dataKey="timestamp"
src/components/admin/ReliabilityDashboard.tsx:                      dataKey="latency.p95"
src/components/admin/ReliabilityDashboard.tsx:                      dataKey="latency.p50"
src/components/admin/ReliabilityDashboard.tsx:                      dataKey="timestamp"
src/components/admin/ReliabilityDashboard.tsx:                      dataKey="throughput"
src/components/admin/ReliabilityDashboard.tsx:                        key={idx}
src/components/admin/ReliabilityDashboard.tsx:                      key={execution.id}
src/components/admin/ReliabilityDashboard.tsx:                <Alert key={idx} severity={alert.severity === 'critical' ? 'destructive' : 'default'}>
src/components/admin/ReviewManagement.tsx:            key={star}
src/components/admin/ReviewManagement.tsx:              <Card key={review.id} className="border-champagne/30">
src/components/admin/ReviewManagement.tsx:              <Card key={review.id}>
src/components/admin/WeekView.tsx:              key={date.toISOString()}
src/components/admin/WeekView.tsx:                          key={booking.id}
src/components/admin/LocationManagement.tsx:                            <SelectItem key={type.value} value={type.value}>
src/components/admin/LocationManagement.tsx:                            <SelectItem key={city.id} value={city.id}>
src/components/admin/LocationManagement.tsx:                      <div key={day} className="flex items-center gap-4 p-3 border rounded">
src/components/admin/LocationManagement.tsx:                      <div key={service} className="flex items-center space-x-2">
src/components/admin/LocationManagement.tsx:            <Card key={i}>
src/components/admin/LocationManagement.tsx:            <Card key={location.id}>
src/components/admin/LocationManagement.tsx:                          <Badge key={service} variant="secondary" className="text-xs">
src/components/admin/MediaStudio.tsx:              <Card key={svc.id} className={`p-3 ${selected.has(svc.id) ? 'ring-1 ring-champagne/40' : ''}`}
src/components/admin/content/AIServiceDescriptionGenerator.tsx:  const handleInputChange = (field: keyof ServiceDescriptionRequest, value: any) => {
src/components/admin/content/AIServiceDescriptionGenerator.tsx:              <Label>Key Features</Label>
src/components/admin/content/AIServiceDescriptionGenerator.tsx:                  onKeyPress={(e) => e.key === 'Enter' && handleAddFeature()}
src/components/admin/content/AIServiceDescriptionGenerator.tsx:                    <Badge key={index} variant="secondary" className="flex items-center gap-1">
src/components/admin/content/AIServiceDescriptionGenerator.tsx:              <Label>Key Benefits</Label>
src/components/admin/content/AIServiceDescriptionGenerator.tsx:                  onKeyPress={(e) => e.key === 'Enter' && handleAddBenefit()}
src/components/admin/content/AIServiceDescriptionGenerator.tsx:                    <Badge key={index} variant="secondary" className="flex items-center gap-1">
src/components/admin/content/AIServiceDescriptionGenerator.tsx:                  <Label className="text-sm font-medium">Key Benefits</Label>
src/components/admin/content/AIServiceDescriptionGenerator.tsx:                    {generatedContent.keyBenefits.map((benefit: string, index: number) => (
src/components/admin/content/AIServiceDescriptionGenerator.tsx:                      <div key={index} className="flex items-center gap-2">
src/components/admin/content/AIServiceDescriptionGenerator.tsx:                    onClick={() => copyToClipboard(generatedContent.keyBenefits.join('\n'), 'benefits')}
src/components/admin/content/AIServiceDescriptionGenerator.tsx:                      <div key={index} className="border rounded-lg p-4">
src/components/admin/content/AIBlogPostGenerator.tsx:  const handleInputChange = (field: keyof BlogPostRequest, value: any) => {
src/components/admin/content/AIBlogPostGenerator.tsx:            {/* Target Audience and SEO Keywords */}
src/components/admin/content/AIBlogPostGenerator.tsx:                <Label htmlFor="seoKeywords">SEO Keywords (comma-separated)</Label>
src/components/admin/content/AIBlogPostGenerator.tsx:                  id="seoKeywords"
src/components/admin/content/AIBlogPostGenerator.tsx:                  placeholder="keyword1, keyword2, keyword3"
src/components/admin/content/AIBlogPostGenerator.tsx:                  value={formData.seoKeywords?.join(', ') || ''}
src/components/admin/content/AIBlogPostGenerator.tsx:                  onChange={(e) => handleInputChange('seoKeywords', e.target.value.split(',').map(k => k.trim()))}
src/components/admin/content/AIBlogPostGenerator.tsx:                    <Badge key={index} variant="secondary">
src/components/admin/content/AITranslationTool.tsx:                        <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
src/components/admin/content/AITranslationTool.tsx:                <div key={item.id} className="border rounded-lg p-4 space-y-2">
src/components/admin/content/AIQualityScorer.tsx:      'Well-optimized for target keywords without sounding unnatural',
src/components/admin/content/AIQualityScorer.tsx:                      {Object.entries(sampleScoreResult.scores).map(([key, value]) => (
src/components/admin/content/AIQualityScorer.tsx:                        <div key={key} className="space-y-2">
src/components/admin/content/AIQualityScorer.tsx:                              {key.replace(/([A-Z])/g, ' $1').trim()}
src/components/admin/content/AIQualityScorer.tsx:                        <li key={index} className="flex items-start gap-3">
src/components/admin/content/AIQualityScorer.tsx:                        <li key={index} className="flex items-start gap-3">
src/components/admin/content/AIQualityScorer.tsx:                  <div key={index} className="space-y-2">
src/components/admin/content/AITemplateManager.tsx:              <Card key={template.id} className="cursor-pointer hover:shadow-lg transition-shadow">
src/components/admin/content/AITemplateManager.tsx:              <Card key={template.id}>
src/components/admin/content/AITemplateManager.tsx:                  <div key={template.id} className="flex items-center justify-between">
src/components/admin/content/AISEOAnalyzer.tsx:  const [keywords, setKeywords] = useState('');
src/components/admin/content/AISEOAnalyzer.tsx:        keywords: keywords.split(',').map(k => k.trim()).filter(k => k),
src/components/admin/content/AISEOAnalyzer.tsx:        recommendation: 'Add a single H1 tag that includes your primary keyword.'
src/components/admin/content/AISEOAnalyzer.tsx:    keywordAnalysis: {
src/components/admin/content/AISEOAnalyzer.tsx:                <Label htmlFor="keywords">Target Keywords (comma-separated)</Label>
src/components/admin/content/AISEOAnalyzer.tsx:                  id="keywords"
src/components/admin/content/AISEOAnalyzer.tsx:                  value={keywords}
src/components/admin/content/AISEOAnalyzer.tsx:                  onChange={(e) => setKeywords(e.target.value)}
src/components/admin/content/AISEOAnalyzer.tsx:                      <div key={index} className="flex items-start gap-3 p-3 rounded-lg bg-muted">
src/components/admin/content/AISEOAnalyzer.tsx:                      <div key={index} className="p-3 rounded-lg bg-green-50 dark:bg-green-950/20">
src/components/admin/content/AISEOAnalyzer.tsx:              {/* Keyword Analysis */}
src/components/admin/content/AISEOAnalyzer.tsx:                    Keyword Analysis
src/components/admin/content/AISEOAnalyzer.tsx:                      <p className="text-sm font-medium mb-2">Primary Keyword</p>
src/components/admin/content/AISEOAnalyzer.tsx:                          {sampleAnalysisResult.keywordAnalysis.primary}
src/components/admin/content/AISEOAnalyzer.tsx:                          Density: {sampleAnalysisResult.keywordAnalysis_density[sampleAnalysisResult.keywordAnalysis.primary]}%
src/components/admin/content/AISEOAnalyzer.tsx:                      <p className="text-sm font-medium mb-2">Secondary Keywords</p>
src/components/admin/content/AISEOAnalyzer.tsx:                        {sampleAnalysisResult.keywordAnalysis.secondary.map((keyword, index) => (
src/components/admin/content/AISEOAnalyzer.tsx:                          <Badge key={index} variant="secondary" className="text-xs">
src/components/admin/content/AISEOAnalyzer.tsx:                            {keyword} ({sampleAnalysisResult.keywordAnalysis_density[keyword]}%)
src/components/admin/content/AISEOAnalyzer.tsx:                      <p className="text-sm font-medium mb-2">Suggested Keywords</p>
src/components/admin/content/AISEOAnalyzer.tsx:                        {sampleAnalysisResult.keywordAnalysis.suggestions.map((keyword, index) => (
src/components/admin/content/AISEOAnalyzer.tsx:                          <Badge key={index} variant="outline" className="text-xs">
src/components/admin/content/AISEOAnalyzer.tsx:                            {keyword}
src/components/admin/content/AISEOAnalyzer.tsx:                <Label htmlFor="gen-keywords">Target Keywords</Label>
src/components/admin/content/AISEOAnalyzer.tsx:                  id="gen-keywords"
src/components/admin/content/AISEOAnalyzer.tsx:                  <Label htmlFor="competitor-keyword">Target Keyword</Label>
src/components/admin/content/AISEOAnalyzer.tsx:                    id="competitor-keyword"
src/components/admin/content/AISEOAnalyzer.tsx:              <Card key={i}>
src/components/admin/ReferralProgram.tsx:                        <SelectItem key={program.id} value={program.id}>
src/components/admin/ReferralProgram.tsx:                <Card key={program.id}>
src/components/admin/ReferralProgram.tsx:                      <TableRow key={code.id}>
src/components/admin/ReferralProgram.tsx:                      <TableRow key={referral.id}>
src/components/admin/ReferralProgram.tsx:                <Card key={perf.id}>
src/components/admin/AvailabilityCalendar.tsx:              key={day}
src/components/admin/AvailabilityCalendar.tsx:                        key={slot.id}
src/components/admin/AvailabilityCalendar.tsx:                            key={slot.id}
src/components/admin/AvailabilityCalendar.tsx:                            key={booking.id} 
src/components/admin/RegionalPricingManagement.tsx:            <Card key={i}>
src/components/admin/RegionalPricingManagement.tsx:                  <TableRow key={pricing.id}>
src/components/admin/RegionalPricingManagement.tsx:                      <SelectItem key={service.id} value={service.id}>
src/components/admin/RegionalPricingManagement.tsx:                      <SelectItem key={city.id} value={city.id}>
src/components/admin/RegionalPricingManagement.tsx:                      <SelectItem key={location.id} value={location.id}>
src/components/admin/RegionalPricingManagement.tsx:                      <SelectItem key={curr.value} value={curr.value}>
src/components/admin/AutoSlotGenerator.tsx:                <div key={index} className="text-center">
src/components/admin/AutoSlotGenerator.tsx:                <Card key={block.id} className="bg-cocoa/30 border-graphite/20 p-4">
src/components/admin/ServiceContentManagement.tsx:                  <SelectItem key={service.id} value={service.id}>
src/components/admin/SiteImagesManagement.tsx:  key: string;
src/components/admin/SiteImagesManagement.tsx:    key: "",
src/components/admin/SiteImagesManagement.tsx:      key: image.key,
src/components/admin/SiteImagesManagement.tsx:      key: "",
src/components/admin/SiteImagesManagement.tsx:                <Label htmlFor="key">Key (Unique Identifier)*</Label>
src/components/admin/SiteImagesManagement.tsx:                  id="key"
src/components/admin/SiteImagesManagement.tsx:                  value={formData.key}
src/components/admin/SiteImagesManagement.tsx:                    setFormData({ ...formData, key: e.target.value })
src/components/admin/SiteImagesManagement.tsx:                <TableHead>Key</TableHead>
src/components/admin/SiteImagesManagement.tsx:                <TableRow key={image.id}>
src/components/admin/SiteImagesManagement.tsx:                      {image.key}
src/components/admin/SiteImagesManagement.tsx:          <CardTitle>Image Keys Reference</CardTitle>
src/components/admin/FeedbackAnalyticsDashboard.tsx:                    <XAxis dataKey="date" />
src/components/admin/FeedbackAnalyticsDashboard.tsx:                    <Area type="monotone" dataKey="count" stroke="#3B82F6" fill="#3B82F6" fillOpacity={0.3} />
src/components/admin/FeedbackAnalyticsDashboard.tsx:                    <XAxis dataKey="rating" />
src/components/admin/FeedbackAnalyticsDashboard.tsx:                    <Bar dataKey="count" fill="#3B82F6" />
src/components/admin/FeedbackAnalyticsDashboard.tsx:                  <div key={item.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
src/components/admin/FeedbackAnalyticsDashboard.tsx:                    <XAxis dataKey="month" />
src/components/admin/FeedbackAnalyticsDashboard.tsx:                    <Line yAxisId="left" type="monotone" dataKey="count" stroke="#3B82F6" name="Volume" />
src/components/admin/FeedbackAnalyticsDashboard.tsx:                    <Line yAxisId="right" type="monotone" dataKey="rating" stroke="#10B981" name="Rating" />
src/components/admin/FeedbackAnalyticsDashboard.tsx:                    <XAxis dataKey="week" />
src/components/admin/FeedbackAnalyticsDashboard.tsx:                    <Bar dataKey="count" fill="#8B5CF6" />
src/components/admin/FeedbackAnalyticsDashboard.tsx:                      data={Object.entries(breakdown.byType || {}).map(([key, value]) => ({
src/components/admin/FeedbackAnalyticsDashboard.tsx:                        name: key.replace('_', ' '),
src/components/admin/FeedbackAnalyticsDashboard.tsx:                      dataKey="value"
src/components/admin/FeedbackAnalyticsDashboard.tsx:                      {Object.keys(breakdown.byType || {}).map((entry, index) => (
src/components/admin/FeedbackAnalyticsDashboard.tsx:                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
src/components/admin/FeedbackAnalyticsDashboard.tsx:                  <BarChart data={Object.entries(breakdown.byStatus || {}).map(([key, value]) => ({
src/components/admin/FeedbackAnalyticsDashboard.tsx:                    status: key,
src/components/admin/FeedbackAnalyticsDashboard.tsx:                    <XAxis dataKey="status" />
src/components/admin/FeedbackAnalyticsDashboard.tsx:                    <Bar dataKey="count" fill="#10B981" />
src/components/admin/FeedbackAnalyticsDashboard.tsx:                    <div key={priority} className="flex items-center justify-between">
src/components/admin/FeedbackAnalyticsDashboard.tsx:                          style={{ backgroundColor: priorityColors[priority as keyof typeof priorityColors] }}
src/components/admin/FeedbackAnalyticsDashboard.tsx:                      data={Object.entries(breakdown.bySentiment || {}).map(([key, value]) => ({
src/components/admin/FeedbackAnalyticsDashboard.tsx:                        name: key,
src/components/admin/FeedbackAnalyticsDashboard.tsx:                      dataKey="value"
src/components/admin/FeedbackAnalyticsDashboard.tsx:                      {Object.keys(breakdown.bySentiment || {}).map((entry, index) => (
src/components/admin/FeedbackAnalyticsDashboard.tsx:                        <Cell key={`cell-${index}`} fill={sentimentColors[entry as keyof typeof sentimentColors]} />
src/components/admin/FeedbackAnalyticsDashboard.tsx:                  <div key={issue.category} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
src/components/admin/AdvancedAnalytics.tsx:                      dataKey="users"
src/components/admin/AdvancedAnalytics.tsx:                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
src/components/admin/AdvancedAnalytics.tsx:                    <XAxis dataKey="device" />
src/components/admin/AdvancedAnalytics.tsx:                    <Bar dataKey="users" fill="#D4A574" />
src/components/admin/AdvancedAnalytics.tsx:                  <div key={page.page} className="flex items-center justify-between p-3 border rounded">
src/components/admin/AdvancedAnalytics.tsx:                  <XAxis dataKey="date" />
src/components/admin/AdvancedAnalytics.tsx:                  <Area yAxisId="left" type="monotone" dataKey="bookings" stroke="#D4A574" fill="#D4A574" fillOpacity={0.6} />
src/components/admin/AdvancedAnalytics.tsx:                  <Line yAxisId="right" type="monotone" dataKey="revenue" stroke="#8B4513" strokeWidth={2} />
src/components/admin/AdvancedAnalytics.tsx:                    <YAxis dataKey="service" type="category" width={100} />
src/components/admin/AdvancedAnalytics.tsx:                    <Bar dataKey="count" fill="#D4A574" />
src/components/admin/AdvancedAnalytics.tsx:                    <div key={step.step}>
src/components/admin/AdvancedAnalytics.tsx:                  <XAxis dataKey="date" />
src/components/admin/AdvancedAnalytics.tsx:                  <Line type="monotone" dataKey="email" stroke="#8884d8" strokeWidth={2} />
src/components/admin/AdvancedAnalytics.tsx:                  <Line type="monotone" dataKey="whatsapp" stroke="#25D366" strokeWidth={2} />
src/components/admin/AdvancedAnalytics.tsx:                  <Line type="monotone" dataKey="sms" stroke="#007bff" strokeWidth={2} />
src/components/admin/AdvancedAnalytics.tsx:              <Card key={type.type}>
src/components/admin/AdvancedAnalytics.tsx:                  <div key={session.id} className="flex items-center justify-between p-3 border rounded">
src/components/admin/ServiceGalleryManagement.tsx:                      <SelectItem key={service.id} value={service.id}>
src/components/admin/ServiceGalleryManagement.tsx:            <Card key={serviceId} className="bg-charcoal/50 border-graphite/20 p-6">
src/components/admin/ServiceGalleryManagement.tsx:                      <Draggable key={img.id} draggableId={img.id} index={index}>
src/components/admin/UnifiedInbox.tsx:import { useState, useEffect, useRef, KeyboardEvent } from "react";
src/components/admin/UnifiedInbox.tsx:  const handleKeyPress = (e: KeyboardEvent<HTMLTextAreaElement>) => {
src/components/admin/UnifiedInbox.tsx:    if (e.key === 'Enter' && !e.shiftKey) {
src/components/admin/UnifiedInbox.tsx:                  key={conversation.id}
src/components/admin/UnifiedInbox.tsx:                    key={message.id}
src/components/admin/UnifiedInbox.tsx:                                  key={index}
src/components/admin/UnifiedInbox.tsx:                      key={index}
src/components/admin/UnifiedInbox.tsx:                  onKeyPress={handleKeyPress}
src/components/admin/UnifiedInbox.tsx:                            key={template.id}
src/components/admin/EmailManagement.tsx:                    <div key={campaign.id} className="flex items-center justify-between p-4 border rounded-lg">
src/components/admin/EmailManagement.tsx:                  <div key={subscriber.id} className="flex items-center justify-between p-3 border rounded">
src/components/admin/EmailManagement.tsx:                  Resend integration is active. Make sure to configure your RESEND_API_KEY in Supabase Edge Functions.
src/components/admin/AvailabilityMonthCalendar.tsx:            <div key={day} className="text-center text-sm font-medium text-pearl/60 py-2">
src/components/admin/AvailabilityMonthCalendar.tsx:                key={idx}
src/components/admin/AvailabilityMonthCalendar.tsx:                          key={slot.id}
src/components/admin/AvailabilityMonthCalendar.tsx:                      key={slot.id}
src/components/admin/AvailabilityMonthCalendar.tsx:                      <Card key={booking.id} className="bg-champagne/10 border-champagne/30 p-4">
src/components/admin/BookingFilters.tsx:  const handleFilterChange = (key: keyof BookingFilters, value: any) => {
src/components/admin/BookingFilters.tsx:    const newFilters = { ...filters, [key]: value };
src/components/admin/CommunicationAnalytics.tsx:                  <XAxis dataKey="date" />
src/components/admin/CommunicationAnalytics.tsx:                  <Area type="monotone" dataKey="sent" stackId="1" stroke="#8884d8" fill="#8884d8" name="Sent" />
src/components/admin/CommunicationAnalytics.tsx:                  <Area type="monotone" dataKey="delivered" stackId="1" stroke="#82ca9d" fill="#82ca9d" name="Delivered" />
src/components/admin/CommunicationAnalytics.tsx:                  <Area type="monotone" dataKey="read" stackId="1" stroke="#ffc658" fill="#ffc658" name="Read" />
src/components/admin/CommunicationAnalytics.tsx:                  <Area type="monotone" dataKey="failed" stackId="1" stroke="#ff7c7c" fill="#ff7c7c" name="Failed" />
src/components/admin/CommunicationAnalytics.tsx:                  <XAxis dataKey="date" />
src/components/admin/CommunicationAnalytics.tsx:                  <Line type="monotone" dataKey="conversations" stroke="#8884d8" strokeWidth={2} name="Conversations" />
src/components/admin/CommunicationAnalytics.tsx:                  <XAxis dataKey="date" />
src/components/admin/CommunicationAnalytics.tsx:                  <Bar dataKey="referrals" fill="#8884d8" name="Total Referrals" />
src/components/admin/CommunicationAnalytics.tsx:                  <Bar dataKey="successful" fill="#82ca9d" name="Successful" />
src/components/admin/CommunicationAnalytics.tsx:                  <XAxis dataKey="date" />
src/components/admin/CommunicationAnalytics.tsx:                  <Line type="monotone" dataKey="conversionRate" stroke="#8884d8" strokeWidth={2} name="Conversion Rate (%)" />
src/components/admin/CommunicationAnalytics.tsx:                      dataKey="value"
src/components/admin/CommunicationAnalytics.tsx:                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
src/components/admin/CommunicationAnalytics.tsx:                      <div key={ch} className="space-y-2">
src/components/admin/CommunicationAnalytics.tsx:                    <TableRow key={conv.id}>
src/components/admin/PerformanceMonitor.tsx:          <Card key={metric.name} className="glass-card">
src/components/admin/AnalyticsDashboard.tsx:                <XAxis dataKey="month" stroke="#F5F1ED" />
src/components/admin/AnalyticsDashboard.tsx:                <Bar dataKey="bookings" fill="#D4A574" />
src/components/admin/CityManagement.tsx:                        <SelectItem key={tz} value={tz}>{tz}</SelectItem>
src/components/admin/CityManagement.tsx:                        <SelectItem key={curr.value} value={curr.value}>{curr.label}</SelectItem>
src/components/admin/CityManagement.tsx:                <Card key={i}>
src/components/admin/CityManagement.tsx:                <Card key={city.id}>
src/components/admin/CityManagement.tsx:                        <TableRow key={city.id}>
src/components/admin/AvailabilityManagement.tsx:              across {Object.keys(activeAvailability.slots).length} days
src/components/admin/AvailabilityManagement.tsx:                        <Card key={booking.id} className={`
src/components/admin/AvailabilityManagement.tsx:                          <Button key={page} variant={currentPage === page ? 'default' : 'outline'} size="sm" 
src/components/admin/AvailabilityManagement.tsx:                      <Card key={booking.id} className="overflow-hidden">
src/components/admin/AvailabilityManagement.tsx:                          <Button key={page} variant={currentPage === page ? 'default' : 'outline'} size="sm" 
src/components/admin/AvailabilityManagement.tsx:                      <SelectItem key={index} value={index.toString()}>{day}</SelectItem>
src/components/admin/NewsletterManagement.tsx:          <Card key={subscriber.id} className="bg-charcoal/50 border-graphite/20 p-4">
src/components/admin/ComplianceManagement.tsx:                <Card key={i}>
src/components/admin/ComplianceManagement.tsx:                <Card key={req.id}>
src/components/admin/ComplianceManagement.tsx:                                <li key={i}>{disclaimer}</li>
src/components/admin/ComplianceManagement.tsx:                <Card key={i}>
src/components/admin/ComplianceManagement.tsx:                <Card key={tax.id}>
src/components/admin/ComplianceManagement.tsx:                              <Badge key={service} variant="secondary" className="text-xs">
src/components/admin/ComplianceManagement.tsx:                      <TableRow key={log.id}>
src/components/admin/ComplianceManagement.tsx:                    <div key={city.id} className="flex items-center justify-between p-4 border rounded">
src/components/admin/ComplianceManagement.tsx:                      <SelectItem key={city.id} value={city.id}>
src/components/admin/ComplianceManagement.tsx:                      <SelectItem key={type.value} value={type.value}>
src/components/admin/ComplianceManagement.tsx:                      <SelectItem key={city.id} value={city.id}>
src/components/admin/ComplianceManagement.tsx:                      <SelectItem key={type.value} value={type.value}>
src/components/admin/analytics/AIUsageDashboard.tsx:      Object.keys(analytics.feature_breakdown).length
src/components/admin/analytics/AIUsageDashboard.tsx:      {/* Key Metrics */}
src/components/admin/analytics/AIUsageDashboard.tsx:              <CardDescription>AI events and token usage over time</CardDescription>
src/components/admin/analytics/AIUsageDashboard.tsx:                  <XAxis dataKey="date" />
src/components/admin/analytics/AIUsageDashboard.tsx:                    dataKey="events"
src/components/admin/analytics/AIUsageDashboard.tsx:                    dataKey="tokens"
src/components/admin/analytics/AIUsageDashboard.tsx:                    name="Tokens"
src/components/admin/analytics/AIUsageDashboard.tsx:                <BarChart data={Object.entries(analytics?.feature_breakdown || {}).map(([key, value]) => ({
src/components/admin/analytics/AIUsageDashboard.tsx:                  feature: key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
src/components/admin/analytics/AIUsageDashboard.tsx:                  <XAxis dataKey="feature" angle={-45} textAnchor="end" height={100} />
src/components/admin/analytics/AIUsageDashboard.tsx:                  <Bar dataKey="usage" fill="#8884d8" name="Usage Count" />
src/components/admin/analytics/AIUsageDashboard.tsx:                    <XAxis dataKey="date" />
src/components/admin/analytics/AIUsageDashboard.tsx:                    <Line type="monotone" dataKey="cost" stroke="#ff7300" name="Daily Cost" />
src/components/admin/analytics/AIUsageDashboard.tsx:                      data={Object.entries(analytics?.cost_analysis.cost_per_feature || {}).map(([key, value]) => ({
src/components/admin/analytics/AIUsageDashboard.tsx:                        name: key.replace(/_/g, ' '),
src/components/admin/analytics/AIUsageDashboard.tsx:                      dataKey="value"
src/components/admin/analytics/AIUsageDashboard.tsx:                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
src/components/admin/analytics/AIUsageDashboard.tsx:                    <div key={index} className="flex items-center justify-between text-sm">
src/components/admin/analytics/AIUsageDashboard.tsx:                  <div key={user.user_id} className="flex items-center justify-between">
src/components/admin/analytics/AIUsageDashboard.tsx:                <h4 className="font-medium mb-2">Key Insights</h4>
src/components/admin/MonitoringDashboard.tsx:          <Card key={index} className="relative">
src/components/admin/MonitoringDashboard.tsx:                  {Object.entries(healthResults.checks).map(([key, check]) => (
src/components/admin/MonitoringDashboard.tsx:                    <div key={key} className="flex items-center justify-between p-4 border rounded-lg">
src/components/admin/MonitoringDashboard.tsx:                <Card key={alert.id} className="border-l-4 border-l-red-500">
src/components/admin/PaymentSystemAdmin.tsx:      {/* Key Metrics */}
src/components/admin/PaymentSystemAdmin.tsx:                      <TableRow key={plan.id}>
src/components/admin/PaymentSystemAdmin.tsx:                    <div key={tier} className="space-y-2">
src/components/admin/PaymentSystemAdmin.tsx:                    <TableRow key={plan.id}>
src/components/admin/PaymentSystemAdmin.tsx:                    <TableRow key={card.id}>
src/components/admin/PaymentSystemAdmin.tsx:                  <div key={tier} className="flex items-center justify-between p-3 border rounded-lg">
src/components/admin/LoyaltyManagement.tsx:    return LOYALTY_TIERS[tier as keyof typeof LOYALTY_TIERS]?.color || "#CD7F32";
src/components/admin/LoyaltyManagement.tsx:    return LOYALTY_TIERS[tier as keyof typeof LOYALTY_TIERS]?.name || "Bronze";
src/components/admin/LoyaltyManagement.tsx:        {Object.entries(LOYALTY_TIERS).map(([key, tier]) => (
src/components/admin/LoyaltyManagement.tsx:          <Card key={key} className="bg-charcoal/50 border-graphite/30">
src/components/admin/LoyaltyManagement.tsx:                  {tierCounts[key as keyof typeof tierCounts]}
src/components/admin/LoyaltyManagement.tsx:                  key={stat.userId}
src/components/ReliabilityDashboard.tsx:                      <div key={name} className="flex items-center justify-between">
src/components/loyalty/LoyaltyDashboard.tsx:            <Card key={i} className="animate-pulse">
src/components/loyalty/LoyaltyDashboard.tsx:                    {loyaltyStatus.currentTier && TIER_ICONS[loyaltyStatus.currentTier.name as keyof typeof TIER_ICONS]}
src/components/loyalty/LoyaltyDashboard.tsx:                      <div key={i} className="h-20 bg-muted rounded animate-pulse"></div>
src/components/loyalty/LoyaltyDashboard.tsx:                    <RewardCard key={reward.id} reward={reward} userPoints={loyaltyStatus?.currentPoints || 0} />
src/components/loyalty/LoyaltyDashboard.tsx:                    <div key={redemption.id} className="flex items-center justify-between p-3 border rounded-lg">
src/components/checkout/B2BCheckoutFlow.tsx:  const updateCheckoutData = (section: keyof B2BCheckoutData, data: any) => {
src/components/checkout/B2BCheckoutFlow.tsx:    return Object.keys(newErrors).length === 0;
src/components/checkout/B2BCheckoutFlow.tsx:                    <li key={index}>• {note}</li>
src/components/feedback/BugReportForm.tsx:            key={issue}
src/components/feedback/BugReportForm.tsx:            <div key={level} className="flex items-center space-x-2">
src/components/feedback/BugReportForm.tsx:                        key={index}
src/components/feedback/FeedbackForm.tsx:              key={star}
src/components/feedback/FeedbackForm.tsx:              key={score}
src/components/feedback/FeedbackForm.tsx:                <div key={index} className="space-y-2">
src/components/feedback/FeedbackForm.tsx:                          key={rating}
src/components/feedback/FeedbackForm.tsx:                <div key={index} className="space-y-2">
src/components/feedback/FeedbackForm.tsx:              {categories[feedbackType as keyof typeof categories] && (
src/components/feedback/FeedbackForm.tsx:                      {categories[feedbackType as keyof typeof categories].map((category) => (
src/components/feedback/FeedbackForm.tsx:                        <SelectItem key={category} value={category}>
src/components/feedback/FeedbackForm.tsx:                  key={tag}
src/components/feedback/FeedbackForm.tsx:                    key={index}
src/components/feedback/NPSSurvey.tsx:    const message = scoreMessages[score as keyof typeof scoreMessages];
src/components/feedback/NPSSurvey.tsx:                      key={score}
src/components/BeforeAfterSlider.tsx:            key={idx}
src/components/AboutCard.tsx:                  key={idx}
src/components/AvailableSlotsList.tsx:                key={`${slot.slotId}-${slot.date.toISOString()}`}
src/components/skeletons/FormSkeleton.tsx:      <div key={i} className="space-y-2">
src/components/skeletons/GallerySkeleton.tsx:        key={i}
src/components/BeautySection.tsx:                key={index}
src/components/SocialFeed.tsx:            <Card key={i} className="overflow-hidden border-border/50 bg-card/50 backdrop-blur-sm">
src/components/SocialFeed.tsx:            key={post.id}
src/components/FitnessHighlight.tsx:              key={idx}
src/components/FitnessHighlight.tsx:            <div key={idx} className="p-6 glass-card-light rounded-2xl hover-lift">
src/components/BlogSection.tsx:                key={index}
src/components/StandardServiceCard.tsx:                <div key={idx} className="flex items-center gap-2 text-sm text-pearl/70 text-body">
src/components/tracking/TrackableContactForm.tsx:  const handleInputChange = (field: keyof ContactFormData, value: string | boolean) => {
src/components/tracking/MetaCAPIInitializer.tsx:                       !!process.env.VITE_META_ACCESS_TOKEN &&
src/components/TestimonialsCarousel.tsx:                <Star key={i} className="w-5 h-5 text-champagne fill-champagne" />
src/components/TestimonialsCarousel.tsx:                  key={idx}
src/components/seo/SEOHead.tsx:  keywords?: string;
src/components/seo/SEOHead.tsx:  keywords,
src/components/seo/SEOHead.tsx:      {keywords && <meta name="keywords" content={keywords} />}
src/components/seo/SEOHead.tsx:          key={index}
src/components/seo/SEOHead.tsx:        <meta key={index} name={meta.name} content={meta.content} />
src/components/seo/NotFoundHandler.tsx:      // Check if path contains any keywords from the page
src/components/seo/NotFoundHandler.tsx:                    key={index}
src/components/Navigation.tsx:                  key={item.name}
src/components/Navigation.tsx:                  key={item.name}
src/components/Navigation.tsx:                      key={item.name}
src/components/Navigation.tsx:                      key={item.name}
src/components/CurrencySwitcher.tsx:            key={curr.code}
src/components/translations/TranslationManager.tsx:              {Object.keys(stats?.byLanguage || {}).length}
src/components/translations/TranslationManager.tsx:                    <option key={cat} value={cat}>{cat}</option>
src/components/translations/TranslationManager.tsx:                        <TableRow key={translation.id}>
src/components/translations/TranslationManager.tsx:                        <div key={pair} className="flex items-center justify-between">
src/components/translations/TranslationManager.tsx:                        <div key={category} className="flex items-center justify-between">
src/components/translations/TranslationAssistant.tsx:                      key={index}
src/components/LanguageSwitcher.tsx:              key={language.code}
src/components/localization/LanguageSelector.tsx:              key={language.code}
src/components/localization/LanguageSelector.tsx:              key={language.code}
src/components/localization/LanguageSelector.tsx:              key={language.code}
src/components/localization/CurrencySelector.tsx:              key={currency.code}
src/components/localization/CurrencySelector.tsx:              key={currency.code}
src/components/localization/CurrencySelector.tsx:              key={currency.code}
src/components/OptimizedImage.tsx:              key={index}
src/components/reviews/ReviewCard.tsx:            key={star}
src/components/reviews/ReviewCard.tsx:                  key={index}
src/components/reviews/ReviewVerificationSystem.tsx:              <Card key={request.id} className="border-champagne/30">
src/components/reviews/ReviewVerificationSystem.tsx:                        <Dialog key={index}>
src/components/reviews/ReviewVerificationSystem.tsx:              <Card key={fraud.id} className={`border-2 ${fraud.confidence_score > 0.8 ? 'border-rose/50' : fraud.confidence_score > 0.6 ? 'border-amber/50' : 'border-emerald/50'}`}>
src/components/reviews/ReviewVerificationSystem.tsx:                          <li>• Suspicious keywords detected</li>
src/components/reviews/ReviewVerificationSystem.tsx:            <Card key={request.id} className="border-emerald/30">
src/components/reviews/ReviewForm.tsx:                      <SelectItem key={service.id} value={service.id}>
src/components/reviews/ReviewForm.tsx:                      key={star}
src/components/reviews/ReviewForm.tsx:                    <div key={index} className="relative group">
src/components/reviews/ReviewResponseManager.tsx:                    <div key={response.id} className="p-4 border rounded-lg">
src/components/reviews/ReviewResponseManager.tsx:                  <SelectItem key={template.id} value={template.id}>
src/components/reviews/PhotoViewer.tsx:  const handleKeyDown = (e: KeyboardEvent) => {
src/components/reviews/PhotoViewer.tsx:    switch (e.key) {
src/components/reviews/PhotoViewer.tsx:    window.addEventListener('keydown', handleKeyDown);
src/components/reviews/PhotoViewer.tsx:    return () => window.removeEventListener('keydown', handleKeyDown);
src/components/reviews/PhotoViewer.tsx:                  key={index}
src/components/media/ModelConsentForm.tsx:    return Object.keys(newErrors).length === 0
src/components/media/ModelConsentForm.tsx:          <div key={field.id} className="space-y-2">
src/components/media/ModelConsentForm.tsx:          <div key={field.id} className="space-y-2">
src/components/media/ModelConsentForm.tsx:          <div key={field.id} className="space-y-2">
src/components/media/ModelConsentForm.tsx:          <div key={field.id} className="space-y-2">
src/components/media/MediaLibrary.tsx:            key={tag}
src/components/media/MediaLibrary.tsx:            <Card key={i} className="aspect-square animate-pulse bg-muted" />
src/components/media/MediaLibrary.tsx:                key={asset.id}
src/components/media/MediaLibrary.tsx:              key={asset.id}
src/components/media/MediaLibrary.tsx:                          <Badge key={tag} variant="secondary" className="text-xs">
src/components/media/MediaLibrary.tsx:                      <Badge key={tag} variant="secondary">{tag}</Badge>
src/hooks/useBookings.ts:    queryKey: ['bookings', userId],
src/hooks/useBookings.ts:      queryClient.invalidateQueries({ queryKey: ['bookings'] });
src/hooks/useBookings.ts:      queryClient.invalidateQueries({ queryKey: ['bookings'] });
src/hooks/usePaymentSystem.ts:        queryClient.invalidateQueries({ queryKey: ['payment-summary'] });
src/hooks/usePaymentSystem.ts:        queryClient.invalidateQueries({ queryKey: ['payment-plan'] });
src/hooks/usePaymentSystem.ts:        queryClient.invalidateQueries({ queryKey: ['payment-summary'] });
src/hooks/usePaymentSystem.ts:    queryKey: ['payment-plan', paymentPlanId],
src/hooks/usePaymentSystem.ts:        queryClient.invalidateQueries({ queryKey: ['gift-cards'] });
src/hooks/usePaymentSystem.ts:        queryClient.invalidateQueries({ queryKey: ['payment-summary'] });
src/hooks/usePaymentSystem.ts:        queryClient.invalidateQueries({ queryKey: ['gift-cards'] });
src/hooks/usePaymentSystem.ts:    queryKey: ['payment-summary', bookingId],
src/hooks/usePaymentSystem.ts:        queryClient.invalidateQueries({ queryKey: ['loyalty-status', variables.userId] });
src/hooks/usePaymentSystem.ts:        queryClient.invalidateQueries({ queryKey: ['customer-points', variables.userId] });
src/hooks/usePaymentSystem.ts:        queryClient.invalidateQueries({ queryKey: ['loyalty-status', variables.userId] });
src/hooks/usePaymentSystem.ts:        queryClient.invalidateQueries({ queryKey: ['customer-points', variables.userId] });
src/hooks/usePaymentSystem.ts:        queryClient.invalidateQueries({ queryKey: ['available-rewards', variables.userId] });
src/hooks/usePaymentSystem.ts:    queryKey: ['loyalty-status', userId],
src/hooks/usePaymentSystem.ts:    queryKey: ['available-rewards', userId, serviceType],
src/hooks/usePaymentSystem.ts:        queryClient.invalidateQueries({ queryKey: ['loyalty-status', variables.userId] });
src/hooks/usePaymentSystem.ts:        queryClient.invalidateQueries({ queryKey: ['available-rewards', variables.userId] });
src/hooks/usePaymentSystem.ts:        queryClient.invalidateQueries({ queryKey: ['reward-redemptions', variables.userId] });
src/hooks/usePaymentSystem.ts:    queryKey: ['reward-redemptions', userId],
src/hooks/usePaymentSystem.ts:        queryClient.invalidateQueries({ queryKey: ['referral-status', variables.referrerId] });
src/hooks/usePaymentSystem.ts:        queryClient.invalidateQueries({ queryKey: ['referral-status'] });
src/hooks/usePaymentSystem.ts:        queryClient.invalidateQueries({ queryKey: ['loyalty-status'] });
src/hooks/usePaymentSystem.ts:    queryKey: ['referral-status', userId],
src/hooks/usePaymentSystem.ts:    return Object.keys(newErrors).length === 0;
src/hooks/usePaymentSystem.ts:    return Object.keys(newErrors).length === 0;
src/hooks/useAuthState.ts:  signIn: (email: string, password: string) => Promise<{ user: User | null; session: Session | null; error: AuthError | null }>;
src/hooks/useAuthState.ts:  signUp: (email: string, password: string, fullName?: string) => Promise<{ user: User | null; session: Session | null; error: AuthError | null }>;
src/hooks/useAuthState.ts:  resetPassword: (email: string) => Promise<{ error: AuthError | null }>;
src/hooks/useAuthState.ts:  updatePassword: (newPassword: string) => Promise<{ error: AuthError | null }>;
src/hooks/useAuthState.ts:  const signIn = useCallback(async (email: string, password: string) => {
src/hooks/useAuthState.ts:    const result = await authService.signIn({ email, password });
src/hooks/useAuthState.ts:  const signUp = useCallback(async (email: string, password: string, fullName?: string) => {
src/hooks/useAuthState.ts:    const result = await authService.signUp({ email, password, fullName });
src/hooks/useAuthState.ts:  // Reset password
src/hooks/useAuthState.ts:  const resetPassword = useCallback(async (email: string) => {
src/hooks/useAuthState.ts:    return await authService.resetPassword(email);
src/hooks/useAuthState.ts:  // Update password
src/hooks/useAuthState.ts:  const updatePassword = useCallback(async (newPassword: string) => {
src/hooks/useAuthState.ts:    const result = await authService.updatePassword(newPassword);
src/hooks/useAuthState.ts:    resetPassword,
src/hooks/useAuthState.ts:    updatePassword,
src/hooks/useKeyboardNavigation.ts:import { FocusManager, KeyboardNavigation } from '@/utils/accessibility';
src/hooks/useKeyboardNavigation.ts:interface UseKeyboardNavigationOptions {
src/hooks/useKeyboardNavigation.ts:export const useKeyboardNavigation = (
src/hooks/useKeyboardNavigation.ts:  options: UseKeyboardNavigationOptions = {}
src/hooks/useKeyboardNavigation.ts:      cleanupRef.current = KeyboardNavigation.createNavigation(element, {
src/hooks/useKeyboardNavigation.ts:  const handleKeyDown = useCallback((e: KeyboardEvent) => {
src/hooks/useKeyboardNavigation.ts:    switch (e.key) {
src/hooks/useKeyboardNavigation.ts:      container.addEventListener('keydown', handleKeyDown);
src/hooks/useKeyboardNavigation.ts:        container.removeEventListener('keydown', handleKeyDown);
src/hooks/useKeyboardNavigation.ts:  }, [enabled, items, handleKeyDown]);
src/hooks/useKeyboardNavigation.ts:// Hook for escape key handling
src/hooks/useKeyboardNavigation.ts:export const useEscapeKey = (callback: () => void, enabled: boolean = true) => {
src/hooks/useKeyboardNavigation.ts:    const handleEscape = (e: KeyboardEvent) => {
src/hooks/useKeyboardNavigation.ts:      if (e.key === 'Escape') {
src/hooks/useKeyboardNavigation.ts:    document.addEventListener('keydown', handleEscape);
src/hooks/useKeyboardNavigation.ts:      document.removeEventListener('keydown', handleEscape);
src/hooks/useKeyboardNavigation.ts:// Hook for keyboard shortcuts
src/hooks/useKeyboardNavigation.ts:export const useKeyboardShortcuts = (
src/hooks/useKeyboardNavigation.ts:    const handleKeyDown = (e: KeyboardEvent) => {
src/hooks/useKeyboardNavigation.ts:      // Build the key combination string
src/hooks/useKeyboardNavigation.ts:      if (e.ctrlKey || e.metaKey) parts.push('ctrl');
src/hooks/useKeyboardNavigation.ts:      if (e.altKey) parts.push('alt');
src/hooks/useKeyboardNavigation.ts:      if (e.shiftKey) parts.push('shift');
src/hooks/useKeyboardNavigation.ts:      parts.push(e.key.toLowerCase());
src/hooks/useKeyboardNavigation.ts:      const keyCombo = parts.join('+');
src/hooks/useKeyboardNavigation.ts:      const handler = shortcuts[keyCombo];
src/hooks/useKeyboardNavigation.ts:    document.addEventListener('keydown', handleKeyDown);
src/hooks/useKeyboardNavigation.ts:      document.removeEventListener('keydown', handleKeyDown);
src/hooks/useKeyboardNavigation.ts:  const [inputMethod, setInputMethod] = useState<'keyboard' | 'mouse' | 'touch' | 'pen'>('keyboard');
src/hooks/useKeyboardNavigation.ts:    const handleKeyDown = () => setInputMethod('keyboard');
src/hooks/useKeyboardNavigation.ts:    document.addEventListener('keydown', handleKeyDown);
src/hooks/useKeyboardNavigation.ts:      document.removeEventListener('keydown', handleKeyDown);
src/hooks/useOfflineSync.tsx:      queryClient.invalidateQueries({ queryKey: ['bookings'] });
src/hooks/useOfflineSync.tsx:      queryClient.invalidateQueries({ queryKey: ['services'] });
src/hooks/useOfflineSync.tsx:      queryClient.invalidateQueries({ queryKey: ['availability'] });
src/hooks/useServices.ts:  const queryKey = ['services', filters];
src/hooks/useServices.ts:    queryKey,
src/hooks/useServices.ts:  const queryKey = ['service', slug];
src/hooks/useServices.ts:    queryKey,
src/hooks/useServices.ts:  const queryKey = ['service', id];
src/hooks/useServices.ts:    queryKey,
src/hooks/useServices.ts:  const queryKey = ['service-categories', serviceType];
src/hooks/useServices.ts:    queryKey,
src/hooks/useServices.ts:  const queryKey = ['featured-services', serviceType, limit];
src/hooks/useServices.ts:    queryKey,
src/hooks/useServices.ts:  const queryKey = ['related-services', serviceId, limit];
src/hooks/useServices.ts:    queryKey,
src/hooks/useServices.ts:  const queryKey = ['service-search', query, filters];
src/hooks/useServices.ts:    queryKey,
src/hooks/useServices.ts:  const queryKey = ['price-range', serviceType];
src/hooks/useServices.ts:    queryKey,
src/hooks/useServices.ts:  const queryKey = ['infinite-services', filters, pageSize];
src/hooks/useServices.ts:    queryKey,
src/hooks/useAvailability.ts:    queryKey: ['availability-slots', serviceType],
src/hooks/useAvailability.ts:    queryKey: ['bookings-window', serviceType],
src/hooks/useSiteImage.ts:  key: string;
src/hooks/useSiteImage.ts:export const useSiteImage = (key: string) => {
src/hooks/useSiteImage.ts:          .eq('key', key)
src/hooks/useSiteImage.ts:  }, [key]);
src/hooks/useSiteImage.ts:export const useSiteImages = (keys?: string[]) => {
src/hooks/useSiteImage.ts:        if (keys && keys.length > 0) {
src/hooks/useSiteImage.ts:          query = query.in('key', keys);
src/hooks/useSiteImage.ts:  }, [keys?.join(',')]);
src/hooks/useSiteImage.ts:  const getImageByKey = (key: string) => {
src/hooks/useSiteImage.ts:    return images.find(img => img.key === key);
src/hooks/useSiteImage.ts:  return { images, loading, error, getImageByKey };
src/hooks/useSmartScheduling.ts:      queryKey: ['demand-prediction', serviceId, startDate, endDate],
src/hooks/useSmartScheduling.ts:    queryKey: ['service-pattern', serviceId],
src/hooks/useSmartScheduling.ts:    queryKey: ['booking-pattern', customerId],
src/hooks/useAIContent.ts:      queryClient.invalidateQueries({ queryKey: ['ai-generated-content'] });
src/hooks/useAIContent.ts:      queryClient.invalidateQueries({ queryKey: ['ai-generated-content'] });
src/hooks/useAIContent.ts:        - keywords: Suggested keywords to add
src/hooks/useMessaging.ts:  const [messages, setMessages] = useState<{ [key: string]: Message[] }>({});
src/hooks/useMessaging.ts:    for (const [key, value] of Object.entries(variables)) {
src/hooks/useMessaging.ts:      content = content.replace(new RegExp(`{{${key}}}`, 'g'), value);
src/hooks/useBatchAvailability.ts:    queryKey: ['batch-availability', filters],
src/hooks/useServiceDetails.ts:    queryKey: ['service-details', serviceId],
src/hooks/useServiceDetails.ts:    queryKey: ['services-with-details', filters],
src/hooks/useServiceDetails.ts:    queryKey: ['batch-service-details', serviceIds],
src/lib/alerting.ts:      import.meta.env.VITE_SUPABASE_ANON_KEY!
src/lib/alerting.ts:            ${Object.entries(alert.details).map(([key, value]) => `
src/lib/alerting.ts:                <td style="padding: 8px; border-bottom: 1px solid #ddd;">${key}</td>
src/lib/offline-manager.ts:  private CACHE_KEY = 'mariia-offline-cache';
src/lib/offline-manager.ts:  private QUEUE_KEY = 'mariia-offline-queue';
src/lib/offline-manager.ts:          const bookingStore = db.createObjectStore('bookings', { keyPath: 'id' });
src/lib/offline-manager.ts:          const serviceStore = db.createObjectStore('services', { keyPath: 'id' });
src/lib/offline-manager.ts:          const availabilityStore = db.createObjectStore('availability', { keyPath: 'id' });
src/lib/offline-manager.ts:          const queueStore = db.createObjectStore('queue', { keyPath: 'id' });
src/lib/rtl-support.ts:      @keyframes slideInRightRTL {
src/lib/rtl-support.ts:      @keyframes slideInLeftRTL {
src/lib/stripe.ts:    stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY);
src/lib/stripe.ts:    const { clientSecret } = await response.json();
src/lib/stripe.ts:    return clientSecret;
src/lib/stripe.ts:  clientSecret: string,
src/lib/stripe.ts:  const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
src/lib/performance.ts:    for (const key in summary) {
src/lib/performance.ts:      if (summary[key].count > 0) {
src/lib/performance.ts:        summary[key].value = summary[key].value / summary[key].count;
src/lib/sentry.ts:          password: true,
src/lib/sentry.ts:  const bookingKeywords = ['booking', 'appointment', 'slot', 'calendar', 'payment'];
src/lib/sentry.ts:  return bookingKeywords.some(keyword =>
src/lib/sentry.ts:    error.message?.toLowerCase().includes(keyword)
src/lib/sentry.ts:  const errorKey = `${error.name}:${error.message}`;
src/lib/sentry.ts:  const count = errorCount.get(errorKey) || 0;
src/lib/sentry.ts:  errorCount.set(errorKey, count + 1);
src/lib/sentry.ts:        Object.keys(context).forEach(key => {
src/lib/sentry.ts:          scope.setTag(key, context[key]);
src/lib/vat/nip-validation.ts:    // 1. Get API token from Ministry of Finance
src/lib/vat/vat-calculator.ts:    const cacheKey = `${serviceType}-${serviceCategory}`;
src/lib/vat/vat-calculator.ts:    const cached = this.getCachedConfiguration(cacheKey);
src/lib/vat/vat-calculator.ts:      this.cacheConfiguration(cacheKey, configuration);
src/lib/vat/vat-calculator.ts:  private static getCachedConfiguration(key: string): VATConfiguration | null {
src/lib/vat/vat-calculator.ts:    const cached = this.cache.get(key);
src/lib/vat/vat-calculator.ts:    const expiry = this.cacheExpiry.get(key);
src/lib/vat/vat-calculator.ts:  private static cacheConfiguration(key: string, config: VATConfiguration): void {
src/lib/vat/vat-calculator.ts:    this.cache.set(key, config);
src/lib/vat/vat-calculator.ts:    this.cacheExpiry.set(key, Date.now() + this.CACHE_DURATION);
src/lib/redis-cache.ts:    keyPrefix: string;
src/lib/redis-cache.ts:    keyPrefix: 'mariia-hub:',
src/lib/redis-cache.ts:          import.meta.env.VITE_SUPABASE_ANON_KEY!
src/lib/redis-cache.ts:          async get(key: string) {
src/lib/redis-cache.ts:              .eq('key', key)
src/lib/redis-cache.ts:          async set(key: string, value: string, options?: { EX?: number }) {
src/lib/redis-cache.ts:                key,
src/lib/redis-cache.ts:          async del(key: string) {
src/lib/redis-cache.ts:              .eq('key', key);
src/lib/redis-cache.ts:              .like('key', `${CACHE_CONFIG.redis?.keyPrefix || ''}%`);
src/lib/redis-cache.ts:  async get<T = any>(key: string): Promise<T | null> {
src/lib/redis-cache.ts:    const fullKey = this.getFullKey(key);
src/lib/redis-cache.ts:        const value = await this.redisClient.get(fullKey);
src/lib/redis-cache.ts:            await this.delete(key);
src/lib/redis-cache.ts:        const entry = this.fallbackCache.get(fullKey);
src/lib/redis-cache.ts:          this.fallbackCache.delete(fullKey);
src/lib/redis-cache.ts:    key: string,
src/lib/redis-cache.ts:    const fullKey = this.getFullKey(key);
src/lib/redis-cache.ts:        await this.redisClient.set(fullKey, serialized, { EX: ttl });
src/lib/redis-cache.ts:        this.setFallbackCache(fullKey, entry);
src/lib/redis-cache.ts:        this.setFallbackCache(fullKey, entry);
src/lib/redis-cache.ts:  async delete(key: string): Promise<void> {
src/lib/redis-cache.ts:    const fullKey = this.getFullKey(key);
src/lib/redis-cache.ts:        await this.redisClient.del(fullKey);
src/lib/redis-cache.ts:      this.fallbackCache.delete(fullKey);
src/lib/redis-cache.ts:      for (const [key, entry] of this.fallbackCache.entries()) {
src/lib/redis-cache.ts:          this.fallbackCache.delete(key);
src/lib/redis-cache.ts:  async increment(key: string, amount: number = 1): Promise<number> {
src/lib/redis-cache.ts:    const current = await this.get<number>(key) || 0;
src/lib/redis-cache.ts:    await this.set(key, newValue, { ttl: CACHE_CONFIG.redis?.ttl.long });
src/lib/redis-cache.ts:   * Get multiple keys
src/lib/redis-cache.ts:  async mget<T = any>(keys: string[]): Promise<(T | null)[]> {
src/lib/redis-cache.ts:    return Promise.all(keys.map(key => this.get<T>(key)));
src/lib/redis-cache.ts:   * Set multiple keys
src/lib/redis-cache.ts:      entries.map(([key, value]) => this.set(key, value))
src/lib/redis-cache.ts:    key: string,
src/lib/redis-cache.ts:    const cached = await this.get<T>(key);
src/lib/redis-cache.ts:    await this.set(key, data, options);
src/lib/redis-cache.ts:    key: string;
src/lib/redis-cache.ts:    const promises = entries.map(async ({ key, fetcher, options }) => {
src/lib/redis-cache.ts:        await this.set(key, data, options);
src/lib/redis-cache.ts:        console.error(`Cache warming failed for key ${key}:`, error);
src/lib/redis-cache.ts:  private getFullKey(key: string): string {
src/lib/redis-cache.ts:    return `${CACHE_CONFIG.redis?.keyPrefix || 'mariia-hub:'}${key}`;
src/lib/redis-cache.ts:  private setFallbackCache<T>(key: string, entry: CacheEntry<T>): void {
src/lib/redis-cache.ts:      const firstKey = this.fallbackCache.keys().next().value;
src/lib/redis-cache.ts:      if (firstKey) {
src/lib/redis-cache.ts:        this.fallbackCache.delete(firstKey);
src/lib/redis-cache.ts:    this.fallbackCache.set(key, entry);
src/lib/redis-cache.ts:    for (const [key, entry] of this.fallbackCache.entries()) {
src/lib/redis-cache.ts:      totalSize += key.length * 2; // String character size
src/lib/redis-cache.ts:    const key = category ? `services:${category}` : 'services:all';
src/lib/redis-cache.ts:      key,
src/lib/redis-cache.ts:          import.meta.env.VITE_SUPABASE_ANON_KEY!
src/lib/redis-cache.ts:    const key = `availability:${serviceId}:${date}`;
src/lib/redis-cache.ts:      key,
src/lib/redis-cache.ts:          import.meta.env.VITE_SUPABASE_ANON_KEY!
src/lib/redis-cache.ts:    const key = `preferences:${userId}`;
src/lib/redis-cache.ts:      key,
src/lib/redis-cache.ts:          import.meta.env.VITE_SUPABASE_ANON_KEY!
src/lib/redis-cache.ts:    const key = `blog:${limit}`;
src/lib/redis-cache.ts:      key,
src/lib/redis-cache.ts:          import.meta.env.VITE_SUPABASE_ANON_KEY!
src/lib/redis-cache.ts:    const key = `analytics:${type}:${period}`;
src/lib/redis-cache.ts:      key,
src/lib/redis-cache.ts:            key: 'services:all',
src/lib/redis-cache.ts:            key: 'blog:10',
src/lib/__tests__/meta-capi.test.ts:    accessToken: 'test_token',
src/lib/__tests__/meta-capi.test.ts:      expect(Object.keys(hashedData)).toHaveLength(0);
src/lib/__tests__/meta-capi.test.ts:        json: () => Promise.resolve({ error: { message: 'Invalid token' } }),
src/lib/__tests__/meta-capi.test.ts:      await expect(api.sendEvent(event)).rejects.toThrow('Meta CAPI Error: Invalid token');
src/lib/security.ts:    .filter(([key]) => key !== 'upgrade-insecure-requests')
src/lib/security.ts:    .map(([key, value]) => {
src/lib/security.ts:      return `${key.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase())} ${values}`;
src/lib/security.ts:    const key = 'security_session_id';
src/lib/security.ts:    let sessionId = sessionStorage.getItem(key);
src/lib/security.ts:      sessionStorage.setItem(key, sessionId);
src/lib/security.ts:    const key = 'security_events';
src/lib/security.ts:    const events = JSON.parse(localStorage.getItem(key) || '[]');
src/lib/security.ts:    localStorage.setItem(key, JSON.stringify(events));
src/lib/reliability/dependency-monitor.ts:    const checks = Array.from(this.dependencies.keys()).map(name =>
src/lib/reliability/dependency-monitor.ts:    this.metrics.forEach((value, key) => {
src/lib/reliability/dependency-monitor.ts:      result[key] = value;
src/lib/reliability/dependency-monitor.ts:    const depsToMonitor = name ? [name] : Array.from(this.dependencies.keys());
src/lib/reliability/dependency-monitor.ts:    const depsToStop = name ? [name] : Array.from(this.monitoring.keys());
src/lib/reliability/slo-monitor.ts:    for (const sloId of this.slos.keys()) {
src/lib/reliability/slo-monitor.ts:    for (const sloId of this.slos.keys()) {
src/lib/reliability/alerting.ts:        serviceKey: process.env.PAGERDUTY_SERVICE_KEY
src/lib/reliability/recovery-automation.ts:        value = metrics?.[condition.field as keyof typeof metrics];
src/lib/reliability/health-checker.ts:        const testKey = 'health-check';
src/lib/reliability/audit-logger.ts:      'auth.password_reset',
src/lib/reliability/audit-logger.ts:    const sensitive = ['password', 'token', 'secret', 'key', 'credit_card', 'ssn'];
src/lib/reliability/audit-logger.ts:    for (const [key, value] of Object.entries(details)) {
src/lib/reliability/audit-logger.ts:      const isSensitive = sensitive.some(s => key.toLowerCase().includes(s));
src/lib/reliability/audit-logger.ts:      sanitized[key] = isSensitive ? '[REDACTED]' : value;
src/lib/reliability/circuit-breaker.ts:    type: keyof typeof CircuitBreakerFactory.defaultConfigs,
src/lib/reliability/reliability-manager.ts:          total: Object.keys(cbMetrics).length,
src/lib/reliability/retry-manager.ts:  key?: string;
src/lib/reliability/retry-manager.ts:    const key = options.key || this.generateKey(fn.toString());
src/lib/reliability/retry-manager.ts:    const circuitBreaker = this.getCircuitBreaker(key);
src/lib/reliability/retry-manager.ts:      throw new Error(`Circuit breaker is open for ${key}`);
src/lib/reliability/retry-manager.ts:        this.resetAttempts(key);
src/lib/reliability/retry-manager.ts:        console.warn(`Retry attempt ${attempt}/${config.maxAttempts} for ${key}, delay: ${delay}ms`, {
src/lib/reliability/retry-manager.ts:  private generateKey(functionString: string): string {
src/lib/reliability/retry-manager.ts:  private getCircuitBreaker(key: string): CircuitBreaker {
src/lib/reliability/retry-manager.ts:    if (!this.circuitBreakers.has(key)) {
src/lib/reliability/retry-manager.ts:      this.circuitBreakers.set(key, new CircuitBreaker(key));
src/lib/reliability/retry-manager.ts:    return this.circuitBreakers.get(key)!;
src/lib/reliability/retry-manager.ts:  private resetAttempts(key: string): void {
src/lib/reliability/retry-manager.ts:    this.attempts.delete(key);
src/lib/reliability/retry-manager.ts:    this.lastAttempt.delete(key);
src/lib/reliability/retry-manager.ts:      circuitBreakers: Array.from(this.circuitBreakers.entries()).map(([key, cb]) => ({
src/lib/reliability/retry-manager.ts:        key,
src/lib/reliability/retry-manager.ts:  resetCircuitBreaker(key: string): void {
src/lib/reliability/retry-manager.ts:    const cb = this.circuitBreakers.get(key);
src/lib/reliability/retry-manager.ts:  constructor(private readonly key: string) {}
src/lib/reliability/retry-manager.ts:      console.warn(`Circuit breaker OPEN for ${this.key} after ${this.failureCount} failures`);
src/lib/reliability/retry-manager.ts:      key: operation.name
src/lib/reliability/performance-monitor.ts:  metric: keyof PerformanceMetrics;
src/lib/reliability/performance-monitor.ts:  private getMetricValue(metrics: PerformanceMetrics, metric: keyof PerformanceMetrics): number {
src/lib/reliability/performance-monitor.ts:  removeThreshold(metric: keyof PerformanceMetrics): boolean {
src/lib/reliability/performance-monitor.ts:    const headers = Object.keys(data[0]).join(',');
src/lib/reliability/automated-recovery.ts:            const cacheNames = await caches.keys();
src/lib/reliability/error-analyzer.ts:        'invalid token',
src/lib/reliability/error-analyzer.ts:        'expired token',
src/lib/reliability/error-analyzer.ts:      recoveryAction: 'Refresh authentication token or re-authenticate',
src/lib/reliability/error-analyzer.ts:        'duplicate key',
src/lib/reliability/error-analyzer.ts:        'foreign key',
src/lib/reliability/error-analyzer.ts:    const errorKey = this.generateErrorKey(error);
src/lib/reliability/error-analyzer.ts:    const count = (this.errorCounts.get(errorKey) || 0) + 1;
src/lib/reliability/error-analyzer.ts:    this.errorCounts.set(errorKey, count);
src/lib/reliability/error-analyzer.ts:    const timings = this.errorTimings.get(errorKey) || [];
src/lib/reliability/error-analyzer.ts:    this.errorTimings.set(errorKey, timings);
src/lib/reliability/error-analyzer.ts:      for (const [key, value] of Object.entries(pattern.conditions.context)) {
src/lib/reliability/error-analyzer.ts:        if (context[key] === value) {
src/lib/reliability/error-analyzer.ts:        recommendations.push('Refresh access token');
src/lib/reliability/error-analyzer.ts:  private generateErrorKey(error: Error): string {
src/lib/reliability/error-analyzer.ts:    // Create a key for grouping similar errors
src/lib/reliability/error-analyzer.ts:    for (const [key, timings] of this.errorTimings) {
src/lib/reliability/error-analyzer.ts:          message: key,
src/lib/whatsapp-business.ts:  accessToken: string;
src/lib/whatsapp-business.ts:      'Authorization': `Bearer ${this.config.accessToken}`,
src/lib/whatsapp-business.ts:        'Authorization': `Bearer ${this.config.accessToken}`,
src/lib/whatsapp-business.ts:        'Authorization': `Bearer ${this.config.accessToken}`,
src/lib/whatsapp-business.ts:  static verifyWebhook(mode: string, token: string, challenge: string, verifyToken: string) {
src/lib/whatsapp-business.ts:    if (mode === 'subscribe' && token === verifyToken) {
src/lib/whatsapp-business.ts:      accessToken: process.env.WHATSAPP_ACCESS_TOKEN || '',
src/lib/monitoring.ts:      import.meta.env.VITE_SUPABASE_ANON_KEY!
src/lib/monitoring.ts:    ['mousedown', 'keydown', 'scroll', 'touchstart'].forEach(event => {
src/lib/monitoring.ts:          const keys = await cache.keys();
src/lib/monitoring.ts:          this.reportMetric('cacheSize', keys.length);
src/lib/monitoring.ts:    const key = 'session_id';
src/lib/monitoring.ts:    let sessionId = sessionStorage.getItem(key);
src/lib/monitoring.ts:      sessionStorage.setItem(key, sessionId);
src/lib/meta-conversions-api.ts:  accessToken: string;
src/lib/meta-conversions-api.ts:      'Authorization': `Bearer ${this.config.accessToken}`,
src/lib/meta-conversions-api.ts:      for (const [key, time] of this.eventCache.entries()) {
src/lib/meta-conversions-api.ts:          this.eventCache.delete(key);
src/lib/meta-conversions-api.ts:  hashUserData(userData: { [key: string]: string }): { [key: string]: string } {
src/lib/meta-conversions-api.ts:    const hashed: { [key: string]: string } = {};
src/lib/meta-conversions-api.ts:      accessToken: process.env.NEXT_PUBLIC_META_ACCESS_TOKEN || '',
src/lib/meta-conversions-api.ts:  const analytics: { [key: string]: number } = {};
src/lib/cdn-config.ts:    caches.keys()
src/lib/cdn-config.ts:      const cacheNames = await caches.keys();
src/lib/cdn-config.ts:          const requests = await cache.keys();
src/lib/cdn-config.ts:      const cacheNames = await caches.keys();
src/lib/cdn-config.ts:        const requests = await cache.keys();
src/lib/cdn-config.ts:    const requests = await cache.keys();
src/lib/i18n-utils.ts:    testKey: translationValidation.testKey,
src/lib/i18n-utils.ts:  return i18nValidator.generateMissingKeys(language);
src/lib/i18n-utils.ts:  formatBusinessHours(hours: { [key: string]: string }) {
src/lib/i18n-utils.ts:    hours?: { [key: string]: string };
src/lib/i18n-utils.ts:  private getTranslation(key: string, params?: Record<string, any>): string {
src/lib/i18n-utils.ts:    return key;
src/lib/i18n-utils.ts:export function trackTranslationUsage(key: string, language: string) {
src/lib/i18n-utils.ts:  // Track which translation keys are used
src/lib/i18n-utils.ts:      translation_key: key,
src/lib/health-check.ts:    [key: string]: HealthCheck;
src/lib/health-check.ts:      import.meta.env.VITE_SUPABASE_ANON_KEY!
src/lib/health-check.ts:    const checks: { [key: string]: HealthCheck } = {};
src/lib/health-check.ts:      Object.entries(checks).forEach(([key, check]) => {
src/lib/health-check.ts:        this.lastResults.set(key, check);
src/lib/health-check.ts:      if (error && error.message !== 'Invalid Refresh Token') {
src/lib/health-check.ts:      const stripeKey = import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY;
src/lib/health-check.ts:      if (!stripeKey) {
src/lib/health-check.ts:          stripeConfigured: !!stripeKey,
src/lib/health-check.ts:  private calculateOverallHealth(checks: { [key: string]: HealthCheck }) {
src/lib/health-check.ts:      Object.entries(results.checks).forEach(([key, check]) => {
src/lib/health-check.ts:        monitoringService.trackMetric(`health_${key.toLowerCase()}`, check.score, {
src/lib/seo/urlManager.tsx:      urlObj.searchParams.forEach((value, key) => {
src/lib/seo/urlManager.tsx:        params[key] = value;
src/lib/seo/slugGenerator.ts:    Object.keys(translations).forEach(lang => {
src/lib/seo/slugGenerator.ts:    Object.entries(params).forEach(([key, value]) => {
src/lib/seo/slugGenerator.ts:        searchParams.append(key, value);
src/lib/automation-engine.ts:      for (const [key, value] of Object.entries(variables)) {
src/lib/automation-engine.ts:        const actualValue = this.getVariableValue(key, context);
src/lib/automation-engine.ts:        content = content.replace(new RegExp(`{{${key}}}`, 'g'), String(actualValue));
src/lib/automation-engine.ts:  private getVariableValue(key: string, context: AutomationContext): any {
src/lib/automation-engine.ts:    switch (key) {
src/lib/automation-engine.ts:        return this.getNestedValue(context, key);
src/lib/automation-engine.ts:    return path.split('.').reduce((current, key) => current?.[key], obj);
src/lib/automation-engine.ts:      const key = value.slice(2, -2);
src/lib/automation-engine.ts:      return this.getVariableValue(key, context);
src/lib/email-templates.ts:import { TranslationKeys } from './i18n/types';
src/lib/email-templates.ts:  const lang = language in emailTemplates ? language as keyof LocalizedTemplates : 'en';
src/lib/email-templates.ts:  const lang = language in emailTemplates ? language as keyof LocalizedTemplates : 'en';
src/lib/email-templates.ts:  const locale = dateLocales[language as keyof typeof dateLocales] || 'en-GB';
src/lib/email-templates.ts:  const locale = dateLocales[language as keyof typeof dateLocales] || 'en-GB';
src/lib/email-templates.ts:  const unit = units[language as keyof typeof units] || 'minutes';
src/lib/translations/TranslationMemory.tsx:    const cacheKey = `${sourceLang}-${targetLang}-${text}`;
src/lib/translations/TranslationMemory.tsx:    if (this.cache.has(cacheKey)) {
src/lib/translations/TranslationMemory.tsx:      const cached = this.cache.get(cacheKey)!;
src/lib/translations/TranslationMemory.tsx:      this.cache.set(cacheKey, data || []);
src/lib/date-localization.ts:    return labels[this.config.code as keyof typeof labels] || 'hours';
src/lib/date-localization.ts:    return labels[this.config.code as keyof typeof labels] || 'minutes';
src/lib/date-localization.ts:  formatBusinessHours(hours: { [key: string]: string }): string {
src/lib/date-localization.ts:      .map(([day, time]) => `${dayNames[day as keyof typeof dayNames]}: ${time}`)
src/lib/i18n-validation.ts:export interface TranslationKey {
src/lib/i18n-validation.ts:  missingKeys: MissingKey[];
src/lib/i18n-validation.ts:  key: string;
src/lib/i18n-validation.ts:  key: string;
src/lib/i18n-validation.ts:export interface MissingKey {
src/lib/i18n-validation.ts:  key: string;
src/lib/i18n-validation.ts:  totalKeys: number;
src/lib/i18n-validation.ts:  translatedKeys: { [language: string]: number };
src/lib/i18n-validation.ts:  averageKeyLength: { [language: string]: number };
src/lib/i18n-validation.ts:    const baseTranslations = this.languages[this.baseLanguage as keyof typeof this.languages];
src/lib/i18n-validation.ts:    const baseKeys = this.getAllKeys(baseTranslations, []);
src/lib/i18n-validation.ts:    const missingKeys: MissingKey[] = [];
src/lib/i18n-validation.ts:      totalKeys: baseKeys.length,
src/lib/i18n-validation.ts:      translatedKeys: {},
src/lib/i18n-validation.ts:      averageKeyLength: {},
src/lib/i18n-validation.ts:      const langKeys = this.getAllKeys(translations, []);
src/lib/i18n-validation.ts:      const langKeyPaths = new Set(langKeys.map(k => k.path.join('.')));
src/lib/i18n-validation.ts:      // Check for missing keys
src/lib/i18n-validation.ts:      baseKeys.forEach(baseKey => {
src/lib/i18n-validation.ts:        const keyPath = baseKey.path.join('.');
src/lib/i18n-validation.ts:        const langValue = this.getNestedValue(translations, baseKey.path);
src/lib/i18n-validation.ts:          missingKeys.push({
src/lib/i18n-validation.ts:            key: keyPath,
src/lib/i18n-validation.ts:            referenceValue: baseKey.value,
src/lib/i18n-validation.ts:            key: keyPath,
src/lib/i18n-validation.ts:            message: `Missing translation for key: ${keyPath}`,
src/lib/i18n-validation.ts:          if (typeof langValue !== typeof baseKey.value) {
src/lib/i18n-validation.ts:              key: keyPath,
src/lib/i18n-validation.ts:              message: `Type mismatch: expected ${typeof baseKey.value}, got ${typeof langValue}`,
src/lib/i18n-validation.ts:              key: keyPath,
src/lib/i18n-validation.ts:              message: `Empty translation for key: ${keyPath}`,
src/lib/i18n-validation.ts:          if (typeof langValue === 'string' && typeof baseKey.value === 'string') {
src/lib/i18n-validation.ts:            const basePlaceholders = this.extractPlaceholders(baseKey.value);
src/lib/i18n-validation.ts:                key: keyPath,
src/lib/i18n-validation.ts:          if (typeof langValue === 'string' && typeof baseKey.value === 'string') {
src/lib/i18n-validation.ts:            if (langValue === baseKey.value && lang.length > 5) {
src/lib/i18n-validation.ts:                key: keyPath,
src/lib/i18n-validation.ts:              key: keyPath,
src/lib/i18n-validation.ts:              key: keyPath,
src/lib/i18n-validation.ts:      // Check for extra keys in translation
src/lib/i18n-validation.ts:      langKeys.forEach(langKey => {
src/lib/i18n-validation.ts:        const keyPath = langKey.path.join('.');
src/lib/i18n-validation.ts:        if (!baseKeys.some(baseKey => baseKey.path.join('.') === keyPath)) {
src/lib/i18n-validation.ts:            key: keyPath,
src/lib/i18n-validation.ts:            message: `Extra key not found in base language: ${keyPath}`,
src/lib/i18n-validation.ts:      stats.translatedKeys[lang] = translatedCount;
src/lib/i18n-validation.ts:      stats.completionPercentage[lang] = Math.round((translatedCount / baseKeys.length) * 100);
src/lib/i18n-validation.ts:      stats.averageKeyLength[lang] = Math.round(totalLength / translatedCount);
src/lib/i18n-validation.ts:    const baseLength = baseKeys.reduce((acc, key) =>
src/lib/i18n-validation.ts:      acc + (typeof key.value === 'string' ? key.value.length : 0), 0
src/lib/i18n-validation.ts:    stats.translatedKeys[this.baseLanguage] = baseKeys.length;
src/lib/i18n-validation.ts:    stats.averageKeyLength[this.baseLanguage] = Math.round(baseLength / baseKeys.length);
src/lib/i18n-validation.ts:      missingKeys,
src/lib/i18n-validation.ts:   * Get all translation keys recursively
src/lib/i18n-validation.ts:  private getAllKeys(obj: any, path: string[]): TranslationKey[] {
src/lib/i18n-validation.ts:    const keys: TranslationKey[] = [];
src/lib/i18n-validation.ts:    if (obj === null || obj === undefined) return keys;
src/lib/i18n-validation.ts:      Object.entries(obj).forEach(([key, value]) => {
src/lib/i18n-validation.ts:        const currentPath = [...path, key];
src/lib/i18n-validation.ts:          keys.push(...this.getAllKeys(value, currentPath));
src/lib/i18n-validation.ts:          keys.push({
src/lib/i18n-validation.ts:          keys.push(...this.getAllKeys(item, currentPath));
src/lib/i18n-validation.ts:          keys.push({
src/lib/i18n-validation.ts:      keys.push({
src/lib/i18n-validation.ts:    return keys;
src/lib/i18n-validation.ts:    return path.reduce((current, key) => current?.[key], obj);
src/lib/i18n-validation.ts:   * Check if translation keys are properly structured
src/lib/i18n-validation.ts:            key: section,
src/lib/i18n-validation.ts:    report += `Total translation keys: ${validation.stats.totalKeys}\n\n`;
src/lib/i18n-validation.ts:      const translated = validation.stats.translatedKeys[lang];
src/lib/i18n-validation.ts:      const avgLength = validation.stats.averageKeyLength[lang];
src/lib/i18n-validation.ts:      report += `${flag} ${lang.toUpperCase()}: ${percentage}% (${translated}/${validation.stats.totalKeys} keys, avg: ${avgLength} chars)\n`;
src/lib/i18n-validation.ts:        report += `  • ${error.language.toUpperCase()}: ${error.key} - ${error.message}\n`;
src/lib/i18n-validation.ts:        report += `  • ${warning.language.toUpperCase()}: ${warning.key} - ${warning.message}\n`;
src/lib/i18n-validation.ts:    return flags[language as keyof typeof flags] || '🌐';
src/lib/i18n-validation.ts:  testInterpolation(key: string, values: Record<string, any>): { [language: string]: string } {
src/lib/i18n-validation.ts:        const template = this.getNestedValue(translations, key.split('.'));
src/lib/i18n-validation.ts:    return template.replace(/\{\{([^}]+)\}\}/g, (match, key) => {
src/lib/i18n-validation.ts:      return values[key.trim()] !== undefined ? String(values[key.trim()]) : match;
src/lib/i18n-validation.ts:   * Generate missing translation keys for a language
src/lib/i18n-validation.ts:  generateMissingKeys(language: string): { [key: string]: any } {
src/lib/i18n-validation.ts:    const baseTranslations = this.languages[this.baseLanguage as keyof typeof this.languages];
src/lib/i18n-validation.ts:    const targetTranslations = this.languages[language as keyof typeof this.languages];
src/lib/i18n-validation.ts:    const missing: { [key: string]: any } = {};
src/lib/i18n-validation.ts:      Object.entries(base).forEach(([key, value]) => {
src/lib/i18n-validation.ts:        const fullKey = prefix ? `${prefix}.${key}` : key;
src/lib/i18n-validation.ts:          if (!target[key]) {
src/lib/i18n-validation.ts:            missing[fullKey] = {};
src/lib/i18n-validation.ts:          processObject(value, target[key] || {}, fullKey);
src/lib/i18n-validation.ts:          if (target[key] === undefined) {
src/lib/i18n-validation.ts:            missing[fullKey] = value; // Copy base value as placeholder
src/lib/i18n-validation.ts:export function getMissingTranslations(language: string): { [key: string]: any } {
src/lib/i18n-validation.ts:  return i18nValidator.generateMissingKeys(language);
src/lib/i18n-validation.ts:export function testTranslationKey(key: string, values: Record<string, any>): { [language: string]: string } {
src/lib/i18n-validation.ts:  return i18nValidator.testInterpolation(key, values);
src/lib/i18n-validation.ts:    testKey: testTranslationKey,
src/lib/invoice/invoice-generator.ts:    return labels[method as keyof typeof labels] || method;
src/pages/Index.tsx:        keywords="PMU Warsaw, brow lamination Warsaw, glute program women, personal trainer Warsaw, makijaż permanentny Warszawa, laminacja brwi Warszawa, trening pośladków, trener personalny Warszawa"
src/pages/Gallery.tsx:        keywords="photo gallery Warsaw, beauty photos, fitness results, microblading before after, makeup portfolio"
src/pages/Gallery.tsx:                  key={image.id}
src/pages/Gallery.tsx:                    key={category.id}
src/pages/Gallery.tsx:                <div key={i} className="aspect-square bg-muted/20 rounded-2xl animate-pulse" />
src/pages/Gallery.tsx:                      key={image.id}
src/pages/Gallery.tsx:                      key={image.id}
src/pages/Auth.tsx:  const [password, setPassword] = useState("");
src/pages/Auth.tsx:  const [showPassword, setShowPassword] = useState(false);
src/pages/Auth.tsx:        const { error } = await supabase.auth.signInWithPassword({
src/pages/Auth.tsx:          password,
src/pages/Auth.tsx:          password,
src/pages/Auth.tsx:              <label htmlFor="password" className="block text-xs text-pearl/70 uppercase tracking-wider">
src/pages/Auth.tsx:                {t('auth.password')}
src/pages/Auth.tsx:                  id="password"
src/pages/Auth.tsx:                  type={showPassword ? "text" : "password"}
src/pages/Auth.tsx:                  value={password}
src/pages/Auth.tsx:                  onChange={(e) => setPassword(e.target.value)}
src/pages/Auth.tsx:                  placeholder={t('auth.passwordPlaceholder')}
src/pages/Auth.tsx:                  onClick={() => setShowPassword(!showPassword)}
src/pages/Auth.tsx:                  {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
src/pages/AftercareInstructions.tsx:        keywords="aftercare, post-treatment care, beauty, fitness, recovery, healing"
src/pages/AftercareInstructions.tsx:          <section key={category.id} className="pb-20">
src/pages/AftercareInstructions.tsx:                  <div key={idx} className="glass-card p-6 rounded-3xl border border-champagne/20 hover:border-champagne/40 transition-all duration-300">
src/pages/AftercareInstructions.tsx:                        <li key={itemIdx} className="flex items-start gap-3">
src/pages/BeautyServiceDetail.tsx:                  <div key={image.id} className="relative aspect-square overflow-hidden rounded-2xl group">
src/pages/BeautyServiceDetail.tsx:                    <div key={idx} className="flex items-start gap-3 card-feature p-4">
src/pages/BeautyServiceDetail.tsx:                      <div key={idx} className="flex items-start gap-3 card-feature p-4">
src/pages/BeautyServiceDetail.tsx:                      <li key={idx}>• {item}</li>
src/pages/BeautyServiceDetail.tsx:                  <div key={review.id} className="card-testimonial hover-lift h-full">
src/pages/BeautyServiceDetail.tsx:                          key={i}
src/pages/BeautyServiceDetail.tsx:                  <AccordionItem key={faq.id} value={faq.id} className="bg-muted/30 rounded-lg px-6">
src/pages/BeautyBrowsCategory.tsx:              <div key={i} className="h-full">
src/pages/BeautyBrowsCategory.tsx:        keywords="microblading Warszawa, ombre brows, laminacja brwi, stylizacja brwi, PMU brows"
src/pages/BeautyBrowsCategory.tsx:                key={category.id}
src/pages/BeautyBrowsCategory.tsx:                key={index}
src/pages/BeautyBrowsCategory.tsx:                  key={service.id}
src/pages/LandingBeautyBrows.tsx:                    <div key={idx} className="flex items-start gap-2">
src/pages/LandingBeautyBrows.tsx:                <AccordionItem key={idx} value={`item-${idx}`}>
src/pages/Maintenance.tsx:        keywords="maintenance, technical break, update, improvement"
src/pages/Maintenance.tsx:              <div key={idx} className="glass-card p-6 rounded-3xl border border-champagne/20 text-center">
src/pages/Maintenance.tsx:                <div key={idx} className="flex items-center gap-4">
src/pages/PrivacyPolicy.tsx:        keywords="privacy policy, data protection, GDPR compliance, personal data, privacy rights"
src/pages/BusinessServices.tsx:        keywords="corporate wellness Warsaw, team building, B2B services, corporate gifts, employee benefits"
src/pages/BusinessServices.tsx:                key={service.id}
src/pages/BusinessServices.tsx:                    <div key={idx} className="flex items-center gap-3">
src/pages/BusinessServices.tsx:                key={index}
src/pages/BusinessServices.tsx:                key={index}
src/pages/BusinessServices.tsx:                      <option key={service.id} value={service.id}>
src/pages/Dashboard.tsx:                    <Card key={booking.id} className="hover-scale">
src/pages/Dashboard.tsx:                      <div key={service.id} className="relative">
src/pages/Beauty.tsx:        keywords="makijaż permanentny ust, makijaż permanentny brwi, laminacja rzęs, stylizacja brwi, PMU Warsaw"
src/pages/Beauty.tsx:                  key={service.id}
src/pages/Beauty.tsx:                <div key={index} className="card-service group stagger-children" style={{ animationDelay: `${index * 150}ms` }}>
src/pages/BeautyServices.tsx:              <div key={i} className="h-full">
src/pages/BeautyServices.tsx:        keywords="makijaż permanentny Warszawa, stylizacja brwi, laminacja rzęs, PMU Warsaw"
src/pages/BeautyServices.tsx:                  key={cat.id}
src/pages/BeautyServices.tsx:                  key={service.id}
src/pages/CookiePolicy.tsx:        keywords="cookie policy, cookies, privacy, tracking, GDPR compliance"
src/pages/CookiePolicy.tsx:                      <li>• {i18n.language === 'pl' ? "csrf_token – ochrona przed atakami CSRF" : i18n.language === 'en' ? "csrf_token – protection against CSRF attacks" : i18n.language === 'ua' ? "csrf_token – захист від CSRF атак" : "csrf_token – защита от CSRF атак"}</li>
src/pages/CookiePolicy.tsx:                      <li>• {i18n.language === 'pl' ? "auth_token – uwierzytelnienie użytkownika" : i18n.language === 'en' ? "auth_token – user authentication" : i18n.language === 'ua' ? "auth_token – автентифікація користувача" : "auth_token – аутентификация пользователя"}</li>
src/pages/TreatmentGuidelines.tsx:        keywords="treatment guidelines, preparation, aftercare, beauty, fitness"
src/pages/TreatmentGuidelines.tsx:        {Object.entries(guidelines).map(([key, section]) => (
src/pages/TreatmentGuidelines.tsx:          <section key={key} className="pb-20">
src/pages/TreatmentGuidelines.tsx:                  <div key={idx} className="glass-card p-8 rounded-3xl border border-champagne/20">
src/pages/TreatmentGuidelines.tsx:                        <li key={itemIdx} className="flex items-start gap-3">
src/pages/Cancel.tsx:  const token = searchParams.get('token');
src/pages/Cancel.tsx:      if (!token) {
src/pages/Cancel.tsx:      const { data, error } = await supabase.functions.invoke('cancel-booking', { body: { token } });
src/pages/Cancel.tsx:  }, [token, navigate]);
src/pages/TermsOfService.tsx:        keywords="terms of service, legal terms, conditions, agreement, policies"
src/pages/LandingBeautyLips.tsx:                <Card key={idx}>
src/pages/LandingBeautyLips.tsx:                <div key={idx} className="flex items-center gap-3 p-4 bg-background rounded-lg">
src/pages/LandingBeautyLips.tsx:                <AccordionItem key={idx} value={`item-${idx}`}>
src/pages/Blog.tsx:        keywords="PMU aftercare, gentle training fundamentals, Warsaw fitness guide, beauty tips"
src/pages/Blog.tsx:                <BlogPostSkeleton key={i} />
src/pages/Blog.tsx:                <Link key={post.id} to={`/blog/${post.slug}`}>
src/pages/BeautyMakeupCategory.tsx:              <div key={i} className="h-full">
src/pages/BeautyMakeupCategory.tsx:        keywords="makijaż Warszawa, makijaż ślubny, makeup artist Warsaw, profesjonalny makijaż"
src/pages/BeautyMakeupCategory.tsx:                key={category.id}
src/pages/BeautyMakeupCategory.tsx:                key={index}
src/pages/BeautyMakeupCategory.tsx:                key={index}
src/pages/BeautyMakeupCategory.tsx:                  key={service.id}
src/pages/Aftercare.tsx:        const key = row.services?.service_type || 'general';
src/pages/Aftercare.tsx:        aggregated[key] = [...(aggregated[key]||[]), ...list];
src/pages/Aftercare.tsx:                <section key={idx} className="bg-muted/30 rounded-2xl p-6">
src/pages/Aftercare.tsx:                    {sec.items.map((it, i) => (<li key={i}>{it}</li>))}
src/pages/GDPRCompliance.tsx:        keywords="GDPR, data protection, privacy rights, EU regulations, personal data, compliance"
src/pages/GDPRCompliance.tsx:                key={index}
src/pages/GDPRCompliance.tsx:                  key={index}
src/pages/FitnessProgramDetail.tsx:                  <div key={image.id} className="relative aspect-square overflow-hidden rounded-2xl">
src/pages/FitnessProgramDetail.tsx:                    <div key={idx} className="flex items-start gap-3 card-feature p-4">
src/pages/FitnessProgramDetail.tsx:                  <div key={idx} className="flex items-start gap-3 card-feature p-4">
src/pages/FitnessProgramDetail.tsx:                  <div key={review.id} className="card-testimonial hover-lift h-full">
src/pages/FitnessProgramDetail.tsx:                          key={i}
src/pages/FitnessProgramDetail.tsx:                  <AccordionItem key={faq.id} value={faq.id} className="bg-muted/30 rounded-lg px-6">
src/pages/Packages.tsx:        keywords="packages Warsaw, beauty deals, fitness packages, microblading package, personal training package, special offers"
src/pages/Packages.tsx:                key={index}
src/pages/Packages.tsx:                key={category.id}
src/pages/Packages.tsx:                key={pkg.id}
src/pages/Packages.tsx:                    <div key={idx} className="flex items-start gap-3">
src/pages/Packages.tsx:                key={index}
src/pages/LandingFitnessGlutes.tsx:                    <div key={idx} className="flex items-start gap-3">
src/pages/LandingFitnessGlutes.tsx:                <AccordionItem key={idx} value={`item-${idx}`}>
src/pages/Portfolio.tsx:                <button key={f} onClick={() => setFilter(f)} className={`px-4 py-2 rounded-full border ${filter===f?"bg-primary text-primary-foreground border-primary":"hover:bg-accent"}`}>
src/pages/Portfolio.tsx:                <div key={img.id} className="relative aspect-square overflow-hidden rounded-2xl group">
src/pages/Error404.tsx:        keywords="404, page not found, error, lost page"
src/pages/RefundPolicy.tsx:        keywords="refund policy, returns, money back, cancellation, service refunds"
src/pages/GiftCards.tsx:        keywords="gift cards Warsaw, voucher beauty, bon podarunkowy, prezent urodzinowy, karta podarunkowa"
src/pages/GiftCards.tsx:                key={index}
src/pages/LandingFitnessStarter.tsx:                <div key={idx} className="flex items-start gap-3 p-4 bg-background rounded-lg">
src/pages/LandingFitnessStarter.tsx:                <Card key={idx}>
src/pages/FAQ.tsx:        keywords="FAQ, questions, answers, beauty, fitness, booking, policies"
src/pages/FAQ.tsx:                key={category.id}
src/pages/FAQ.tsx:                key={item.id}
src/pages/ReviewsPage.tsx:  rating_distribution: { [key: number]: number };
src/pages/ReviewsPage.tsx:      const distribution = reviews.reduce((acc: { [key: number]: number }, r) => {
src/pages/ReviewsPage.tsx:            key={star}
src/pages/ReviewsPage.tsx:        keywords="customer reviews, testimonials, beauty reviews, fitness reviews, Warsaw"
src/pages/ReviewsPage.tsx:                      <div key={rating} className="flex items-center gap-3">
src/pages/ReviewsPage.tsx:                            <SelectItem key={service.id} value={service.id}>
src/pages/ReviewsPage.tsx:                        key={review.id}
src/pages/Fitness.tsx:        keywords="glute workout women, anti-rotation core, posture mobility desk, program pośladki 8 tygodni, brzuch core anty-rotacja"
src/pages/Fitness.tsx:                  key={program.id}
src/pages/Reviews.tsx:                <button key={f} onClick={() => setFilter(f)} className={`px-4 py-2 rounded-full border ${filter===f?"bg-primary text-primary-foreground border-primary":"hover:bg-accent"}`}>
src/pages/Reviews.tsx:                <div key={r.id} className="bg-muted/30 rounded-2xl p-6 hover:shadow-lg transition-shadow">
src/pages/Reviews.tsx:                      <Star key={i} className={`w-4 h-4 ${i < (r.rating || 0) ? 'fill-primary text-primary' : 'text-muted-foreground'}`} />
src/pages/DemoSEO.tsx:        keywords="SEO, translation, i18n, structured data, hreflang"
src/pages/DemoSEO.tsx:                        <div key={lang} className="flex items-center gap-2">
src/pages/Reschedule.tsx:  const token = searchParams.get('token');
src/pages/Reschedule.tsx:      if (!token) {
src/pages/Reschedule.tsx:        .eq('reschedule_token', token)
src/pages/Reschedule.tsx:  }, [token, navigate, toast]);
src/pages/Reschedule.tsx:    if (!token || !selectedDate || !selectedTime) return;
src/pages/Reschedule.tsx:      body: { token, newDateTime }
src/pages/Reschedule.tsx:              Array.from({ length: 9 }).map((_, i) => <div key={i} className="h-10 bg-muted rounded" />)
src/pages/Reschedule.tsx:                  key={`${s.time.toISOString()}-${s.location}`}
src/pages/FitnessPrograms.tsx:              <div key={i} className="h-full">
src/pages/FitnessPrograms.tsx:        keywords="program pośladki 8 tygodni, brzuch core anty-rotacja, mobilność biurowa, glute program women, Warsaw fitness"
src/pages/FitnessPrograms.tsx:                  key={program.slug}
src/routes/api/index.ts:  const key = `rate-limit:${c.req.header('x-forwarded-for') || 'unknown'}`;
src/services/batchService.ts:    batchKey: string,
src/services/batchService.ts:      const batch = this.pendingBatches.get(batchKey) || [];
src/services/batchService.ts:      this.pendingBatches.set(batchKey, batch);
src/services/batchService.ts:        const timer = this.batchTimers.get(batchKey);
src/services/batchService.ts:          this.batchTimers.delete(batchKey);
src/services/batchService.ts:        this.executeBatch(batchKey);
src/services/batchService.ts:        if (!this.batchTimers.has(batchKey)) {
src/services/batchService.ts:            this.executeBatch(batchKey);
src/services/batchService.ts:          this.batchTimers.set(batchKey, timer);
src/services/batchService.ts:  private async executeBatch(batchKey: string): Promise<void> {
src/services/batchService.ts:    const batch = this.pendingBatches.get(batchKey);
src/services/batchService.ts:    const timer = this.batchTimers.get(batchKey);
src/services/batchService.ts:      this.batchTimers.delete(batchKey);
src/services/batchService.ts:    this.pendingBatches.delete(batchKey);
src/services/batchService.ts:  async preloadData(requests: Array<{ key: string; endpoint: string }>): Promise<void> {
src/services/batchService.ts:      id: r.key,
src/services/batchService.ts:  cancelBatch(batchKey: string): void {
src/services/batchService.ts:    const timer = this.batchTimers.get(batchKey);
src/services/batchService.ts:      this.batchTimers.delete(batchKey);
src/services/batchService.ts:    const batch = this.pendingBatches.get(batchKey);
src/services/batchService.ts:      this.pendingBatches.delete(batchKey);
src/services/batchService.ts:  getBatchStatus(batchKey: string): {
src/services/batchService.ts:    const batch = this.pendingBatches.get(batchKey);
src/services/batchService.ts:    const timer = this.batchTimers.has(batchKey);
src/services/batchService.ts:    async (batchKey: string, request: BatchRequest) => {
src/services/batchService.ts:        return await batchService.addToBatch(batchKey, request);
src/services/cqrsService.ts:      const cacheKey = this.getQueryCacheKey(query);
src/services/cqrsService.ts:      const cached = await this.getFromCache(cacheKey);
src/services/cqrsService.ts:      await this.setCache(cacheKey, result, this.getCacheTTL(query.type));
src/services/cqrsService.ts:    const cacheKey = `availability:${serviceId}:${date}:${location}`;
src/services/cqrsService.ts:    const cached = await cacheService.get(cacheKey);
src/services/cqrsService.ts:    await cacheService.set(cacheKey, result, 300); // 5 minutes
src/services/cqrsService.ts:    const cacheKey = `calendar:${serviceType || 'all'}:${startDate}:${endDate}:${view}`;
src/services/cqrsService.ts:    const cached = await cacheService.get(cacheKey);
src/services/cqrsService.ts:    await cacheService.set(cacheKey, data, 900); // 15 minutes
src/services/cqrsService.ts:      supabase.from('booking_stats').select('value').eq('key', 'total_bookings').single(),
src/services/cqrsService.ts:      supabase.from('booking_stats').select('value').eq('key', 'pending_bookings').single(),
src/services/cqrsService.ts:      supabase.from('booking_stats').select('value').eq('key', 'confirmed_bookings').single(),
src/services/cqrsService.ts:      supabase.from('booking_stats').select('value').eq('key', 'completed_bookings').single(),
src/services/cqrsService.ts:      supabase.from('booking_stats').select('value').eq('key', 'cancelled_bookings').single(),
src/services/cqrsService.ts:      supabase.from('booking_stats').select('value').eq('key', 'total_revenue').single(),
src/services/cqrsService.ts:  private getQueryCacheKey(query: Query): string {
src/services/cqrsService.ts:  private async getFromCache(key: string): Promise<any | null> {
src/services/cqrsService.ts:    return cacheService.get(key);
src/services/cqrsService.ts:  private async setCache(key: string, value: any, ttl: number): Promise<void> {
src/services/cqrsService.ts:    await cacheService.set(key, value, ttl);
src/services/PricingService.ts:    [key: string]: number | undefined;
src/services/auth.service.ts:  password: string;
src/services/auth.service.ts:  // Sign in with email and password
src/services/auth.service.ts:  async signIn({ email, password }: SignInCredentials): Promise<{ user: User | null; session: Session | null; error: AuthError | null }> {
src/services/auth.service.ts:      const { data, error } = await supabase.auth.signInWithPassword({
src/services/auth.service.ts:        password,
src/services/auth.service.ts:  // Sign up with email and password
src/services/auth.service.ts:  async signUp({ email, password, fullName }: SignUpCredentials): Promise<{ user: User | null; session: Session | null; error: AuthError | null }> {
src/services/auth.service.ts:        password,
src/services/auth.service.ts:  // Reset password
src/services/auth.service.ts:  async resetPassword(email: string): Promise<{ error: AuthError | null }> {
src/services/auth.service.ts:      const { error } = await supabase.auth.resetPasswordForEmail(email, {
src/services/auth.service.ts:        redirectTo: `${window.location.origin}/auth/reset-password`,
src/services/auth.service.ts:        message: 'An unexpected error occurred during password reset',
src/services/auth.service.ts:  // Update password
src/services/auth.service.ts:  async updatePassword(newPassword: string): Promise<{ error: AuthError | null }> {
src/services/auth.service.ts:        password: newPassword,
src/services/auth.service.ts:        message: 'An unexpected error occurred during password update',
src/services/LocationService.ts:  private static readonly IPINFO_TOKEN = process.env.VITE_IPINFO_TOKEN;
src/services/LocationService.ts:  private static readonly CACHE_KEY = 'user_location';
src/services/LocationService.ts:      const response = await fetch(`https://ipinfo.io/json?token=${this.IPINFO_TOKEN}`);
src/services/LocationService.ts:      localStorage.setItem(this.CACHE_KEY, JSON.stringify(cacheData));
src/services/LocationService.ts:      const cached = localStorage.getItem(this.CACHE_KEY);
src/services/LocationService.ts:        localStorage.removeItem(this.CACHE_KEY);
src/services/LocationService.ts:    localStorage.removeItem(this.CACHE_KEY);
src/services/websocketService.ts:  private authToken: string | null = null;
src/services/websocketService.ts:  async connect(authToken: string): Promise<void> {
src/services/websocketService.ts:    this.authToken = authToken;
src/services/websocketService.ts:          token: authToken,
src/services/websocketService.ts:      if (this.authToken && !this.socket?.connected) {
src/services/websocketService.ts:          await this.connect(this.authToken);
src/services/websocketService.ts:  on<T extends keyof WebSocketEvents>(
src/services/websocketService.ts:  private emit<T extends keyof WebSocketEvents>(
src/services/websocketService.ts:  send<T extends keyof WebSocketEvents>(
src/services/websocketService.ts:        const token = await user.getIdToken();
src/services/websocketService.ts:        await webSocketService.connect(token);
src/services/websocketService.ts:  const subscribe = useCallback(<T extends keyof WebSocketEvents>(
src/services/websocketService.ts:  const send = useCallback(<T extends keyof WebSocketEvents>(
src/services/apiGateway.ts:      Object.entries(params).forEach(([key, value]) => {
src/services/apiGateway.ts:          url.searchParams.append(key, String(value));
src/services/apiGateway.ts:      const cacheKey = url.toString();
src/services/apiGateway.ts:      const cached = await cacheService.get(cacheKey);
src/services/apiGateway.ts:      const cacheKey = `slots:${serviceId}:${date}:${location || 'studio'}`;
src/services/apiGateway.ts:      const cached = await cacheService.get(cacheKey);
src/services/apiGateway.ts:        await cacheService.set(cacheKey, response, 300);
src/services/apiGateway.ts:  // Add auth token
src/services/apiGateway.ts:  const token = localStorage.getItem('supabase.auth.token');
src/services/apiGateway.ts:  if (token) {
src/services/apiGateway.ts:      const parsed = JSON.parse(token);
src/services/apiGateway.ts:      if (parsed.access_token) {
src/services/apiGateway.ts:          Authorization: `Bearer ${parsed.access_token}`,
src/services/apiGateway.ts:      logger.error('Failed to parse auth token:', e);
src/services/cacheService.ts:  password: import.meta.env.VITE_REDIS_PASSWORD,
src/services/cacheService.ts:  keyPrefix: 'mariia:',
src/services/cacheService.ts:      const key = this.getAvailabilityKey(serviceId, location, date);
src/services/cacheService.ts:        key,
src/services/cacheService.ts:      const dateKey = this.getAvailabilityByDateKey(date, data.serviceType, location);
src/services/cacheService.ts:      await this.redis.sadd(dateKey, serviceId);
src/services/cacheService.ts:      await this.redis.expire(dateKey, TTL.AVAILABILITY);
src/services/cacheService.ts:      console.log(`Cached availability for ${key}`);
src/services/cacheService.ts:      const key = this.getAvailabilityKey(serviceId, location, date);
src/services/cacheService.ts:      const cached = await this.redis.get(key);
src/services/cacheService.ts:        console.log(`Cache hit for ${key}`);
src/services/cacheService.ts:      console.log(`Cache miss for ${key}`);
src/services/cacheService.ts:      const key = this.getAvailabilityKey(serviceId, location, date);
src/services/cacheService.ts:      await this.redis.del(key);
src/services/cacheService.ts:      const dateKey = this.getAvailabilityByDateKey(date, serviceType, location);
src/services/cacheService.ts:      await this.redis.srem(dateKey, serviceId);
src/services/cacheService.ts:      console.log(`Invalidated cache for ${key}`);
src/services/cacheService.ts:      const key = this.getHoldKey(hold.slotId);
src/services/cacheService.ts:        key,
src/services/cacheService.ts:      const userKey = this.getUserHoldsKey(hold.userId);
src/services/cacheService.ts:      await this.redis.sadd(userKey, hold.slotId);
src/services/cacheService.ts:      await this.redis.expire(userKey, TTL.HOLDS);
src/services/cacheService.ts:      const sessionKey = this.getSessionHoldsKey(hold.sessionId);
src/services/cacheService.ts:      await this.redis.sadd(sessionKey, hold.slotId);
src/services/cacheService.ts:      await this.redis.expire(sessionKey, TTL.HOLDS);
src/services/cacheService.ts:      const key = this.getHoldKey(slotId);
src/services/cacheService.ts:      const cached = await this.redis.get(key);
src/services/cacheService.ts:      const key = this.getHoldKey(slotId);
src/services/cacheService.ts:      const cached = await this.redis.get(key);
src/services/cacheService.ts:        await this.redis.del(key);
src/services/cacheService.ts:        await this.redis.srem(this.getUserHoldsKey(hold.userId), slotId);
src/services/cacheService.ts:        await this.redis.srem(this.getSessionHoldsKey(hold.sessionId), slotId);
src/services/cacheService.ts:      const key = 'services:all';
src/services/cacheService.ts:        key,
src/services/cacheService.ts:      const key = 'services:all';
src/services/cacheService.ts:      const cached = await this.redis.get(key);
src/services/cacheService.ts:      const key = this.getCalendarKey(serviceType, startDate, endDate);
src/services/cacheService.ts:        key,
src/services/cacheService.ts:      const key = this.getCalendarKey(serviceType, startDate, endDate);
src/services/cacheService.ts:      const cached = await this.redis.get(key);
src/services/cacheService.ts:      const key = 'admin:stats';
src/services/cacheService.ts:        key,
src/services/cacheService.ts:      const key = 'admin:stats';
src/services/cacheService.ts:      const cached = await this.redis.get(key);
src/services/cacheService.ts:      const keys = await this.redis.keys(pattern);
src/services/cacheService.ts:      if (keys.length > 0) {
src/services/cacheService.ts:        await this.redis.del(...keys);
src/services/cacheService.ts:      const keys = await this.redis.keys(pattern);
src/services/cacheService.ts:      if (keys.length > 0) {
src/services/cacheService.ts:        await this.redis.del(...keys);
src/services/cacheService.ts:      const pattern = `${CACHE_CONFIG.keyPrefix}*`;
src/services/cacheService.ts:      const keys = await this.redis.keys(pattern);
src/services/cacheService.ts:      if (keys.length > 0) {
src/services/cacheService.ts:        await this.redis.del(...keys);
src/services/cacheService.ts:  private getAvailabilityKey(serviceId: string, location: LocationType, date: Date): string {
src/services/cacheService.ts:  private getAvailabilityByDateKey(date: Date, serviceType: ServiceType, location: LocationType): string {
src/services/cacheService.ts:  private getHoldKey(slotId: string): string {
src/services/cacheService.ts:  private getUserHoldsKey(userId: string): string {
src/services/cacheService.ts:  private getSessionHoldsKey(sessionId: string): string {
src/services/cacheService.ts:  private getCalendarKey(serviceType: ServiceType, startDate: Date, endDate: Date): string {
src/services/cacheService.ts:      const keyspace = await this.redis.info('keyspace');
src/services/cacheService.ts:        keyspace,
src/services/logger.service.tsx:  [key: string]: any;
src/services/logger.service.tsx:    const sensitiveKeys = [
src/services/logger.service.tsx:      'password',
src/services/logger.service.tsx:      'token',
src/services/logger.service.tsx:      'secret',
src/services/logger.service.tsx:      'key',
src/services/logger.service.tsx:      for (const [key, value] of Object.entries(obj)) {
src/services/logger.service.tsx:        const fullPath = path ? `${path}.${key}` : key;
src/services/logger.service.tsx:        const lowerKey = key.toLowerCase();
src/services/logger.service.tsx:        // Check if key contains sensitive information
src/services/logger.service.tsx:        const isSensitive = sensitiveKeys.some(sensitive => lowerKey.includes(sensitive));
src/services/logger.service.tsx:          result[key] = '[REDACTED]';
src/services/logger.service.tsx:          result[key] = sanitizeValue(value, fullPath);
src/services/logger.service.tsx:          result[key] = value;
src/services/api/base.service.ts:      Object.entries(additionalData).forEach(([key, value]) => {
src/services/api/base.service.ts:        formData.append(key, String(value));
src/services/api/base.service.ts:  protected setCache(key: string, data: any, ttl: number = 5 * 60 * 1000): void {
src/services/api/base.service.ts:    this.cache.set(key, {
src/services/api/base.service.ts:  protected getCache<T>(key: string): T | null {
src/services/api/base.service.ts:    const cached = this.cache.get(key);
src/services/api/base.service.ts:      this.cache.delete(key);
src/services/api/base.service.ts:    for (const key of this.cache.keys()) {
src/services/api/base.service.ts:      if (regex.test(key)) {
src/services/api/base.service.ts:        this.cache.delete(key);
src/services/api/base.service.ts:  protected async deduplicateRequest<T>(key: string, operation: () => Promise<T>): Promise<T> {
src/services/api/base.service.ts:    if (this.pendingRequests.has(key)) {
src/services/api/base.service.ts:      logger.debug(`Request deduplicated: ${key}`);
src/services/api/base.service.ts:      return this.pendingRequests.get(key);
src/services/api/base.service.ts:      this.pendingRequests.delete(key);
src/services/api/base.service.ts:    this.pendingRequests.set(key, promise);
src/services/LocalizationService.ts:    [key: string]: string;
src/services/LocalizationService.ts:    const cacheKey = `loc_config_${cityId}`;
src/services/LocalizationService.ts:    if (this.cache.has(cacheKey)) {
src/services/LocalizationService.ts:      const cached = this.cache.get(cacheKey)!;
src/services/LocalizationService.ts:        this.cache.set(cacheKey, {
src/services/LocalizationService.ts:      this.cache.set(cacheKey, {
src/services/LocalizationService.ts:    const key = `${fromCurrency}-${toCurrency}`;
src/services/LocalizationService.ts:    const reverseKey = `${toCurrency}-${fromCurrency}`;
src/services/LocalizationService.ts:    return rates[key] || rates[reverseKey] || 1;
src/services/featureFlagService.ts:  key: string;
src/services/featureFlagService.ts:  private storageKey = 'feature_flags';
src/services/featureFlagService.ts:      if (e.key === this.storageKey) {
src/services/featureFlagService.ts:        key: 'new-booking-flow',
src/services/featureFlagService.ts:        key: 'websocket-availability',
src/services/featureFlagService.ts:        key: 'redis-caching',
src/services/featureFlagService.ts:        key: 'batch-requests',
src/services/featureFlagService.ts:        key: 'lazy-loading',
src/services/featureFlagService.ts:        key: 'error-monitoring',
src/services/featureFlagService.ts:        key: 'analytics-v2',
src/services/featureFlagService.ts:        key: 'payment-stripe-3ds',
src/services/featureFlagService.ts:        key: 'admin-redesign',
src/services/featureFlagService.ts:        key: 'booking-reminders',
src/services/featureFlagService.ts:      const cached = localStorage.getItem(this.storageKey);
src/services/featureFlagService.ts:      localStorage.setItem(this.storageKey, JSON.stringify({
src/services/featureFlagService.ts:      this.flags.set(flag.key, flag);
src/services/featureFlagService.ts:  isEnabled(key: string, userId?: string): boolean {
src/services/featureFlagService.ts:    const flag = this.flags.get(key);
src/services/featureFlagService.ts:      return this.isUserInPercentageRollout(key, flag.conditions.percentage);
src/services/featureFlagService.ts:  private isUserInPercentageRollout(key: string, percentage: number): boolean {
src/services/featureFlagService.ts:    // Create a hash from user ID, session ID, and feature key
src/services/featureFlagService.ts:    const input = `${this.context.sessionId}:${key}`;
src/services/featureFlagService.ts:    this.flags.forEach((flag, key) => {
src/services/featureFlagService.ts:      enabled[key] = this.isEnabled(key, userId);
src/services/featureFlagService.ts:  getValue<T = boolean>(key: string, defaultValue: T, userId?: string): T {
src/services/featureFlagService.ts:    const flag = this.flags.get(key);
src/services/featureFlagService.ts:    if (!flag || !this.isEnabled(key, userId)) {
src/services/featureFlagService.ts:  trackUsage(key: string, action: string, properties?: Record<string, any>): void {
src/services/featureFlagService.ts:        feature_key: key,
src/services/featureFlagService.ts:  async updateFlag(key: string, updates: Partial<FeatureFlag>): Promise<boolean> {
src/services/featureFlagService.ts:      const response = await fetch(`/api/feature-flags/${key}`, {
src/services/featureFlagService.ts:  createExperiment(key: string, variants: Record<string, any>, weights?: number[]): void {
src/services/featureFlagService.ts:      key,
src/services/featureFlagService.ts:      description: `A/B test: ${key}`,
src/services/featureFlagService.ts:          weights: weights || Object.keys(variants).map(() => 100 / Object.keys(variants).length),
src/services/featureFlagService.ts:    this.flags.set(key, flag);
src/services/featureFlagService.ts:  getExperimentVariant(key: string, userId?: string): string | null {
src/services/featureFlagService.ts:    const flag = this.flags.get(key);
src/services/featureFlagService.ts:    if (!flag || !this.isEnabled(key, userId) || !flag.conditions?.metadata?.isExperiment) {
src/services/featureFlagService.ts:    const variantKeys = Object.keys(variants);
src/services/featureFlagService.ts:    const input = `${this.context.sessionId}:${key}:experiment`;
src/services/featureFlagService.ts:    for (let i = 0; i < variantKeys.length; i++) {
src/services/featureFlagService.ts:        return variantKeys[i];
src/services/featureFlagService.ts:    return variantKeys[0];
src/services/featureFlagService.ts:export function useFeatureFlag(key: string, defaultValue: boolean = false) {
src/services/featureFlagService.ts:    return featureFlagService.isEnabled(key, userId);
src/services/featureFlagService.ts:  }, [key, userId]);
src/services/featureFlagService.ts:    featureFlagService.trackUsage(key, action, properties);
src/services/featureFlagService.ts:export function useFeatureFlags(keys: string[]): Record<string, boolean> {
src/services/featureFlagService.ts:  }, [keys, userId]);
src/services/featureFlagService.ts:export function useExperiment(key: string, variants: Record<string, any>, weights?: number[]) {
src/services/featureFlagService.ts:    if (!featureFlagService.getAllFlags().find(f => f.key === key)) {
src/services/featureFlagService.ts:      featureFlagService.createExperiment(key, variants, weights);
src/services/featureFlagService.ts:  }, [key, variants, weights]);
src/services/featureFlagService.ts:    return featureFlagService.getExperimentVariant(key, userId);
src/services/featureFlagService.ts:  }, [key, userId]);
src/services/featureFlagService.ts:    featureFlagService.trackUsage(key, action, {
src/services/featureFlagService.ts:      isEnabled: (key: string, userId?: string) => featureFlagService.isEnabled(key, userId),
