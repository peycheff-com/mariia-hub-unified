import React, { useState, useEffect, useCallback } from 'react';
import { useTranslation } from 'react-i18next';
import { toast aria-live="polite" aria-atomic="true" } from 'sonner';
import { format, addDays, addWeeks, addMonths, isAfter, isBefore, startOfMonth, endOfMonth } from 'date-fns';
import { pl, enUS, ru, uk } from 'date-fns/locale';
import {
  Loader2,
  Sparkles,
  Save,
  Send,
  RefreshCw,
  Download,
  Eye,
  Calendar as CalendarIcon2,
  Clock,
  TrendingUp,
  Zap,
  Target,
  Lightbulb,
  Play,
  Pause,
  Settings,
  BarChart3,
  Hash,
  Link2,
  CheckCircle,
  XCircle,
  AlertCircle,
  Edit3,
  Trash2,
  Copy,
  Share2,
  Image as ImageIcon,
  FileText,
  Search,
  Filter,
  Plus,
  ChevronRight,
  Globe,
  Users,
  MessageSquare,
  Heart,
  Eye as EyeIcon,
  Brain,
  TrendingDown,
  CalendarDays,
  Timer,
  Video,
  Music,
  Palette,
  Type,
  Camera,
  Megaphone,
  LineChart,
  PieChart,
  Activity,
} from 'lucide-react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  Button,
} from '@/components/ui/button';
import {
  Input,
} from '@/components/ui/input';
import {
  Label,
} from '@/components/ui/label';
import {
  Textarea,
} from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Badge,
} from '@/components/ui/badge';
import {
  Separator,
} from '@/components/ui/separator';
import {
  Switch,
} from '@/components/ui/switch';
import {
  Calendar,
  Calendar as CalendarIcon,
} from '@/components/ui/calendar';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Progress,
} from '@/components/ui/progress';
import {
  Alert,
  AlertDescription,
  AlertTitle,
} from '@/components/ui/alert';
import {
  ScrollArea,
} from '@/components/ui/scroll-area';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/tabs';
import { getAIService, BlogPostRequest } from '@/integrations/ai/service';
import { supabase } from '@/integrations/supabase/client';
import { cn } from '@/lib/utils';

// Types
interface BlogTopic {
  id: string;
  title: string;
  description: string;
  keywords: string[];
  trendScore: number;
  difficulty: 'low' | 'medium' | 'high';
  searchVolume: number;
  competition: number;
  category: string;
  suggestedAngle: string;
  targetAudience: string;
  estimatedReadTime: number;
  seoPotential: number;
  createdAt: string;
}

interface BlogPost {
  id: string;
  title: Record<string, string>;
  slug: string;
  content: Record<string, string>;
  excerpt: Record<string, string>;
  author: string;
  status: 'draft' | 'review' | 'scheduled' | 'published' | 'archived';
  language: string;
  category: string;
  tags: string[];
  featuredImage?: string;
  gallery?: string[];
  seoTitle?: Record<string, string>;
  metaDescription?: Record<string, string>;
  focusKeyword?: string;
  readabilityScore: number;
  seoScore: number;
  publishedAt?: string;
  scheduledAt?: string;
  createdAt: string;
  updatedAt: string;
  analytics: BlogAnalytics;
  autoGenerated: boolean;
  aiPrompt?: string;
  scheduledPromotion?: PromotionSchedule[];
}

interface BlogAnalytics {
  views: number;
  uniqueViews: number;
  avgReadTime: number;
  bounceRate: number;
  shares: number;
  comments: number;
  likes: number;
  ctr: number;
  conversions: number;
  revenue: number;
  ranking: KeywordRanking[];
}

interface KeywordRanking {
  keyword: string;
  position: number;
  url: string;
  searchVolume: number;
  difficulty: number;
}

interface PromotionSchedule {
  id: string;
  channel: 'email' | 'social' | 'push' | 'sms' | 'ads';
  date: string;
  status: 'pending' | 'sent' | 'failed';
  content?: string;
  targeting?: PromotionTargeting;
}

interface PromotionTargeting {
  audience: string[];
  segments: string[];
  platforms: string[];
  budget?: number;
}

interface BlogAutomatorSettings {
  autoGenerate: boolean;
  generationFrequency: 'daily' | 'weekly' | 'monthly';
  topicsCount: number;
  publishImmediately: boolean;
  autoSeoOptimization: boolean;
  autoImageGeneration: boolean;
  autoPromotion: boolean;
  promotionChannels: string[];
  bestTimeToPublish: string;
  targetReadTime: number;
  tone: 'professional' | 'friendly' | 'casual' | 'luxury';
  minWordCount: number;
  maxWordCount: number;
  includeInternalLinks: boolean;
  includeCta: boolean;
}

interface BlogAutomatorProps {
  className?: string;
}

const dateLocales = {
  en: enUS,
  pl: pl,
  ru: ru,
  uk: uk,
};

const contentCategories = [
  { id: 'beauty-tips', name: 'Beauty Tips', icon: 'üíÑ' },
  { id: 'fitness-guide', name: 'Fitness Guide', icon: 'üí™' },
  { id: 'wellness', name: 'Wellness', icon: 'üßò' },
  { id: 'lifestyle', name: 'Lifestyle', icon: '‚ú®' },
  { id: 'tutorials', name: 'Tutorials', icon: 'üìö' },
  { id: 'reviews', name: 'Reviews', icon: '‚≠ê' },
  { id: 'news', name: 'News', icon: 'üì∞' },
  { id: 'case-studies', name: 'Case Studies', icon: 'üìä' },
];

export function BlogAutomator({ className }: BlogAutomatorProps) {
  const { t, i18n } = useTranslation();
  const queryClient = useQueryClient();
  const [activeTab, setActiveTab] = useState('topics');
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedTopic, setSelectedTopic] = useState<BlogTopic | null>(null);
  const [generatedPosts, setGeneratedPosts] = useState<BlogPost[]>([]);
  const [scheduledPosts, setScheduledPosts] = useState<BlogPost[]>([]);
  const [selectedCategory, setSelectedCategory] = useState('');
  const [timeRange, setTimeRange] = useState('30');
  const [autoGenerateEnabled, setAutoGenerateEnabled] = useState(false);
  const [showPreviewDialog, setShowPreviewDialog] = useState(false);
  const [previewPost, setPreviewPost] = useState<BlogPost | null>(null);
  const [promotionSettings, setPromotionSettings] = useState<PromotionSchedule[]>([]);

  // Automator settings
  const [settings, setSettings] = useState<BlogAutomatorSettings>({
    autoGenerate: false,
    generationFrequency: 'weekly',
    topicsCount: 5,
    publishImmediately: false,
    autoSeoOptimization: true,
    autoImageGeneration: true,
    autoPromotion: true,
    promotionChannels: ['email', 'social'],
    bestTimeToPublish: '10:00',
    targetReadTime: 7,
    tone: 'luxury',
    minWordCount: 800,
    maxWordCount: 2000,
    includeInternalLinks: true,
    includeCta: true,
  });

  // Fetch trending topics
  const { data: trendingTopics, isLoading: isLoadingTopics } = useQuery({
    queryKey: ['trending-blog-topics', selectedCategory],
    queryFn: async () => {
      // Simulate API call - in production, this would use SEO APIs
      const mockTopics: BlogTopic[] = [
        {
          id: '1',
          title: 'Summer Beauty Trends 2024',
          description: 'Latest beauty trends for the upcoming summer season',
          keywords: ['summer beauty', 'trends 2024', 'makeup', 'skincare'],
          trendScore: 92,
          difficulty: 'medium',
          searchVolume: 12500,
          competition: 0.65,
          category: 'beauty-tips',
          suggestedAngle: 'Focus on eco-friendly and sustainable products',
          targetAudience: 'Women 25-45 interested in seasonal beauty',
          estimatedReadTime: 8,
          seoPotential: 88,
          createdAt: new Date().toISOString(),
        },
        {
          id: '2',
          title: 'HIIT Workouts for Busy Professionals',
          description: 'Effective HIIT routines for professionals with limited time',
          keywords: ['HIIT', 'workout', 'fitness', 'busy professionals'],
          trendScore: 85,
          difficulty: 'low',
          searchVolume: 8900,
          competition: 0.45,
          category: 'fitness-guide',
          suggestedAngle: '15-minute routines that can be done at home',
          targetAudience: 'Working professionals 30-50',
          estimatedReadTime: 6,
          seoPotential: 82,
          createdAt: new Date().toISOString(),
        },
      ];

      return mockTopics.filter(topic => !selectedCategory || topic.category === selectedCategory);
    },
  });

  // Fetch scheduled posts
  const { data: scheduledPostsData } = useQuery({
    queryKey: ['scheduled-blog-posts'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('blog_posts')
        .select('*')
        .eq('status', 'scheduled')
        .order('scheduledAt', { ascending: true });

      if (error) throw error;
      return data as BlogPost[];
    },
  });

  // Fetch published posts analytics
  const { data: postsAnalytics } = useQuery({
    queryKey: ['blog-posts-analytics', timeRange],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('blog_posts')
        .select('*')
        .eq('status', 'published')
        .gte('publishedAt', new Date(Date.now() - parseInt(timeRange) * 24 * 60 * 60 * 1000).toISOString());

      if (error) throw error;
      return data as BlogPost[];
    },
  });

  const generateBlogPostFromTopic = async (topic: BlogTopic) => {
    setIsGenerating(true);
    try {
      const aiService = getAIService();

      const request: BlogPostRequest = {
        topic: topic.title,
        category: topic.category,
        targetAudience: topic.targetAudience,
        tone: settings.tone,
        wordCount: Math.floor((settings.minWordCount + settings.maxWordCount) / 2),
        language: i18n.language as 'en' | 'pl',
        seoKeywords: topic.keywords,
      };

      const response = await aiService.generateBlogPost(request);

      const newPost: BlogPost = {
        id: Math.random().toString(36).substring(2),
        title: { [i18n.language]: response.title },
        slug: response.slug,
        content: { [i18n.language]: response.content },
        excerpt: { [i18n.language]: response.excerpt },
        author: 'AI Assistant',
        status: settings.publishImmediately ? 'published' : 'draft',
        language: i18n.language,
        category: topic.category,
        tags: response.tags,
        seoTitle: { [i18n.language]: response.seoTitle },
        metaDescription: { [i18n.language]: response.metaDescription },
        focusKeyword: topic.keywords[0],
        readabilityScore: 85,
        seoScore: response.tags.length > 3 ? 90 : 75,
        publishedAt: settings.publishImmediately ? new Date().toISOString() : undefined,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        analytics: {
          views: 0,
          uniqueViews: 0,
          avgReadTime: 0,
          bounceRate: 0,
          shares: 0,
          comments: 0,
          likes: 0,
          ctr: 0,
          conversions: 0,
          revenue: 0,
          ranking: [],
        },
        autoGenerated: true,
        aiPrompt: `Generate blog post about: ${topic.title}`,
        scheduledPromotion: settings.autoPromotion ? generatePromotionSchedule() : [],
      };

      // Save to database
      const { error } = await supabase
        .from('blog_posts')
        .insert(newPost);

      if (error) throw error;

      setGeneratedPosts([...generatedPosts, newPost]);
      toast aria-live="polite" aria-atomic="true".success(t('admin.ai.blogAutomator.postGenerated'));
      queryClient.invalidateQueries({ queryKey: ['blog-posts'] });
    } catch (error) {
      console.error('Error generating blog post:', error);
      toast aria-live="polite" aria-atomic="true".error(t('admin.ai.blogAutomator.generationError'));
    } finally {
      setIsGenerating(false);
    }
  };

  const generatePromotionSchedule = (): PromotionSchedule[] => {
    const schedules: PromotionSchedule[] = [];
    const now = new Date();

    settings.promotionChannels.forEach((channel, index) => {
      const scheduleDate = addDays(now, index + 1);
      schedules.push({
        id: Math.random().toString(36).substring(2),
        channel: channel as any,
        date: scheduleDate.toISOString(),
        status: 'pending',
        targeting: {
          audience: ['all-subscribers'],
          segments: [channel === 'email' ? 'blog-readers' : 'social-followers'],
          platforms: channel === 'social' ? ['facebook', 'instagram', 'linkedin'] : [],
        },
      });
    });

    return schedules;
  };

  const schedulePost = async (post: BlogPost, publishDate: Date) => {
    try {
      const { error } = await supabase
        .from('blog_posts')
        .update({
          status: 'scheduled',
          scheduledAt: publishDate.toISOString(),
          updatedAt: new Date().toISOString(),
        })
        .eq('id', post.id);

      if (error) throw error;

      toast aria-live="polite" aria-atomic="true".success(t('admin.ai.blogAutomator.postScheduled'));
      queryClient.invalidateQueries({ queryKey: ['blog-posts', 'scheduled-blog-posts'] });
    } catch (error) {
      console.error('Error scheduling post:', error);
      toast aria-live="polite" aria-atomic="true".error(t('admin.ai.blogAutomator.scheduleError'));
    }
  };

  const generateMultiplePosts = async () => {
    if (!trendingTopics || trendingTopics.length === 0) return;

    setIsGenerating(true);
    const postsToGenerate = Math.min(settings.topicsCount, trendingTopics.length);

    for (let i = 0; i < postsToGenerate; i++) {
      await generateBlogPostFromTopic(trendingTopics[i]);
      // Add delay between generations to avoid API limits
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    setIsGenerating(false);
    toast aria-live="polite" aria-atomic="true".success(t('admin.ai.blogAutomator.multiplePostsGenerated'));
  };

  const updateSettings = async (newSettings: Partial<BlogAutomatorSettings>) => {
    try {
      const updatedSettings = { ...settings, ...newSettings };
      setSettings(updatedSettings);

      // Save to database
      const { error } = await supabase
        .from('blog_automator_settings')
        .upsert({
          id: 'default',
          settings: updatedSettings,
          updated_at: new Date().toISOString(),
        });

      if (error) throw error;

      toast aria-live="polite" aria-atomic="true".success(t('admin.ai.blogAutomator.settingsUpdated'));
    } catch (error) {
      console.error('Error updating settings:', error);
      toast aria-live="polite" aria-atomic="true".error(t('admin.ai.blogAutomator.settingsError'));
    }
  };

  const getTrendingDirection = (score: number) => {
    if (score > 80) return { icon: TrendingUp, color: 'text-green-500' };
    if (score > 60) return { icon: Activity, color: 'text-yellow-500' };
    return { icon: TrendingDown, color: 'text-red-500' };
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'low': return 'bg-green-100 text-green-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'high': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className={cn("space-y-6", className)}>
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">{t('admin.ai.blogAutomator.title')}</h2>
          <p className="text-muted-foreground mt-2">{t('admin.ai.blogAutomator.description')}</p>
        </div>
        <div className="flex items-center gap-3">
          <Button
            variant={autoGenerateEnabled ? "default" : "outline"}
            onClick={() => updateSettings({ autoGenerate: !autoGenerateEnabled })}
          >
            {autoGenerateEnabled ? <Play className="w-4 h-4 mr-2" /> : <Pause className="w-4 h-4 mr-2" />}
            {autoGenerateEnabled ? t('admin.ai.blogAutomator.autoGenerateEnabled') : t('admin.ai.blogAutomator.autoGenerateDisabled')}
          </Button>
          <Button onClick={generateMultiplePosts} disabled={isGenerating}>
            {isGenerating ? (
              <Loader2 className="w-4 h-4 mr-2 animate-spin" />
            ) : (
              <Zap className="w-4 h-4 mr-2" />
            )}
            {t('admin.ai.blogAutomator.generatePosts')}
          </Button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <TrendingUp className="w-4 h-4" />
              {t('admin.ai.blogAutomator.trendingTopics')}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{trendingTopics?.length || 0}</div>
            <p className="text-xs text-muted-foreground mt-1">
              {t('admin.ai.blogAutomator.availableForGeneration')}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <CalendarDays className="w-4 h-4" />
              {t('admin.ai.blogAutomator.scheduledPosts')}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{scheduledPostsData?.length || 0}</div>
            <p className="text-xs text-muted-foreground mt-1">
              {t('admin.ai.blogAutomator.readyToPublish')}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <BarChart3 className="w-4 h-4" />
              {t('admin.ai.blogAutomator.avgEngagement')}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">68%</div>
            <p className="text-xs text-muted-foreground mt-1">+12% {t('admin.ai.blogAutomator.fromLastMonth')}</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Target className="w-4 h-4" />
              {t('admin.ai.blogAutomator.seoScore')}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">85/100</div>
            <p className="text-xs text-muted-foreground mt-1">{t('admin.ai.blogAutomator.avgSeoScore')}</p>
          </CardContent>
        </Card>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="topics">{t('admin.ai.blogAutomator.trendingTopics')}</TabsTrigger>
          <TabsTrigger value="generated">{t('admin.ai.blogAutomator.generatedContent')}</TabsTrigger>
          <TabsTrigger value="schedule">{t('admin.ai.blogAutomator.schedule')}</TabsTrigger>
          <TabsTrigger value="analytics">{t('admin.ai.blogAutomator.analytics')}</TabsTrigger>
        </TabsList>

        {/* Trending Topics Tab */}
        <TabsContent value="topics" className="space-y-6">
          <div className="flex items-center gap-4">
            <Select value={selectedCategory} onValueChange={setSelectedCategory}>
              <SelectTrigger className="w-64">
                <SelectValue placeholder={t('admin.ai.blogAutomator.selectCategory')} />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="">{t('admin.ai.blogAutomator.allCategories')}</SelectItem>
                {contentCategories.map((category) => (
                  <SelectItem key={category.id} value={category.id}>
                    <span className="flex items-center gap-2">
                      <span>{category.icon}</span>
                      {category.name}
                    </span>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Button variant="outline" size="sm">
              <RefreshCw className="w-4 h-4 mr-2" />
              {t('admin.ai.blogAutomator.refreshTopics')}
            </Button>
          </div>

          {isLoadingTopics ? (
            <div className="flex items-center justify-center py-12">
              <Loader2 className="w-8 h-8 animate-spin" />
            </div>
          ) : (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {trendingTopics?.map((topic) => {
                const trendDirection = getTrendingDirection(topic.trendScore);
                const TrendIcon = trendDirection.icon;

                return (
                  <Card key={topic.id} className="hover:shadow-lg transition-shadow">
                    <CardHeader>
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-2">
                            <Badge variant="outline" className={getDifficultyColor(topic.difficulty)}>
                              {topic.difficulty} {t('admin.ai.blogAutomator.difficulty')}
                            </Badge>
                            <Badge variant="outline">
                              {topic.searchVolume.toLocaleString()} {t('admin.ai.blogAutomator.searches')}
                            </Badge>
                          </div>
                          <CardTitle className="text-lg line-clamp-2">{topic.title}</CardTitle>
                          <CardDescription className="mt-2">{topic.description}</CardDescription>
                        </div>
                        <div className="flex items-center gap-1">
                          <TrendIcon className={cn("w-5 h-5", trendDirection.color)} />
                          <span className="text-2xl font-bold">{topic.trendScore}</span>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        <div>
                          <Label className="text-xs text-muted-foreground">{t('admin.ai.blogAutomator.suggestedAngle')}</Label>
                          <p className="text-sm mt-1">{topic.suggestedAngle}</p>
                        </div>

                        <div>
                          <Label className="text-xs text-muted-foreground">{t('admin.ai.blogAutomator.targetAudience')}</Label>
                          <p className="text-sm mt-1">{topic.targetAudience}</p>
                        </div>

                        <div className="flex flex-wrap gap-2">
                          {topic.keywords.map((keyword) => (
                            <Badge key={keyword} variant="secondary" className="text-xs">
                              <Hash className="w-3 h-3 mr-1" />
                              {keyword}
                            </Badge>
                          ))}
                        </div>

                        <div className="grid grid-cols-3 gap-4 pt-3 border-t">
                          <div>
                            <p className="text-xs text-muted-foreground">{t('admin.ai.blogAutomator.seoPotential')}</p>
                            <div className="flex items-center gap-2 mt-1">
                              <Progress value={topic.seoPotential} className="flex-1" />
                              <span className="text-sm font-medium">{topic.seoPotential}%</span>
                            </div>
                          </div>
                          <div>
                            <p className="text-xs text-muted-foreground">{t('admin.ai.blogAutomator.readTime')}</p>
                            <p className="text-sm font-medium">{topic.estimatedReadTime} {t('common.min')}</p>
                          </div>
                          <div>
                            <p className="text-xs text-muted-foreground">{t('admin.ai.blogAutomator.competition')}</p>
                            <p className="text-sm font-medium">{Math.round(topic.competition * 100)}%</p>
                          </div>
                        </div>

                        <div className="flex gap-2 pt-3">
                          <Button
                            onClick={() => generateBlogPostFromTopic(topic)}
                            disabled={isGenerating}
                            className="flex-1"
                          >
                            <Sparkles className="w-4 h-4 mr-2" />
                            {t('admin.ai.blogAutomator.generatePost')}
                          </Button>
                          <Button
                            variant="outline"
                            onClick={() => setSelectedTopic(topic)}
                          >
                            <Eye className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          )}
        </TabsContent>

        {/* Generated Content Tab */}
        <TabsContent value="generated" className="space-y-6">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">{t('admin.ai.blogAutomator.recentlyGenerated')}</h3>
            <Select value={timeRange} onValueChange={setTimeRange}>
              <SelectTrigger className="w-32">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="7">{t('admin.ai.blogAutomator.last7Days')}</SelectItem>
                <SelectItem value="30">{t('admin.ai.blogAutomator.last30Days')}</SelectItem>
                <SelectItem value="90">{t('admin.ai.blogAutomator.last90Days')}</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="grid grid-cols-1 gap-6">
            {generatedPosts.length === 0 ? (
              <Card>
                <CardContent className="text-center py-12">
                  <FileText className="w-12 h-12 mx-auto mb-4 text-muted-foreground" />
                  <p className="text-muted-foreground">{t('admin.ai.blogAutomator.noGeneratedPosts')}</p>
                  <Button onClick={generateMultiplePosts} className="mt-4">
                    <Zap className="w-4 h-4 mr-2" />
                    {t('admin.ai.blogAutomator.generateFirstPosts')}
                  </Button>
                </CardContent>
              </Card>
            ) : (
              generatedPosts.map((post) => (
                <Card key={post.id}>
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          <Badge variant="outline" className="bg-blue-100 text-blue-800">
                            AI {t('admin.ai.blogAutomator.generated')}
                          </Badge>
                          <Badge variant="outline">{post.category}</Badge>
                        </div>
                        <CardTitle className="line-clamp-2">
                          {post.title[i18n.language] || post.title.en}
                        </CardTitle>
                        <CardDescription className="mt-2">
                          {post.excerpt[i18n.language] || post.excerpt.en}
                        </CardDescription>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="text-right mr-4">
                          <p className="text-sm text-muted-foreground">{t('admin.ai.blogAutomator.seoScore')}</p>
                          <p className="text-2xl font-bold text-green-600">{post.seoScore}</p>
                        </div>
                        <div className="text-right">
                          <p className="text-sm text-muted-foreground">{t('admin.ai.blogAutomator.readability')}</p>
                          <p className="text-2xl font-bold text-blue-600">{post.readabilityScore}</p>
                        </div>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4 text-sm text-muted-foreground">
                        <span className="flex items-center gap-1">
                          <Clock className="w-4 h-4" />
                          {format(new Date(post.createdAt), 'dd MMM HH:mm')}
                        </span>
                        <span className="flex items-center gap-1">
                          <Type className="w-4 h-4" />
                          {post.content[i18n.language]?.split(' ').length} {t('admin.ai.blogAutomator.words')}
                        </span>
                        <span className="flex items-center gap-1">
                          <Hash className="w-4 h-4" />
                          {post.focusKeyword}
                        </span>
                      </div>
                      <div className="flex gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            setPreviewPost(post);
                            setShowPreviewDialog(true);
                          }}
                        >
                          <Eye className="w-4 h-4 mr-2" />
                          {t('common.preview')}
                        </Button>
                        <Popover>
                          <PopoverTrigger asChild>
                            <Button variant="outline" size="sm">
                              <CalendarIcon2 className="w-4 h-4 mr-2" />
                              {t('admin.ai.blogAutomator.schedule')}
                            </Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0">
                            <Calendar
                              mode="single"
                              selected={post.scheduledAt ? new Date(post.scheduledAt) : undefined}
                              onSelect={(date) => {
                                if (date) {
                                  schedulePost(post, date);
                                }
                              }}
                              initialFocus
                            />
                          </PopoverContent>
                        </Popover>
                        <Button size="sm">
                          <Send className="w-4 h-4 mr-2" />
                          {t('admin.ai.blogAutomator.publish')}
                        </Button>
                      </div>
                    </div>
                    {post.scheduledPromotion && post.scheduledPromotion.length > 0 && (
                      <div className="mt-4 pt-4 border-t">
                        <p className="text-sm font-medium mb-2">{t('admin.ai.blogAutomator.scheduledPromotion')}</p>
                        <div className="flex flex-wrap gap-2">
                          {post.scheduledPromotion.map((promo) => (
                            <Badge key={promo.id} variant="secondary" className="text-xs">
                              {promo.channel} - {format(new Date(promo.date), 'dd MMM')}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              ))
            )}
          </div>
        </TabsContent>

        {/* Schedule Tab */}
        <TabsContent value="schedule" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>{t('admin.ai.blogAutomator.publishingSchedule')}</CardTitle>
              <CardDescription>{t('admin.ai.blogAutomator.scheduleDescription')}</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div>
                    <Label>{t('admin.ai.blogAutomator.frequency')}</Label>
                    <Select
                      value={settings.generationFrequency}
                      onValueChange={(value: any) => updateSettings({ generationFrequency: value })}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="daily">{t('admin.ai.blogAutomator.daily')}</SelectItem>
                        <SelectItem value="weekly">{t('admin.ai.blogAutomator.weekly')}</SelectItem>
                        <SelectItem value="monthly">{t('admin.ai.blogAutomator.monthly')}</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label>{t('admin.ai.blogAutomator.postsPerGeneration')}</Label>
                    <Input
                      type="number"
                      value={settings.topicsCount}
                      onChange={(e) => updateSettings({ topicsCount: parseInt(e.target.value) })}
                      min={1}
                      max={10}
                    />
                  </div>
                  <div>
                    <Label>{t('admin.ai.blogAutomator.publishTime')}</Label>
                    <Input
                      type="time"
                      value={settings.bestTimeToPublish}
                      onChange={(e) => updateSettings({ bestTimeToPublish: e.target.value })}
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label>{t('admin.ai.blogAutomator.targetReadTime')}</Label>
                    <div className="flex items-center gap-2 mt-2">
                      <span>{settings.targetReadTime} {t('common.min')}</span>
                      <input
                        type="range"
                        min={3}
                        max={15}
                        value={settings.targetReadTime}
                        onChange={(e) => updateSettings({ targetReadTime: parseInt(e.target.value) })}
                        className="flex-1"
                      />
                    </div>
                  </div>
                  <div>
                    <Label>{t('admin.ai.blogAutomator.tone')}</Label>
                    <Select
                      value={settings.tone}
                      onValueChange={(value: any) => updateSettings({ tone: value })}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="professional">{t('admin.ai.blogAutomator.professional')}</SelectItem>
                        <SelectItem value="friendly">{t('admin.ai.blogAutomator.friendly')}</SelectItem>
                        <SelectItem value="casual">{t('admin.ai.blogAutomator.casual')}</SelectItem>
                        <SelectItem value="luxury">{t('admin.ai.blogAutomator.luxury')}</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <Separator />

                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="auto-seo">{t('admin.ai.blogAutomator.autoSeoOptimization')}</Label>
                    <Switch
                      id="auto-seo"
                      checked={settings.autoSeoOptimization}
                      onCheckedChange={(checked) => updateSettings({ autoSeoOptimization: checked })}
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <Label htmlFor="auto-images">{t('admin.ai.blogAutomator.autoImageGeneration')}</Label>
                    <Switch
                      id="auto-images"
                      checked={settings.autoImageGeneration}
                      onCheckedChange={(checked) => updateSettings({ autoImageGeneration: checked })}
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <Label htmlFor="auto-promotion">{t('admin.ai.blogAutomator.autoPromotion')}</Label>
                    <Switch
                      id="auto-promotion"
                      checked={settings.autoPromotion}
                      onCheckedChange={(checked) => updateSettings({ autoPromotion: checked })}
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <Label htmlFor="publish-immediately">{t('admin.ai.blogAutomator.publishImmediately')}</Label>
                    <Switch
                      id="publish-immediately"
                      checked={settings.publishImmediately}
                      onCheckedChange={(checked) => updateSettings({ publishImmediately: checked })}
                    />
                  </div>
                </div>

                <Separator />

                <div>
                  <Label>{t('admin.ai.blogAutomator.promotionChannels')}</Label>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mt-2">
                    {['email', 'social', 'push', 'sms'].map((channel) => (
                      <div key={channel} className="flex items-center space-x-2">
                        <Switch
                          id={channel}
                          checked={settings.promotionChannels.includes(channel)}
                          onCheckedChange={(checked) => {
                            const channels = checked
                              ? [...settings.promotionChannels, channel]
                              : settings.promotionChannels.filter(c => c !== channel);
                            updateSettings({ promotionChannels: channels });
                          }}
                        />
                        <Label htmlFor={channel} className="capitalize">{channel}</Label>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Scheduled Posts Calendar */}
          <Card>
            <CardHeader>
              <CardTitle>{t('admin.ai.blogAutomator.scheduledPosts')}</CardTitle>
            </CardHeader>
            <CardContent>
              {scheduledPostsData && scheduledPostsData.length > 0 ? (
                <div className="space-y-4">
                  {scheduledPostsData.map((post) => (
                    <div key={post.id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div className="flex-1">
                        <p className="font-medium">{post.title[i18n.language] || post.title.en}</p>
                        <p className="text-sm text-muted-foreground">
                          {post.scheduledAt && format(new Date(post.scheduledAt), 'dd MMM yyyy HH:mm')}
                        </p>
                      </div>
                      <div className="flex gap-2">
                        <Button variant="outline" size="sm">
                          <Edit3 className="w-4 h-4" />
                        </Button>
                        <Button variant="outline" size="sm">
                          <Send className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 text-muted-foreground">
                  <CalendarIcon2 className="w-12 h-12 mx-auto mb-4 opacity-50" />
                  <p>{t('admin.ai.blogAutomator.noScheduledPosts')}</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Analytics Tab */}
        <TabsContent value="analytics" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <Card>
              <CardHeader className="pb-3">
                <CardTitle className="text-sm font-medium">{t('admin.ai.blogAutomator.totalViews')}</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {postsAnalytics?.reduce((acc, post) => acc + post.analytics.views, 0).toLocaleString() || 0}
                </div>
                <p className="text-xs text-muted-foreground mt-1">+23% {t('admin.ai.blogAutomator.fromLastPeriod')}</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-3">
                <CardTitle className="text-sm font-medium">{t('admin.ai.blogAutomator.avgReadTime')}</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {postsAnalytics && postsAnalytics.length > 0
                    ? Math.round(postsAnalytics.reduce((acc, post) => acc + post.analytics.avgReadTime, 0) / postsAnalytics.length)
                    : 0} {t('common.min')}
                </div>
                <p className="text-xs text-muted-foreground mt-1">+18% {t('admin.ai.blogAutomator.engagement')}</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-3">
                <CardTitle className="text-sm font-medium">{t('admin.ai.blogAutomator.socialShares')}</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {postsAnalytics?.reduce((acc, post) => acc + post.analytics.shares, 0).toLocaleString() || 0}
                </div>
                <p className="text-xs text-muted-foreground mt-1">+45% {t('admin.ai.blogAutomator.fromLastMonth')}</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-3">
                <CardTitle className="text-sm font-medium">{t('admin.ai.blogAutomator.conversions')}</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {postsAnalytics?.reduce((acc, post) => acc + post.analytics.conversions, 0) || 0}
                </div>
                <p className="text-xs text-muted-foreground mt-1">12% {t('admin.ai.blogAutomator.conversionRate')}</p>
              </CardContent>
            </Card>
          </div>

          {/* Top Performing Posts */}
          <Card>
            <CardHeader>
              <CardTitle>{t('admin.ai.blogAutomator.topPerformingPosts')}</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>{t('admin.ai.blogAutomator.title')}</TableHead>
                    <TableHead>{t('admin.ai.blogAutomator.views')}</TableHead>
                    <TableHead>{t('admin.ai.blogAutomator.readTime')}</TableHead>
                    <TableHead>{t('admin.ai.blogAutomator.engagement')}</TableHead>
                    <TableHead>{t('admin.ai.blogAutomator.seoScore')}</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {postsAnalytics?.sort((a, b) => b.analytics.views - a.analytics.views).slice(0, 5).map((post) => (
                    <TableRow key={post.id}>
                      <TableCell className="font-medium">
                        {post.title[i18n.language] || post.title.en}
                      </TableCell>
                      <TableCell>{post.analytics.views.toLocaleString()}</TableCell>
                      <TableCell>{post.analytics.avgReadTime} {t('common.min')}</TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Progress value={post.analytics.ctr * 100} className="w-16" />
                          <span className="text-sm">{Math.round(post.analytics.ctr * 100)}%</span>
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge variant="outline" className={post.seoScore > 80 ? 'text-green-600' : post.seoScore > 60 ? 'text-yellow-600' : 'text-red-600'}>
                          {post.seoScore}/100
                        </Badge>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Preview Dialog */}
      <Dialog open={showPreviewDialog} onOpenChange={setShowPreviewDialog}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>{t('admin.ai.blogAutomator.postPreview')}</DialogTitle>
          </DialogHeader>
          {previewPost && (
            <div className="space-y-6">
              <div>
                <h2 className="text-2xl font-bold mb-2">
                  {previewPost.title[i18n.language] || previewPost.title.en}
                </h2>
                <p className="text-muted-foreground">
                  {previewPost.excerpt[i18n.language] || previewPost.excerpt.en}
                </p>
              </div>
              <Separator />
              <div>
                <div className="prose prose-sm max-w-none">
                  {(previewPost.content[i18n.language] || previewPost.content.en || '').split('\n').map((paragraph, idx) => (
                    <p key={idx}>{paragraph}</p>
                  ))}
                </div>
              </div>
              <div className="flex justify-between">
                <Button variant="outline" onClick={() => setShowPreviewDialog(false)}>
                  {t('common.close')}
                </Button>
                <Button>
                  {t('admin.ai.blogAutomator.publishNow')}
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}